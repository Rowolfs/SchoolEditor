
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Role
 * 
 */
export type Role = $Result.DefaultSelection<Prisma.$RolePayload>
/**
 * Model Teacher
 * 
 */
export type Teacher = $Result.DefaultSelection<Prisma.$TeacherPayload>
/**
 * Model Discipline
 * 
 */
export type Discipline = $Result.DefaultSelection<Prisma.$DisciplinePayload>
/**
 * Model Class
 * 
 */
export type Class = $Result.DefaultSelection<Prisma.$ClassPayload>
/**
 * Model Pupil
 * 
 */
export type Pupil = $Result.DefaultSelection<Prisma.$PupilPayload>
/**
 * Model TeachersDisciplines
 * 
 */
export type TeachersDisciplines = $Result.DefaultSelection<Prisma.$TeachersDisciplinesPayload>
/**
 * Model ClassesDisciplines
 * 
 */
export type ClassesDisciplines = $Result.DefaultSelection<Prisma.$ClassesDisciplinesPayload>
/**
 * Model DisciplinePupilsMark
 * 
 */
export type DisciplinePupilsMark = $Result.DefaultSelection<Prisma.$DisciplinePupilsMarkPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.role`: Exposes CRUD operations for the **Role** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Roles
    * const roles = await prisma.role.findMany()
    * ```
    */
  get role(): Prisma.RoleDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.teacher`: Exposes CRUD operations for the **Teacher** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Teachers
    * const teachers = await prisma.teacher.findMany()
    * ```
    */
  get teacher(): Prisma.TeacherDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.discipline`: Exposes CRUD operations for the **Discipline** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Disciplines
    * const disciplines = await prisma.discipline.findMany()
    * ```
    */
  get discipline(): Prisma.DisciplineDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.class`: Exposes CRUD operations for the **Class** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Classes
    * const classes = await prisma.class.findMany()
    * ```
    */
  get class(): Prisma.ClassDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.pupil`: Exposes CRUD operations for the **Pupil** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Pupils
    * const pupils = await prisma.pupil.findMany()
    * ```
    */
  get pupil(): Prisma.PupilDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.teachersDisciplines`: Exposes CRUD operations for the **TeachersDisciplines** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TeachersDisciplines
    * const teachersDisciplines = await prisma.teachersDisciplines.findMany()
    * ```
    */
  get teachersDisciplines(): Prisma.TeachersDisciplinesDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.classesDisciplines`: Exposes CRUD operations for the **ClassesDisciplines** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ClassesDisciplines
    * const classesDisciplines = await prisma.classesDisciplines.findMany()
    * ```
    */
  get classesDisciplines(): Prisma.ClassesDisciplinesDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.disciplinePupilsMark`: Exposes CRUD operations for the **DisciplinePupilsMark** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DisciplinePupilsMarks
    * const disciplinePupilsMarks = await prisma.disciplinePupilsMark.findMany()
    * ```
    */
  get disciplinePupilsMark(): Prisma.DisciplinePupilsMarkDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.8.2
   * Query Engine version: 2060c79ba17c6bb9f5823312b6f6b7f4a845738e
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Role: 'Role',
    Teacher: 'Teacher',
    Discipline: 'Discipline',
    Class: 'Class',
    Pupil: 'Pupil',
    TeachersDisciplines: 'TeachersDisciplines',
    ClassesDisciplines: 'ClassesDisciplines',
    DisciplinePupilsMark: 'DisciplinePupilsMark'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "role" | "teacher" | "discipline" | "class" | "pupil" | "teachersDisciplines" | "classesDisciplines" | "disciplinePupilsMark"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Role: {
        payload: Prisma.$RolePayload<ExtArgs>
        fields: Prisma.RoleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RoleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RoleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          findFirst: {
            args: Prisma.RoleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RoleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          findMany: {
            args: Prisma.RoleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>[]
          }
          create: {
            args: Prisma.RoleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          createMany: {
            args: Prisma.RoleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RoleCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>[]
          }
          delete: {
            args: Prisma.RoleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          update: {
            args: Prisma.RoleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          deleteMany: {
            args: Prisma.RoleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RoleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RoleUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>[]
          }
          upsert: {
            args: Prisma.RoleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          aggregate: {
            args: Prisma.RoleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRole>
          }
          groupBy: {
            args: Prisma.RoleGroupByArgs<ExtArgs>
            result: $Utils.Optional<RoleGroupByOutputType>[]
          }
          count: {
            args: Prisma.RoleCountArgs<ExtArgs>
            result: $Utils.Optional<RoleCountAggregateOutputType> | number
          }
        }
      }
      Teacher: {
        payload: Prisma.$TeacherPayload<ExtArgs>
        fields: Prisma.TeacherFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TeacherFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TeacherFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload>
          }
          findFirst: {
            args: Prisma.TeacherFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TeacherFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload>
          }
          findMany: {
            args: Prisma.TeacherFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload>[]
          }
          create: {
            args: Prisma.TeacherCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload>
          }
          createMany: {
            args: Prisma.TeacherCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TeacherCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload>[]
          }
          delete: {
            args: Prisma.TeacherDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload>
          }
          update: {
            args: Prisma.TeacherUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload>
          }
          deleteMany: {
            args: Prisma.TeacherDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TeacherUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TeacherUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload>[]
          }
          upsert: {
            args: Prisma.TeacherUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeacherPayload>
          }
          aggregate: {
            args: Prisma.TeacherAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTeacher>
          }
          groupBy: {
            args: Prisma.TeacherGroupByArgs<ExtArgs>
            result: $Utils.Optional<TeacherGroupByOutputType>[]
          }
          count: {
            args: Prisma.TeacherCountArgs<ExtArgs>
            result: $Utils.Optional<TeacherCountAggregateOutputType> | number
          }
        }
      }
      Discipline: {
        payload: Prisma.$DisciplinePayload<ExtArgs>
        fields: Prisma.DisciplineFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DisciplineFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DisciplinePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DisciplineFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DisciplinePayload>
          }
          findFirst: {
            args: Prisma.DisciplineFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DisciplinePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DisciplineFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DisciplinePayload>
          }
          findMany: {
            args: Prisma.DisciplineFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DisciplinePayload>[]
          }
          create: {
            args: Prisma.DisciplineCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DisciplinePayload>
          }
          createMany: {
            args: Prisma.DisciplineCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DisciplineCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DisciplinePayload>[]
          }
          delete: {
            args: Prisma.DisciplineDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DisciplinePayload>
          }
          update: {
            args: Prisma.DisciplineUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DisciplinePayload>
          }
          deleteMany: {
            args: Prisma.DisciplineDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DisciplineUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DisciplineUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DisciplinePayload>[]
          }
          upsert: {
            args: Prisma.DisciplineUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DisciplinePayload>
          }
          aggregate: {
            args: Prisma.DisciplineAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDiscipline>
          }
          groupBy: {
            args: Prisma.DisciplineGroupByArgs<ExtArgs>
            result: $Utils.Optional<DisciplineGroupByOutputType>[]
          }
          count: {
            args: Prisma.DisciplineCountArgs<ExtArgs>
            result: $Utils.Optional<DisciplineCountAggregateOutputType> | number
          }
        }
      }
      Class: {
        payload: Prisma.$ClassPayload<ExtArgs>
        fields: Prisma.ClassFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ClassFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ClassFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload>
          }
          findFirst: {
            args: Prisma.ClassFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ClassFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload>
          }
          findMany: {
            args: Prisma.ClassFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload>[]
          }
          create: {
            args: Prisma.ClassCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload>
          }
          createMany: {
            args: Prisma.ClassCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ClassCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload>[]
          }
          delete: {
            args: Prisma.ClassDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload>
          }
          update: {
            args: Prisma.ClassUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload>
          }
          deleteMany: {
            args: Prisma.ClassDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ClassUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ClassUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload>[]
          }
          upsert: {
            args: Prisma.ClassUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassPayload>
          }
          aggregate: {
            args: Prisma.ClassAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateClass>
          }
          groupBy: {
            args: Prisma.ClassGroupByArgs<ExtArgs>
            result: $Utils.Optional<ClassGroupByOutputType>[]
          }
          count: {
            args: Prisma.ClassCountArgs<ExtArgs>
            result: $Utils.Optional<ClassCountAggregateOutputType> | number
          }
        }
      }
      Pupil: {
        payload: Prisma.$PupilPayload<ExtArgs>
        fields: Prisma.PupilFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PupilFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PupilPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PupilFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PupilPayload>
          }
          findFirst: {
            args: Prisma.PupilFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PupilPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PupilFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PupilPayload>
          }
          findMany: {
            args: Prisma.PupilFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PupilPayload>[]
          }
          create: {
            args: Prisma.PupilCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PupilPayload>
          }
          createMany: {
            args: Prisma.PupilCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PupilCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PupilPayload>[]
          }
          delete: {
            args: Prisma.PupilDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PupilPayload>
          }
          update: {
            args: Prisma.PupilUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PupilPayload>
          }
          deleteMany: {
            args: Prisma.PupilDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PupilUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PupilUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PupilPayload>[]
          }
          upsert: {
            args: Prisma.PupilUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PupilPayload>
          }
          aggregate: {
            args: Prisma.PupilAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePupil>
          }
          groupBy: {
            args: Prisma.PupilGroupByArgs<ExtArgs>
            result: $Utils.Optional<PupilGroupByOutputType>[]
          }
          count: {
            args: Prisma.PupilCountArgs<ExtArgs>
            result: $Utils.Optional<PupilCountAggregateOutputType> | number
          }
        }
      }
      TeachersDisciplines: {
        payload: Prisma.$TeachersDisciplinesPayload<ExtArgs>
        fields: Prisma.TeachersDisciplinesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TeachersDisciplinesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeachersDisciplinesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TeachersDisciplinesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeachersDisciplinesPayload>
          }
          findFirst: {
            args: Prisma.TeachersDisciplinesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeachersDisciplinesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TeachersDisciplinesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeachersDisciplinesPayload>
          }
          findMany: {
            args: Prisma.TeachersDisciplinesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeachersDisciplinesPayload>[]
          }
          create: {
            args: Prisma.TeachersDisciplinesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeachersDisciplinesPayload>
          }
          createMany: {
            args: Prisma.TeachersDisciplinesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TeachersDisciplinesCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeachersDisciplinesPayload>[]
          }
          delete: {
            args: Prisma.TeachersDisciplinesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeachersDisciplinesPayload>
          }
          update: {
            args: Prisma.TeachersDisciplinesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeachersDisciplinesPayload>
          }
          deleteMany: {
            args: Prisma.TeachersDisciplinesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TeachersDisciplinesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TeachersDisciplinesUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeachersDisciplinesPayload>[]
          }
          upsert: {
            args: Prisma.TeachersDisciplinesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeachersDisciplinesPayload>
          }
          aggregate: {
            args: Prisma.TeachersDisciplinesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTeachersDisciplines>
          }
          groupBy: {
            args: Prisma.TeachersDisciplinesGroupByArgs<ExtArgs>
            result: $Utils.Optional<TeachersDisciplinesGroupByOutputType>[]
          }
          count: {
            args: Prisma.TeachersDisciplinesCountArgs<ExtArgs>
            result: $Utils.Optional<TeachersDisciplinesCountAggregateOutputType> | number
          }
        }
      }
      ClassesDisciplines: {
        payload: Prisma.$ClassesDisciplinesPayload<ExtArgs>
        fields: Prisma.ClassesDisciplinesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ClassesDisciplinesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassesDisciplinesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ClassesDisciplinesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassesDisciplinesPayload>
          }
          findFirst: {
            args: Prisma.ClassesDisciplinesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassesDisciplinesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ClassesDisciplinesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassesDisciplinesPayload>
          }
          findMany: {
            args: Prisma.ClassesDisciplinesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassesDisciplinesPayload>[]
          }
          create: {
            args: Prisma.ClassesDisciplinesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassesDisciplinesPayload>
          }
          createMany: {
            args: Prisma.ClassesDisciplinesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ClassesDisciplinesCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassesDisciplinesPayload>[]
          }
          delete: {
            args: Prisma.ClassesDisciplinesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassesDisciplinesPayload>
          }
          update: {
            args: Prisma.ClassesDisciplinesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassesDisciplinesPayload>
          }
          deleteMany: {
            args: Prisma.ClassesDisciplinesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ClassesDisciplinesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ClassesDisciplinesUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassesDisciplinesPayload>[]
          }
          upsert: {
            args: Prisma.ClassesDisciplinesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ClassesDisciplinesPayload>
          }
          aggregate: {
            args: Prisma.ClassesDisciplinesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateClassesDisciplines>
          }
          groupBy: {
            args: Prisma.ClassesDisciplinesGroupByArgs<ExtArgs>
            result: $Utils.Optional<ClassesDisciplinesGroupByOutputType>[]
          }
          count: {
            args: Prisma.ClassesDisciplinesCountArgs<ExtArgs>
            result: $Utils.Optional<ClassesDisciplinesCountAggregateOutputType> | number
          }
        }
      }
      DisciplinePupilsMark: {
        payload: Prisma.$DisciplinePupilsMarkPayload<ExtArgs>
        fields: Prisma.DisciplinePupilsMarkFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DisciplinePupilsMarkFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DisciplinePupilsMarkPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DisciplinePupilsMarkFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DisciplinePupilsMarkPayload>
          }
          findFirst: {
            args: Prisma.DisciplinePupilsMarkFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DisciplinePupilsMarkPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DisciplinePupilsMarkFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DisciplinePupilsMarkPayload>
          }
          findMany: {
            args: Prisma.DisciplinePupilsMarkFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DisciplinePupilsMarkPayload>[]
          }
          create: {
            args: Prisma.DisciplinePupilsMarkCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DisciplinePupilsMarkPayload>
          }
          createMany: {
            args: Prisma.DisciplinePupilsMarkCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DisciplinePupilsMarkCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DisciplinePupilsMarkPayload>[]
          }
          delete: {
            args: Prisma.DisciplinePupilsMarkDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DisciplinePupilsMarkPayload>
          }
          update: {
            args: Prisma.DisciplinePupilsMarkUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DisciplinePupilsMarkPayload>
          }
          deleteMany: {
            args: Prisma.DisciplinePupilsMarkDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DisciplinePupilsMarkUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DisciplinePupilsMarkUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DisciplinePupilsMarkPayload>[]
          }
          upsert: {
            args: Prisma.DisciplinePupilsMarkUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DisciplinePupilsMarkPayload>
          }
          aggregate: {
            args: Prisma.DisciplinePupilsMarkAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDisciplinePupilsMark>
          }
          groupBy: {
            args: Prisma.DisciplinePupilsMarkGroupByArgs<ExtArgs>
            result: $Utils.Optional<DisciplinePupilsMarkGroupByOutputType>[]
          }
          count: {
            args: Prisma.DisciplinePupilsMarkCountArgs<ExtArgs>
            result: $Utils.Optional<DisciplinePupilsMarkCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    role?: RoleOmit
    teacher?: TeacherOmit
    discipline?: DisciplineOmit
    class?: ClassOmit
    pupil?: PupilOmit
    teachersDisciplines?: TeachersDisciplinesOmit
    classesDisciplines?: ClassesDisciplinesOmit
    disciplinePupilsMark?: DisciplinePupilsMarkOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type RoleCountOutputType
   */

  export type RoleCountOutputType = {
    users: number
  }

  export type RoleCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | RoleCountOutputTypeCountUsersArgs
  }

  // Custom InputTypes
  /**
   * RoleCountOutputType without action
   */
  export type RoleCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoleCountOutputType
     */
    select?: RoleCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * RoleCountOutputType without action
   */
  export type RoleCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }


  /**
   * Count Type TeacherCountOutputType
   */

  export type TeacherCountOutputType = {
    disciplines: number
  }

  export type TeacherCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    disciplines?: boolean | TeacherCountOutputTypeCountDisciplinesArgs
  }

  // Custom InputTypes
  /**
   * TeacherCountOutputType without action
   */
  export type TeacherCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeacherCountOutputType
     */
    select?: TeacherCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TeacherCountOutputType without action
   */
  export type TeacherCountOutputTypeCountDisciplinesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeachersDisciplinesWhereInput
  }


  /**
   * Count Type DisciplineCountOutputType
   */

  export type DisciplineCountOutputType = {
    teachers: number
    classes: number
    marks: number
  }

  export type DisciplineCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    teachers?: boolean | DisciplineCountOutputTypeCountTeachersArgs
    classes?: boolean | DisciplineCountOutputTypeCountClassesArgs
    marks?: boolean | DisciplineCountOutputTypeCountMarksArgs
  }

  // Custom InputTypes
  /**
   * DisciplineCountOutputType without action
   */
  export type DisciplineCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DisciplineCountOutputType
     */
    select?: DisciplineCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DisciplineCountOutputType without action
   */
  export type DisciplineCountOutputTypeCountTeachersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeachersDisciplinesWhereInput
  }

  /**
   * DisciplineCountOutputType without action
   */
  export type DisciplineCountOutputTypeCountClassesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClassesDisciplinesWhereInput
  }

  /**
   * DisciplineCountOutputType without action
   */
  export type DisciplineCountOutputTypeCountMarksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DisciplinePupilsMarkWhereInput
  }


  /**
   * Count Type ClassCountOutputType
   */

  export type ClassCountOutputType = {
    pupils: number
    disciplines: number
  }

  export type ClassCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    pupils?: boolean | ClassCountOutputTypeCountPupilsArgs
    disciplines?: boolean | ClassCountOutputTypeCountDisciplinesArgs
  }

  // Custom InputTypes
  /**
   * ClassCountOutputType without action
   */
  export type ClassCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassCountOutputType
     */
    select?: ClassCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ClassCountOutputType without action
   */
  export type ClassCountOutputTypeCountPupilsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PupilWhereInput
  }

  /**
   * ClassCountOutputType without action
   */
  export type ClassCountOutputTypeCountDisciplinesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClassesDisciplinesWhereInput
  }


  /**
   * Count Type PupilCountOutputType
   */

  export type PupilCountOutputType = {
    marks: number
  }

  export type PupilCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    marks?: boolean | PupilCountOutputTypeCountMarksArgs
  }

  // Custom InputTypes
  /**
   * PupilCountOutputType without action
   */
  export type PupilCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PupilCountOutputType
     */
    select?: PupilCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PupilCountOutputType without action
   */
  export type PupilCountOutputTypeCountMarksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DisciplinePupilsMarkWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
    roleId: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
    roleId: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    roleId: number | null
    name: string | null
    surname: string | null
    patronymic: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    roleId: number | null
    name: string | null
    surname: string | null
    patronymic: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    roleId: number
    name: number
    surname: number
    patronymic: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
    roleId?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
    roleId?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    roleId?: true
    name?: true
    surname?: true
    patronymic?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    roleId?: true
    name?: true
    surname?: true
    patronymic?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    roleId?: true
    name?: true
    surname?: true
    patronymic?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    roleId: number
    name: string
    surname: string
    patronymic: string
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    roleId?: boolean
    name?: boolean
    surname?: boolean
    patronymic?: boolean
    role?: boolean | RoleDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    roleId?: boolean
    name?: boolean
    surname?: boolean
    patronymic?: boolean
    role?: boolean | RoleDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    roleId?: boolean
    name?: boolean
    surname?: boolean
    patronymic?: boolean
    role?: boolean | RoleDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    roleId?: boolean
    name?: boolean
    surname?: boolean
    patronymic?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "roleId" | "name" | "surname" | "patronymic", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    role?: boolean | RoleDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    role?: boolean | RoleDefaultArgs<ExtArgs>
  }
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    role?: boolean | RoleDefaultArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      role: Prisma.$RolePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      roleId: number
      name: string
      surname: string
      patronymic: string
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    role<T extends RoleDefaultArgs<ExtArgs> = {}>(args?: Subset<T, RoleDefaultArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly roleId: FieldRef<"User", 'Int'>
    readonly name: FieldRef<"User", 'String'>
    readonly surname: FieldRef<"User", 'String'>
    readonly patronymic: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Role
   */

  export type AggregateRole = {
    _count: RoleCountAggregateOutputType | null
    _avg: RoleAvgAggregateOutputType | null
    _sum: RoleSumAggregateOutputType | null
    _min: RoleMinAggregateOutputType | null
    _max: RoleMaxAggregateOutputType | null
  }

  export type RoleAvgAggregateOutputType = {
    id: number | null
  }

  export type RoleSumAggregateOutputType = {
    id: number | null
  }

  export type RoleMinAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type RoleMaxAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type RoleCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type RoleAvgAggregateInputType = {
    id?: true
  }

  export type RoleSumAggregateInputType = {
    id?: true
  }

  export type RoleMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type RoleMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type RoleCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type RoleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Role to aggregate.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Roles
    **/
    _count?: true | RoleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RoleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RoleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RoleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RoleMaxAggregateInputType
  }

  export type GetRoleAggregateType<T extends RoleAggregateArgs> = {
        [P in keyof T & keyof AggregateRole]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRole[P]>
      : GetScalarType<T[P], AggregateRole[P]>
  }




  export type RoleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RoleWhereInput
    orderBy?: RoleOrderByWithAggregationInput | RoleOrderByWithAggregationInput[]
    by: RoleScalarFieldEnum[] | RoleScalarFieldEnum
    having?: RoleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RoleCountAggregateInputType | true
    _avg?: RoleAvgAggregateInputType
    _sum?: RoleSumAggregateInputType
    _min?: RoleMinAggregateInputType
    _max?: RoleMaxAggregateInputType
  }

  export type RoleGroupByOutputType = {
    id: number
    name: string
    _count: RoleCountAggregateOutputType | null
    _avg: RoleAvgAggregateOutputType | null
    _sum: RoleSumAggregateOutputType | null
    _min: RoleMinAggregateOutputType | null
    _max: RoleMaxAggregateOutputType | null
  }

  type GetRoleGroupByPayload<T extends RoleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RoleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RoleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RoleGroupByOutputType[P]>
            : GetScalarType<T[P], RoleGroupByOutputType[P]>
        }
      >
    >


  export type RoleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    users?: boolean | Role$usersArgs<ExtArgs>
    _count?: boolean | RoleCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["role"]>

  export type RoleSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
  }, ExtArgs["result"]["role"]>

  export type RoleSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
  }, ExtArgs["result"]["role"]>

  export type RoleSelectScalar = {
    id?: boolean
    name?: boolean
  }

  export type RoleOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name", ExtArgs["result"]["role"]>
  export type RoleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | Role$usersArgs<ExtArgs>
    _count?: boolean | RoleCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type RoleIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type RoleIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $RolePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Role"
    objects: {
      users: Prisma.$UserPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
    }, ExtArgs["result"]["role"]>
    composites: {}
  }

  type RoleGetPayload<S extends boolean | null | undefined | RoleDefaultArgs> = $Result.GetResult<Prisma.$RolePayload, S>

  type RoleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RoleFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RoleCountAggregateInputType | true
    }

  export interface RoleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Role'], meta: { name: 'Role' } }
    /**
     * Find zero or one Role that matches the filter.
     * @param {RoleFindUniqueArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RoleFindUniqueArgs>(args: SelectSubset<T, RoleFindUniqueArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Role that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RoleFindUniqueOrThrowArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RoleFindUniqueOrThrowArgs>(args: SelectSubset<T, RoleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Role that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleFindFirstArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RoleFindFirstArgs>(args?: SelectSubset<T, RoleFindFirstArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Role that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleFindFirstOrThrowArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RoleFindFirstOrThrowArgs>(args?: SelectSubset<T, RoleFindFirstOrThrowArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Roles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Roles
     * const roles = await prisma.role.findMany()
     * 
     * // Get first 10 Roles
     * const roles = await prisma.role.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const roleWithIdOnly = await prisma.role.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RoleFindManyArgs>(args?: SelectSubset<T, RoleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Role.
     * @param {RoleCreateArgs} args - Arguments to create a Role.
     * @example
     * // Create one Role
     * const Role = await prisma.role.create({
     *   data: {
     *     // ... data to create a Role
     *   }
     * })
     * 
     */
    create<T extends RoleCreateArgs>(args: SelectSubset<T, RoleCreateArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Roles.
     * @param {RoleCreateManyArgs} args - Arguments to create many Roles.
     * @example
     * // Create many Roles
     * const role = await prisma.role.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RoleCreateManyArgs>(args?: SelectSubset<T, RoleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Roles and returns the data saved in the database.
     * @param {RoleCreateManyAndReturnArgs} args - Arguments to create many Roles.
     * @example
     * // Create many Roles
     * const role = await prisma.role.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Roles and only return the `id`
     * const roleWithIdOnly = await prisma.role.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RoleCreateManyAndReturnArgs>(args?: SelectSubset<T, RoleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Role.
     * @param {RoleDeleteArgs} args - Arguments to delete one Role.
     * @example
     * // Delete one Role
     * const Role = await prisma.role.delete({
     *   where: {
     *     // ... filter to delete one Role
     *   }
     * })
     * 
     */
    delete<T extends RoleDeleteArgs>(args: SelectSubset<T, RoleDeleteArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Role.
     * @param {RoleUpdateArgs} args - Arguments to update one Role.
     * @example
     * // Update one Role
     * const role = await prisma.role.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RoleUpdateArgs>(args: SelectSubset<T, RoleUpdateArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Roles.
     * @param {RoleDeleteManyArgs} args - Arguments to filter Roles to delete.
     * @example
     * // Delete a few Roles
     * const { count } = await prisma.role.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RoleDeleteManyArgs>(args?: SelectSubset<T, RoleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Roles
     * const role = await prisma.role.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RoleUpdateManyArgs>(args: SelectSubset<T, RoleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Roles and returns the data updated in the database.
     * @param {RoleUpdateManyAndReturnArgs} args - Arguments to update many Roles.
     * @example
     * // Update many Roles
     * const role = await prisma.role.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Roles and only return the `id`
     * const roleWithIdOnly = await prisma.role.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RoleUpdateManyAndReturnArgs>(args: SelectSubset<T, RoleUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Role.
     * @param {RoleUpsertArgs} args - Arguments to update or create a Role.
     * @example
     * // Update or create a Role
     * const role = await prisma.role.upsert({
     *   create: {
     *     // ... data to create a Role
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Role we want to update
     *   }
     * })
     */
    upsert<T extends RoleUpsertArgs>(args: SelectSubset<T, RoleUpsertArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleCountArgs} args - Arguments to filter Roles to count.
     * @example
     * // Count the number of Roles
     * const count = await prisma.role.count({
     *   where: {
     *     // ... the filter for the Roles we want to count
     *   }
     * })
    **/
    count<T extends RoleCountArgs>(
      args?: Subset<T, RoleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RoleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Role.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RoleAggregateArgs>(args: Subset<T, RoleAggregateArgs>): Prisma.PrismaPromise<GetRoleAggregateType<T>>

    /**
     * Group by Role.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RoleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RoleGroupByArgs['orderBy'] }
        : { orderBy?: RoleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RoleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRoleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Role model
   */
  readonly fields: RoleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Role.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RoleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    users<T extends Role$usersArgs<ExtArgs> = {}>(args?: Subset<T, Role$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Role model
   */
  interface RoleFieldRefs {
    readonly id: FieldRef<"Role", 'Int'>
    readonly name: FieldRef<"Role", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Role findUnique
   */
  export type RoleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where: RoleWhereUniqueInput
  }

  /**
   * Role findUniqueOrThrow
   */
  export type RoleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where: RoleWhereUniqueInput
  }

  /**
   * Role findFirst
   */
  export type RoleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Roles.
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Roles.
     */
    distinct?: RoleScalarFieldEnum | RoleScalarFieldEnum[]
  }

  /**
   * Role findFirstOrThrow
   */
  export type RoleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Roles.
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Roles.
     */
    distinct?: RoleScalarFieldEnum | RoleScalarFieldEnum[]
  }

  /**
   * Role findMany
   */
  export type RoleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Roles to fetch.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Roles.
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    distinct?: RoleScalarFieldEnum | RoleScalarFieldEnum[]
  }

  /**
   * Role create
   */
  export type RoleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * The data needed to create a Role.
     */
    data: XOR<RoleCreateInput, RoleUncheckedCreateInput>
  }

  /**
   * Role createMany
   */
  export type RoleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Roles.
     */
    data: RoleCreateManyInput | RoleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Role createManyAndReturn
   */
  export type RoleCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * The data used to create many Roles.
     */
    data: RoleCreateManyInput | RoleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Role update
   */
  export type RoleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * The data needed to update a Role.
     */
    data: XOR<RoleUpdateInput, RoleUncheckedUpdateInput>
    /**
     * Choose, which Role to update.
     */
    where: RoleWhereUniqueInput
  }

  /**
   * Role updateMany
   */
  export type RoleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Roles.
     */
    data: XOR<RoleUpdateManyMutationInput, RoleUncheckedUpdateManyInput>
    /**
     * Filter which Roles to update
     */
    where?: RoleWhereInput
    /**
     * Limit how many Roles to update.
     */
    limit?: number
  }

  /**
   * Role updateManyAndReturn
   */
  export type RoleUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * The data used to update Roles.
     */
    data: XOR<RoleUpdateManyMutationInput, RoleUncheckedUpdateManyInput>
    /**
     * Filter which Roles to update
     */
    where?: RoleWhereInput
    /**
     * Limit how many Roles to update.
     */
    limit?: number
  }

  /**
   * Role upsert
   */
  export type RoleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * The filter to search for the Role to update in case it exists.
     */
    where: RoleWhereUniqueInput
    /**
     * In case the Role found by the `where` argument doesn't exist, create a new Role with this data.
     */
    create: XOR<RoleCreateInput, RoleUncheckedCreateInput>
    /**
     * In case the Role was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RoleUpdateInput, RoleUncheckedUpdateInput>
  }

  /**
   * Role delete
   */
  export type RoleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter which Role to delete.
     */
    where: RoleWhereUniqueInput
  }

  /**
   * Role deleteMany
   */
  export type RoleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Roles to delete
     */
    where?: RoleWhereInput
    /**
     * Limit how many Roles to delete.
     */
    limit?: number
  }

  /**
   * Role.users
   */
  export type Role$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Role without action
   */
  export type RoleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
  }


  /**
   * Model Teacher
   */

  export type AggregateTeacher = {
    _count: TeacherCountAggregateOutputType | null
    _avg: TeacherAvgAggregateOutputType | null
    _sum: TeacherSumAggregateOutputType | null
    _min: TeacherMinAggregateOutputType | null
    _max: TeacherMaxAggregateOutputType | null
  }

  export type TeacherAvgAggregateOutputType = {
    id: number | null
    classId: number | null
  }

  export type TeacherSumAggregateOutputType = {
    id: number | null
    classId: number | null
  }

  export type TeacherMinAggregateOutputType = {
    id: number | null
    classroomNumber: string | null
    classId: number | null
  }

  export type TeacherMaxAggregateOutputType = {
    id: number | null
    classroomNumber: string | null
    classId: number | null
  }

  export type TeacherCountAggregateOutputType = {
    id: number
    classroomNumber: number
    classId: number
    _all: number
  }


  export type TeacherAvgAggregateInputType = {
    id?: true
    classId?: true
  }

  export type TeacherSumAggregateInputType = {
    id?: true
    classId?: true
  }

  export type TeacherMinAggregateInputType = {
    id?: true
    classroomNumber?: true
    classId?: true
  }

  export type TeacherMaxAggregateInputType = {
    id?: true
    classroomNumber?: true
    classId?: true
  }

  export type TeacherCountAggregateInputType = {
    id?: true
    classroomNumber?: true
    classId?: true
    _all?: true
  }

  export type TeacherAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Teacher to aggregate.
     */
    where?: TeacherWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teachers to fetch.
     */
    orderBy?: TeacherOrderByWithRelationInput | TeacherOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TeacherWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teachers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teachers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Teachers
    **/
    _count?: true | TeacherCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TeacherAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TeacherSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TeacherMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TeacherMaxAggregateInputType
  }

  export type GetTeacherAggregateType<T extends TeacherAggregateArgs> = {
        [P in keyof T & keyof AggregateTeacher]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTeacher[P]>
      : GetScalarType<T[P], AggregateTeacher[P]>
  }




  export type TeacherGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeacherWhereInput
    orderBy?: TeacherOrderByWithAggregationInput | TeacherOrderByWithAggregationInput[]
    by: TeacherScalarFieldEnum[] | TeacherScalarFieldEnum
    having?: TeacherScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TeacherCountAggregateInputType | true
    _avg?: TeacherAvgAggregateInputType
    _sum?: TeacherSumAggregateInputType
    _min?: TeacherMinAggregateInputType
    _max?: TeacherMaxAggregateInputType
  }

  export type TeacherGroupByOutputType = {
    id: number
    classroomNumber: string
    classId: number | null
    _count: TeacherCountAggregateOutputType | null
    _avg: TeacherAvgAggregateOutputType | null
    _sum: TeacherSumAggregateOutputType | null
    _min: TeacherMinAggregateOutputType | null
    _max: TeacherMaxAggregateOutputType | null
  }

  type GetTeacherGroupByPayload<T extends TeacherGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TeacherGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TeacherGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TeacherGroupByOutputType[P]>
            : GetScalarType<T[P], TeacherGroupByOutputType[P]>
        }
      >
    >


  export type TeacherSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    classroomNumber?: boolean
    classId?: boolean
    class?: boolean | Teacher$classArgs<ExtArgs>
    disciplines?: boolean | Teacher$disciplinesArgs<ExtArgs>
    _count?: boolean | TeacherCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["teacher"]>

  export type TeacherSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    classroomNumber?: boolean
    classId?: boolean
    class?: boolean | Teacher$classArgs<ExtArgs>
  }, ExtArgs["result"]["teacher"]>

  export type TeacherSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    classroomNumber?: boolean
    classId?: boolean
    class?: boolean | Teacher$classArgs<ExtArgs>
  }, ExtArgs["result"]["teacher"]>

  export type TeacherSelectScalar = {
    id?: boolean
    classroomNumber?: boolean
    classId?: boolean
  }

  export type TeacherOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "classroomNumber" | "classId", ExtArgs["result"]["teacher"]>
  export type TeacherInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    class?: boolean | Teacher$classArgs<ExtArgs>
    disciplines?: boolean | Teacher$disciplinesArgs<ExtArgs>
    _count?: boolean | TeacherCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TeacherIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    class?: boolean | Teacher$classArgs<ExtArgs>
  }
  export type TeacherIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    class?: boolean | Teacher$classArgs<ExtArgs>
  }

  export type $TeacherPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Teacher"
    objects: {
      class: Prisma.$ClassPayload<ExtArgs> | null
      disciplines: Prisma.$TeachersDisciplinesPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      classroomNumber: string
      classId: number | null
    }, ExtArgs["result"]["teacher"]>
    composites: {}
  }

  type TeacherGetPayload<S extends boolean | null | undefined | TeacherDefaultArgs> = $Result.GetResult<Prisma.$TeacherPayload, S>

  type TeacherCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TeacherFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TeacherCountAggregateInputType | true
    }

  export interface TeacherDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Teacher'], meta: { name: 'Teacher' } }
    /**
     * Find zero or one Teacher that matches the filter.
     * @param {TeacherFindUniqueArgs} args - Arguments to find a Teacher
     * @example
     * // Get one Teacher
     * const teacher = await prisma.teacher.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TeacherFindUniqueArgs>(args: SelectSubset<T, TeacherFindUniqueArgs<ExtArgs>>): Prisma__TeacherClient<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Teacher that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TeacherFindUniqueOrThrowArgs} args - Arguments to find a Teacher
     * @example
     * // Get one Teacher
     * const teacher = await prisma.teacher.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TeacherFindUniqueOrThrowArgs>(args: SelectSubset<T, TeacherFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TeacherClient<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Teacher that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherFindFirstArgs} args - Arguments to find a Teacher
     * @example
     * // Get one Teacher
     * const teacher = await prisma.teacher.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TeacherFindFirstArgs>(args?: SelectSubset<T, TeacherFindFirstArgs<ExtArgs>>): Prisma__TeacherClient<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Teacher that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherFindFirstOrThrowArgs} args - Arguments to find a Teacher
     * @example
     * // Get one Teacher
     * const teacher = await prisma.teacher.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TeacherFindFirstOrThrowArgs>(args?: SelectSubset<T, TeacherFindFirstOrThrowArgs<ExtArgs>>): Prisma__TeacherClient<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Teachers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Teachers
     * const teachers = await prisma.teacher.findMany()
     * 
     * // Get first 10 Teachers
     * const teachers = await prisma.teacher.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const teacherWithIdOnly = await prisma.teacher.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TeacherFindManyArgs>(args?: SelectSubset<T, TeacherFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Teacher.
     * @param {TeacherCreateArgs} args - Arguments to create a Teacher.
     * @example
     * // Create one Teacher
     * const Teacher = await prisma.teacher.create({
     *   data: {
     *     // ... data to create a Teacher
     *   }
     * })
     * 
     */
    create<T extends TeacherCreateArgs>(args: SelectSubset<T, TeacherCreateArgs<ExtArgs>>): Prisma__TeacherClient<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Teachers.
     * @param {TeacherCreateManyArgs} args - Arguments to create many Teachers.
     * @example
     * // Create many Teachers
     * const teacher = await prisma.teacher.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TeacherCreateManyArgs>(args?: SelectSubset<T, TeacherCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Teachers and returns the data saved in the database.
     * @param {TeacherCreateManyAndReturnArgs} args - Arguments to create many Teachers.
     * @example
     * // Create many Teachers
     * const teacher = await prisma.teacher.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Teachers and only return the `id`
     * const teacherWithIdOnly = await prisma.teacher.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TeacherCreateManyAndReturnArgs>(args?: SelectSubset<T, TeacherCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Teacher.
     * @param {TeacherDeleteArgs} args - Arguments to delete one Teacher.
     * @example
     * // Delete one Teacher
     * const Teacher = await prisma.teacher.delete({
     *   where: {
     *     // ... filter to delete one Teacher
     *   }
     * })
     * 
     */
    delete<T extends TeacherDeleteArgs>(args: SelectSubset<T, TeacherDeleteArgs<ExtArgs>>): Prisma__TeacherClient<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Teacher.
     * @param {TeacherUpdateArgs} args - Arguments to update one Teacher.
     * @example
     * // Update one Teacher
     * const teacher = await prisma.teacher.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TeacherUpdateArgs>(args: SelectSubset<T, TeacherUpdateArgs<ExtArgs>>): Prisma__TeacherClient<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Teachers.
     * @param {TeacherDeleteManyArgs} args - Arguments to filter Teachers to delete.
     * @example
     * // Delete a few Teachers
     * const { count } = await prisma.teacher.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TeacherDeleteManyArgs>(args?: SelectSubset<T, TeacherDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Teachers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Teachers
     * const teacher = await prisma.teacher.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TeacherUpdateManyArgs>(args: SelectSubset<T, TeacherUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Teachers and returns the data updated in the database.
     * @param {TeacherUpdateManyAndReturnArgs} args - Arguments to update many Teachers.
     * @example
     * // Update many Teachers
     * const teacher = await prisma.teacher.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Teachers and only return the `id`
     * const teacherWithIdOnly = await prisma.teacher.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TeacherUpdateManyAndReturnArgs>(args: SelectSubset<T, TeacherUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Teacher.
     * @param {TeacherUpsertArgs} args - Arguments to update or create a Teacher.
     * @example
     * // Update or create a Teacher
     * const teacher = await prisma.teacher.upsert({
     *   create: {
     *     // ... data to create a Teacher
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Teacher we want to update
     *   }
     * })
     */
    upsert<T extends TeacherUpsertArgs>(args: SelectSubset<T, TeacherUpsertArgs<ExtArgs>>): Prisma__TeacherClient<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Teachers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherCountArgs} args - Arguments to filter Teachers to count.
     * @example
     * // Count the number of Teachers
     * const count = await prisma.teacher.count({
     *   where: {
     *     // ... the filter for the Teachers we want to count
     *   }
     * })
    **/
    count<T extends TeacherCountArgs>(
      args?: Subset<T, TeacherCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TeacherCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Teacher.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TeacherAggregateArgs>(args: Subset<T, TeacherAggregateArgs>): Prisma.PrismaPromise<GetTeacherAggregateType<T>>

    /**
     * Group by Teacher.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeacherGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TeacherGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TeacherGroupByArgs['orderBy'] }
        : { orderBy?: TeacherGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TeacherGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTeacherGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Teacher model
   */
  readonly fields: TeacherFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Teacher.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TeacherClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    class<T extends Teacher$classArgs<ExtArgs> = {}>(args?: Subset<T, Teacher$classArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    disciplines<T extends Teacher$disciplinesArgs<ExtArgs> = {}>(args?: Subset<T, Teacher$disciplinesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeachersDisciplinesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Teacher model
   */
  interface TeacherFieldRefs {
    readonly id: FieldRef<"Teacher", 'Int'>
    readonly classroomNumber: FieldRef<"Teacher", 'String'>
    readonly classId: FieldRef<"Teacher", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Teacher findUnique
   */
  export type TeacherFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Teacher
     */
    omit?: TeacherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
    /**
     * Filter, which Teacher to fetch.
     */
    where: TeacherWhereUniqueInput
  }

  /**
   * Teacher findUniqueOrThrow
   */
  export type TeacherFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Teacher
     */
    omit?: TeacherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
    /**
     * Filter, which Teacher to fetch.
     */
    where: TeacherWhereUniqueInput
  }

  /**
   * Teacher findFirst
   */
  export type TeacherFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Teacher
     */
    omit?: TeacherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
    /**
     * Filter, which Teacher to fetch.
     */
    where?: TeacherWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teachers to fetch.
     */
    orderBy?: TeacherOrderByWithRelationInput | TeacherOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Teachers.
     */
    cursor?: TeacherWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teachers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teachers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Teachers.
     */
    distinct?: TeacherScalarFieldEnum | TeacherScalarFieldEnum[]
  }

  /**
   * Teacher findFirstOrThrow
   */
  export type TeacherFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Teacher
     */
    omit?: TeacherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
    /**
     * Filter, which Teacher to fetch.
     */
    where?: TeacherWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teachers to fetch.
     */
    orderBy?: TeacherOrderByWithRelationInput | TeacherOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Teachers.
     */
    cursor?: TeacherWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teachers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teachers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Teachers.
     */
    distinct?: TeacherScalarFieldEnum | TeacherScalarFieldEnum[]
  }

  /**
   * Teacher findMany
   */
  export type TeacherFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Teacher
     */
    omit?: TeacherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
    /**
     * Filter, which Teachers to fetch.
     */
    where?: TeacherWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teachers to fetch.
     */
    orderBy?: TeacherOrderByWithRelationInput | TeacherOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Teachers.
     */
    cursor?: TeacherWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teachers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teachers.
     */
    skip?: number
    distinct?: TeacherScalarFieldEnum | TeacherScalarFieldEnum[]
  }

  /**
   * Teacher create
   */
  export type TeacherCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Teacher
     */
    omit?: TeacherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
    /**
     * The data needed to create a Teacher.
     */
    data: XOR<TeacherCreateInput, TeacherUncheckedCreateInput>
  }

  /**
   * Teacher createMany
   */
  export type TeacherCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Teachers.
     */
    data: TeacherCreateManyInput | TeacherCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Teacher createManyAndReturn
   */
  export type TeacherCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Teacher
     */
    omit?: TeacherOmit<ExtArgs> | null
    /**
     * The data used to create many Teachers.
     */
    data: TeacherCreateManyInput | TeacherCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Teacher update
   */
  export type TeacherUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Teacher
     */
    omit?: TeacherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
    /**
     * The data needed to update a Teacher.
     */
    data: XOR<TeacherUpdateInput, TeacherUncheckedUpdateInput>
    /**
     * Choose, which Teacher to update.
     */
    where: TeacherWhereUniqueInput
  }

  /**
   * Teacher updateMany
   */
  export type TeacherUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Teachers.
     */
    data: XOR<TeacherUpdateManyMutationInput, TeacherUncheckedUpdateManyInput>
    /**
     * Filter which Teachers to update
     */
    where?: TeacherWhereInput
    /**
     * Limit how many Teachers to update.
     */
    limit?: number
  }

  /**
   * Teacher updateManyAndReturn
   */
  export type TeacherUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Teacher
     */
    omit?: TeacherOmit<ExtArgs> | null
    /**
     * The data used to update Teachers.
     */
    data: XOR<TeacherUpdateManyMutationInput, TeacherUncheckedUpdateManyInput>
    /**
     * Filter which Teachers to update
     */
    where?: TeacherWhereInput
    /**
     * Limit how many Teachers to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Teacher upsert
   */
  export type TeacherUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Teacher
     */
    omit?: TeacherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
    /**
     * The filter to search for the Teacher to update in case it exists.
     */
    where: TeacherWhereUniqueInput
    /**
     * In case the Teacher found by the `where` argument doesn't exist, create a new Teacher with this data.
     */
    create: XOR<TeacherCreateInput, TeacherUncheckedCreateInput>
    /**
     * In case the Teacher was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TeacherUpdateInput, TeacherUncheckedUpdateInput>
  }

  /**
   * Teacher delete
   */
  export type TeacherDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Teacher
     */
    omit?: TeacherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
    /**
     * Filter which Teacher to delete.
     */
    where: TeacherWhereUniqueInput
  }

  /**
   * Teacher deleteMany
   */
  export type TeacherDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Teachers to delete
     */
    where?: TeacherWhereInput
    /**
     * Limit how many Teachers to delete.
     */
    limit?: number
  }

  /**
   * Teacher.class
   */
  export type Teacher$classArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    where?: ClassWhereInput
  }

  /**
   * Teacher.disciplines
   */
  export type Teacher$disciplinesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeachersDisciplines
     */
    select?: TeachersDisciplinesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeachersDisciplines
     */
    omit?: TeachersDisciplinesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeachersDisciplinesInclude<ExtArgs> | null
    where?: TeachersDisciplinesWhereInput
    orderBy?: TeachersDisciplinesOrderByWithRelationInput | TeachersDisciplinesOrderByWithRelationInput[]
    cursor?: TeachersDisciplinesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TeachersDisciplinesScalarFieldEnum | TeachersDisciplinesScalarFieldEnum[]
  }

  /**
   * Teacher without action
   */
  export type TeacherDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Teacher
     */
    omit?: TeacherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
  }


  /**
   * Model Discipline
   */

  export type AggregateDiscipline = {
    _count: DisciplineCountAggregateOutputType | null
    _avg: DisciplineAvgAggregateOutputType | null
    _sum: DisciplineSumAggregateOutputType | null
    _min: DisciplineMinAggregateOutputType | null
    _max: DisciplineMaxAggregateOutputType | null
  }

  export type DisciplineAvgAggregateOutputType = {
    id: number | null
  }

  export type DisciplineSumAggregateOutputType = {
    id: number | null
  }

  export type DisciplineMinAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
  }

  export type DisciplineMaxAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
  }

  export type DisciplineCountAggregateOutputType = {
    id: number
    name: number
    description: number
    _all: number
  }


  export type DisciplineAvgAggregateInputType = {
    id?: true
  }

  export type DisciplineSumAggregateInputType = {
    id?: true
  }

  export type DisciplineMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
  }

  export type DisciplineMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
  }

  export type DisciplineCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    _all?: true
  }

  export type DisciplineAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Discipline to aggregate.
     */
    where?: DisciplineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Disciplines to fetch.
     */
    orderBy?: DisciplineOrderByWithRelationInput | DisciplineOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DisciplineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Disciplines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Disciplines.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Disciplines
    **/
    _count?: true | DisciplineCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DisciplineAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DisciplineSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DisciplineMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DisciplineMaxAggregateInputType
  }

  export type GetDisciplineAggregateType<T extends DisciplineAggregateArgs> = {
        [P in keyof T & keyof AggregateDiscipline]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDiscipline[P]>
      : GetScalarType<T[P], AggregateDiscipline[P]>
  }




  export type DisciplineGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DisciplineWhereInput
    orderBy?: DisciplineOrderByWithAggregationInput | DisciplineOrderByWithAggregationInput[]
    by: DisciplineScalarFieldEnum[] | DisciplineScalarFieldEnum
    having?: DisciplineScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DisciplineCountAggregateInputType | true
    _avg?: DisciplineAvgAggregateInputType
    _sum?: DisciplineSumAggregateInputType
    _min?: DisciplineMinAggregateInputType
    _max?: DisciplineMaxAggregateInputType
  }

  export type DisciplineGroupByOutputType = {
    id: number
    name: string
    description: string
    _count: DisciplineCountAggregateOutputType | null
    _avg: DisciplineAvgAggregateOutputType | null
    _sum: DisciplineSumAggregateOutputType | null
    _min: DisciplineMinAggregateOutputType | null
    _max: DisciplineMaxAggregateOutputType | null
  }

  type GetDisciplineGroupByPayload<T extends DisciplineGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DisciplineGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DisciplineGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DisciplineGroupByOutputType[P]>
            : GetScalarType<T[P], DisciplineGroupByOutputType[P]>
        }
      >
    >


  export type DisciplineSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    teachers?: boolean | Discipline$teachersArgs<ExtArgs>
    classes?: boolean | Discipline$classesArgs<ExtArgs>
    marks?: boolean | Discipline$marksArgs<ExtArgs>
    _count?: boolean | DisciplineCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["discipline"]>

  export type DisciplineSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
  }, ExtArgs["result"]["discipline"]>

  export type DisciplineSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
  }, ExtArgs["result"]["discipline"]>

  export type DisciplineSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
  }

  export type DisciplineOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description", ExtArgs["result"]["discipline"]>
  export type DisciplineInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    teachers?: boolean | Discipline$teachersArgs<ExtArgs>
    classes?: boolean | Discipline$classesArgs<ExtArgs>
    marks?: boolean | Discipline$marksArgs<ExtArgs>
    _count?: boolean | DisciplineCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type DisciplineIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type DisciplineIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $DisciplinePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Discipline"
    objects: {
      teachers: Prisma.$TeachersDisciplinesPayload<ExtArgs>[]
      classes: Prisma.$ClassesDisciplinesPayload<ExtArgs>[]
      marks: Prisma.$DisciplinePupilsMarkPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      description: string
    }, ExtArgs["result"]["discipline"]>
    composites: {}
  }

  type DisciplineGetPayload<S extends boolean | null | undefined | DisciplineDefaultArgs> = $Result.GetResult<Prisma.$DisciplinePayload, S>

  type DisciplineCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DisciplineFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DisciplineCountAggregateInputType | true
    }

  export interface DisciplineDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Discipline'], meta: { name: 'Discipline' } }
    /**
     * Find zero or one Discipline that matches the filter.
     * @param {DisciplineFindUniqueArgs} args - Arguments to find a Discipline
     * @example
     * // Get one Discipline
     * const discipline = await prisma.discipline.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DisciplineFindUniqueArgs>(args: SelectSubset<T, DisciplineFindUniqueArgs<ExtArgs>>): Prisma__DisciplineClient<$Result.GetResult<Prisma.$DisciplinePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Discipline that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DisciplineFindUniqueOrThrowArgs} args - Arguments to find a Discipline
     * @example
     * // Get one Discipline
     * const discipline = await prisma.discipline.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DisciplineFindUniqueOrThrowArgs>(args: SelectSubset<T, DisciplineFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DisciplineClient<$Result.GetResult<Prisma.$DisciplinePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Discipline that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DisciplineFindFirstArgs} args - Arguments to find a Discipline
     * @example
     * // Get one Discipline
     * const discipline = await prisma.discipline.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DisciplineFindFirstArgs>(args?: SelectSubset<T, DisciplineFindFirstArgs<ExtArgs>>): Prisma__DisciplineClient<$Result.GetResult<Prisma.$DisciplinePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Discipline that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DisciplineFindFirstOrThrowArgs} args - Arguments to find a Discipline
     * @example
     * // Get one Discipline
     * const discipline = await prisma.discipline.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DisciplineFindFirstOrThrowArgs>(args?: SelectSubset<T, DisciplineFindFirstOrThrowArgs<ExtArgs>>): Prisma__DisciplineClient<$Result.GetResult<Prisma.$DisciplinePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Disciplines that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DisciplineFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Disciplines
     * const disciplines = await prisma.discipline.findMany()
     * 
     * // Get first 10 Disciplines
     * const disciplines = await prisma.discipline.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const disciplineWithIdOnly = await prisma.discipline.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DisciplineFindManyArgs>(args?: SelectSubset<T, DisciplineFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DisciplinePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Discipline.
     * @param {DisciplineCreateArgs} args - Arguments to create a Discipline.
     * @example
     * // Create one Discipline
     * const Discipline = await prisma.discipline.create({
     *   data: {
     *     // ... data to create a Discipline
     *   }
     * })
     * 
     */
    create<T extends DisciplineCreateArgs>(args: SelectSubset<T, DisciplineCreateArgs<ExtArgs>>): Prisma__DisciplineClient<$Result.GetResult<Prisma.$DisciplinePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Disciplines.
     * @param {DisciplineCreateManyArgs} args - Arguments to create many Disciplines.
     * @example
     * // Create many Disciplines
     * const discipline = await prisma.discipline.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DisciplineCreateManyArgs>(args?: SelectSubset<T, DisciplineCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Disciplines and returns the data saved in the database.
     * @param {DisciplineCreateManyAndReturnArgs} args - Arguments to create many Disciplines.
     * @example
     * // Create many Disciplines
     * const discipline = await prisma.discipline.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Disciplines and only return the `id`
     * const disciplineWithIdOnly = await prisma.discipline.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DisciplineCreateManyAndReturnArgs>(args?: SelectSubset<T, DisciplineCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DisciplinePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Discipline.
     * @param {DisciplineDeleteArgs} args - Arguments to delete one Discipline.
     * @example
     * // Delete one Discipline
     * const Discipline = await prisma.discipline.delete({
     *   where: {
     *     // ... filter to delete one Discipline
     *   }
     * })
     * 
     */
    delete<T extends DisciplineDeleteArgs>(args: SelectSubset<T, DisciplineDeleteArgs<ExtArgs>>): Prisma__DisciplineClient<$Result.GetResult<Prisma.$DisciplinePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Discipline.
     * @param {DisciplineUpdateArgs} args - Arguments to update one Discipline.
     * @example
     * // Update one Discipline
     * const discipline = await prisma.discipline.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DisciplineUpdateArgs>(args: SelectSubset<T, DisciplineUpdateArgs<ExtArgs>>): Prisma__DisciplineClient<$Result.GetResult<Prisma.$DisciplinePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Disciplines.
     * @param {DisciplineDeleteManyArgs} args - Arguments to filter Disciplines to delete.
     * @example
     * // Delete a few Disciplines
     * const { count } = await prisma.discipline.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DisciplineDeleteManyArgs>(args?: SelectSubset<T, DisciplineDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Disciplines.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DisciplineUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Disciplines
     * const discipline = await prisma.discipline.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DisciplineUpdateManyArgs>(args: SelectSubset<T, DisciplineUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Disciplines and returns the data updated in the database.
     * @param {DisciplineUpdateManyAndReturnArgs} args - Arguments to update many Disciplines.
     * @example
     * // Update many Disciplines
     * const discipline = await prisma.discipline.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Disciplines and only return the `id`
     * const disciplineWithIdOnly = await prisma.discipline.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DisciplineUpdateManyAndReturnArgs>(args: SelectSubset<T, DisciplineUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DisciplinePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Discipline.
     * @param {DisciplineUpsertArgs} args - Arguments to update or create a Discipline.
     * @example
     * // Update or create a Discipline
     * const discipline = await prisma.discipline.upsert({
     *   create: {
     *     // ... data to create a Discipline
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Discipline we want to update
     *   }
     * })
     */
    upsert<T extends DisciplineUpsertArgs>(args: SelectSubset<T, DisciplineUpsertArgs<ExtArgs>>): Prisma__DisciplineClient<$Result.GetResult<Prisma.$DisciplinePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Disciplines.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DisciplineCountArgs} args - Arguments to filter Disciplines to count.
     * @example
     * // Count the number of Disciplines
     * const count = await prisma.discipline.count({
     *   where: {
     *     // ... the filter for the Disciplines we want to count
     *   }
     * })
    **/
    count<T extends DisciplineCountArgs>(
      args?: Subset<T, DisciplineCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DisciplineCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Discipline.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DisciplineAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DisciplineAggregateArgs>(args: Subset<T, DisciplineAggregateArgs>): Prisma.PrismaPromise<GetDisciplineAggregateType<T>>

    /**
     * Group by Discipline.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DisciplineGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DisciplineGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DisciplineGroupByArgs['orderBy'] }
        : { orderBy?: DisciplineGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DisciplineGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDisciplineGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Discipline model
   */
  readonly fields: DisciplineFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Discipline.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DisciplineClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    teachers<T extends Discipline$teachersArgs<ExtArgs> = {}>(args?: Subset<T, Discipline$teachersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeachersDisciplinesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    classes<T extends Discipline$classesArgs<ExtArgs> = {}>(args?: Subset<T, Discipline$classesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClassesDisciplinesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    marks<T extends Discipline$marksArgs<ExtArgs> = {}>(args?: Subset<T, Discipline$marksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DisciplinePupilsMarkPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Discipline model
   */
  interface DisciplineFieldRefs {
    readonly id: FieldRef<"Discipline", 'Int'>
    readonly name: FieldRef<"Discipline", 'String'>
    readonly description: FieldRef<"Discipline", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Discipline findUnique
   */
  export type DisciplineFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Discipline
     */
    select?: DisciplineSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Discipline
     */
    omit?: DisciplineOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DisciplineInclude<ExtArgs> | null
    /**
     * Filter, which Discipline to fetch.
     */
    where: DisciplineWhereUniqueInput
  }

  /**
   * Discipline findUniqueOrThrow
   */
  export type DisciplineFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Discipline
     */
    select?: DisciplineSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Discipline
     */
    omit?: DisciplineOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DisciplineInclude<ExtArgs> | null
    /**
     * Filter, which Discipline to fetch.
     */
    where: DisciplineWhereUniqueInput
  }

  /**
   * Discipline findFirst
   */
  export type DisciplineFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Discipline
     */
    select?: DisciplineSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Discipline
     */
    omit?: DisciplineOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DisciplineInclude<ExtArgs> | null
    /**
     * Filter, which Discipline to fetch.
     */
    where?: DisciplineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Disciplines to fetch.
     */
    orderBy?: DisciplineOrderByWithRelationInput | DisciplineOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Disciplines.
     */
    cursor?: DisciplineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Disciplines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Disciplines.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Disciplines.
     */
    distinct?: DisciplineScalarFieldEnum | DisciplineScalarFieldEnum[]
  }

  /**
   * Discipline findFirstOrThrow
   */
  export type DisciplineFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Discipline
     */
    select?: DisciplineSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Discipline
     */
    omit?: DisciplineOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DisciplineInclude<ExtArgs> | null
    /**
     * Filter, which Discipline to fetch.
     */
    where?: DisciplineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Disciplines to fetch.
     */
    orderBy?: DisciplineOrderByWithRelationInput | DisciplineOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Disciplines.
     */
    cursor?: DisciplineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Disciplines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Disciplines.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Disciplines.
     */
    distinct?: DisciplineScalarFieldEnum | DisciplineScalarFieldEnum[]
  }

  /**
   * Discipline findMany
   */
  export type DisciplineFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Discipline
     */
    select?: DisciplineSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Discipline
     */
    omit?: DisciplineOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DisciplineInclude<ExtArgs> | null
    /**
     * Filter, which Disciplines to fetch.
     */
    where?: DisciplineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Disciplines to fetch.
     */
    orderBy?: DisciplineOrderByWithRelationInput | DisciplineOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Disciplines.
     */
    cursor?: DisciplineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Disciplines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Disciplines.
     */
    skip?: number
    distinct?: DisciplineScalarFieldEnum | DisciplineScalarFieldEnum[]
  }

  /**
   * Discipline create
   */
  export type DisciplineCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Discipline
     */
    select?: DisciplineSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Discipline
     */
    omit?: DisciplineOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DisciplineInclude<ExtArgs> | null
    /**
     * The data needed to create a Discipline.
     */
    data: XOR<DisciplineCreateInput, DisciplineUncheckedCreateInput>
  }

  /**
   * Discipline createMany
   */
  export type DisciplineCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Disciplines.
     */
    data: DisciplineCreateManyInput | DisciplineCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Discipline createManyAndReturn
   */
  export type DisciplineCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Discipline
     */
    select?: DisciplineSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Discipline
     */
    omit?: DisciplineOmit<ExtArgs> | null
    /**
     * The data used to create many Disciplines.
     */
    data: DisciplineCreateManyInput | DisciplineCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Discipline update
   */
  export type DisciplineUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Discipline
     */
    select?: DisciplineSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Discipline
     */
    omit?: DisciplineOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DisciplineInclude<ExtArgs> | null
    /**
     * The data needed to update a Discipline.
     */
    data: XOR<DisciplineUpdateInput, DisciplineUncheckedUpdateInput>
    /**
     * Choose, which Discipline to update.
     */
    where: DisciplineWhereUniqueInput
  }

  /**
   * Discipline updateMany
   */
  export type DisciplineUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Disciplines.
     */
    data: XOR<DisciplineUpdateManyMutationInput, DisciplineUncheckedUpdateManyInput>
    /**
     * Filter which Disciplines to update
     */
    where?: DisciplineWhereInput
    /**
     * Limit how many Disciplines to update.
     */
    limit?: number
  }

  /**
   * Discipline updateManyAndReturn
   */
  export type DisciplineUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Discipline
     */
    select?: DisciplineSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Discipline
     */
    omit?: DisciplineOmit<ExtArgs> | null
    /**
     * The data used to update Disciplines.
     */
    data: XOR<DisciplineUpdateManyMutationInput, DisciplineUncheckedUpdateManyInput>
    /**
     * Filter which Disciplines to update
     */
    where?: DisciplineWhereInput
    /**
     * Limit how many Disciplines to update.
     */
    limit?: number
  }

  /**
   * Discipline upsert
   */
  export type DisciplineUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Discipline
     */
    select?: DisciplineSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Discipline
     */
    omit?: DisciplineOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DisciplineInclude<ExtArgs> | null
    /**
     * The filter to search for the Discipline to update in case it exists.
     */
    where: DisciplineWhereUniqueInput
    /**
     * In case the Discipline found by the `where` argument doesn't exist, create a new Discipline with this data.
     */
    create: XOR<DisciplineCreateInput, DisciplineUncheckedCreateInput>
    /**
     * In case the Discipline was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DisciplineUpdateInput, DisciplineUncheckedUpdateInput>
  }

  /**
   * Discipline delete
   */
  export type DisciplineDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Discipline
     */
    select?: DisciplineSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Discipline
     */
    omit?: DisciplineOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DisciplineInclude<ExtArgs> | null
    /**
     * Filter which Discipline to delete.
     */
    where: DisciplineWhereUniqueInput
  }

  /**
   * Discipline deleteMany
   */
  export type DisciplineDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Disciplines to delete
     */
    where?: DisciplineWhereInput
    /**
     * Limit how many Disciplines to delete.
     */
    limit?: number
  }

  /**
   * Discipline.teachers
   */
  export type Discipline$teachersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeachersDisciplines
     */
    select?: TeachersDisciplinesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeachersDisciplines
     */
    omit?: TeachersDisciplinesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeachersDisciplinesInclude<ExtArgs> | null
    where?: TeachersDisciplinesWhereInput
    orderBy?: TeachersDisciplinesOrderByWithRelationInput | TeachersDisciplinesOrderByWithRelationInput[]
    cursor?: TeachersDisciplinesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TeachersDisciplinesScalarFieldEnum | TeachersDisciplinesScalarFieldEnum[]
  }

  /**
   * Discipline.classes
   */
  export type Discipline$classesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassesDisciplines
     */
    select?: ClassesDisciplinesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClassesDisciplines
     */
    omit?: ClassesDisciplinesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassesDisciplinesInclude<ExtArgs> | null
    where?: ClassesDisciplinesWhereInput
    orderBy?: ClassesDisciplinesOrderByWithRelationInput | ClassesDisciplinesOrderByWithRelationInput[]
    cursor?: ClassesDisciplinesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ClassesDisciplinesScalarFieldEnum | ClassesDisciplinesScalarFieldEnum[]
  }

  /**
   * Discipline.marks
   */
  export type Discipline$marksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DisciplinePupilsMark
     */
    select?: DisciplinePupilsMarkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DisciplinePupilsMark
     */
    omit?: DisciplinePupilsMarkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DisciplinePupilsMarkInclude<ExtArgs> | null
    where?: DisciplinePupilsMarkWhereInput
    orderBy?: DisciplinePupilsMarkOrderByWithRelationInput | DisciplinePupilsMarkOrderByWithRelationInput[]
    cursor?: DisciplinePupilsMarkWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DisciplinePupilsMarkScalarFieldEnum | DisciplinePupilsMarkScalarFieldEnum[]
  }

  /**
   * Discipline without action
   */
  export type DisciplineDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Discipline
     */
    select?: DisciplineSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Discipline
     */
    omit?: DisciplineOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DisciplineInclude<ExtArgs> | null
  }


  /**
   * Model Class
   */

  export type AggregateClass = {
    _count: ClassCountAggregateOutputType | null
    _avg: ClassAvgAggregateOutputType | null
    _sum: ClassSumAggregateOutputType | null
    _min: ClassMinAggregateOutputType | null
    _max: ClassMaxAggregateOutputType | null
  }

  export type ClassAvgAggregateOutputType = {
    id: number | null
    classTeacher: number | null
  }

  export type ClassSumAggregateOutputType = {
    id: number | null
    classTeacher: number | null
  }

  export type ClassMinAggregateOutputType = {
    id: number | null
    classTeacher: number | null
  }

  export type ClassMaxAggregateOutputType = {
    id: number | null
    classTeacher: number | null
  }

  export type ClassCountAggregateOutputType = {
    id: number
    classTeacher: number
    _all: number
  }


  export type ClassAvgAggregateInputType = {
    id?: true
    classTeacher?: true
  }

  export type ClassSumAggregateInputType = {
    id?: true
    classTeacher?: true
  }

  export type ClassMinAggregateInputType = {
    id?: true
    classTeacher?: true
  }

  export type ClassMaxAggregateInputType = {
    id?: true
    classTeacher?: true
  }

  export type ClassCountAggregateInputType = {
    id?: true
    classTeacher?: true
    _all?: true
  }

  export type ClassAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Class to aggregate.
     */
    where?: ClassWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Classes to fetch.
     */
    orderBy?: ClassOrderByWithRelationInput | ClassOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ClassWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Classes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Classes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Classes
    **/
    _count?: true | ClassCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ClassAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ClassSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClassMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClassMaxAggregateInputType
  }

  export type GetClassAggregateType<T extends ClassAggregateArgs> = {
        [P in keyof T & keyof AggregateClass]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClass[P]>
      : GetScalarType<T[P], AggregateClass[P]>
  }




  export type ClassGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClassWhereInput
    orderBy?: ClassOrderByWithAggregationInput | ClassOrderByWithAggregationInput[]
    by: ClassScalarFieldEnum[] | ClassScalarFieldEnum
    having?: ClassScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClassCountAggregateInputType | true
    _avg?: ClassAvgAggregateInputType
    _sum?: ClassSumAggregateInputType
    _min?: ClassMinAggregateInputType
    _max?: ClassMaxAggregateInputType
  }

  export type ClassGroupByOutputType = {
    id: number
    classTeacher: number | null
    _count: ClassCountAggregateOutputType | null
    _avg: ClassAvgAggregateOutputType | null
    _sum: ClassSumAggregateOutputType | null
    _min: ClassMinAggregateOutputType | null
    _max: ClassMaxAggregateOutputType | null
  }

  type GetClassGroupByPayload<T extends ClassGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ClassGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClassGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClassGroupByOutputType[P]>
            : GetScalarType<T[P], ClassGroupByOutputType[P]>
        }
      >
    >


  export type ClassSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    classTeacher?: boolean
    pupils?: boolean | Class$pupilsArgs<ExtArgs>
    disciplines?: boolean | Class$disciplinesArgs<ExtArgs>
    assignedTeacher?: boolean | Class$assignedTeacherArgs<ExtArgs>
    _count?: boolean | ClassCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["class"]>

  export type ClassSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    classTeacher?: boolean
  }, ExtArgs["result"]["class"]>

  export type ClassSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    classTeacher?: boolean
  }, ExtArgs["result"]["class"]>

  export type ClassSelectScalar = {
    id?: boolean
    classTeacher?: boolean
  }

  export type ClassOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "classTeacher", ExtArgs["result"]["class"]>
  export type ClassInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    pupils?: boolean | Class$pupilsArgs<ExtArgs>
    disciplines?: boolean | Class$disciplinesArgs<ExtArgs>
    assignedTeacher?: boolean | Class$assignedTeacherArgs<ExtArgs>
    _count?: boolean | ClassCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ClassIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type ClassIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ClassPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Class"
    objects: {
      pupils: Prisma.$PupilPayload<ExtArgs>[]
      disciplines: Prisma.$ClassesDisciplinesPayload<ExtArgs>[]
      assignedTeacher: Prisma.$TeacherPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      classTeacher: number | null
    }, ExtArgs["result"]["class"]>
    composites: {}
  }

  type ClassGetPayload<S extends boolean | null | undefined | ClassDefaultArgs> = $Result.GetResult<Prisma.$ClassPayload, S>

  type ClassCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ClassFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ClassCountAggregateInputType | true
    }

  export interface ClassDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Class'], meta: { name: 'Class' } }
    /**
     * Find zero or one Class that matches the filter.
     * @param {ClassFindUniqueArgs} args - Arguments to find a Class
     * @example
     * // Get one Class
     * const class = await prisma.class.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ClassFindUniqueArgs>(args: SelectSubset<T, ClassFindUniqueArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Class that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ClassFindUniqueOrThrowArgs} args - Arguments to find a Class
     * @example
     * // Get one Class
     * const class = await prisma.class.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ClassFindUniqueOrThrowArgs>(args: SelectSubset<T, ClassFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Class that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassFindFirstArgs} args - Arguments to find a Class
     * @example
     * // Get one Class
     * const class = await prisma.class.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ClassFindFirstArgs>(args?: SelectSubset<T, ClassFindFirstArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Class that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassFindFirstOrThrowArgs} args - Arguments to find a Class
     * @example
     * // Get one Class
     * const class = await prisma.class.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ClassFindFirstOrThrowArgs>(args?: SelectSubset<T, ClassFindFirstOrThrowArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Classes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Classes
     * const classes = await prisma.class.findMany()
     * 
     * // Get first 10 Classes
     * const classes = await prisma.class.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const classWithIdOnly = await prisma.class.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ClassFindManyArgs>(args?: SelectSubset<T, ClassFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Class.
     * @param {ClassCreateArgs} args - Arguments to create a Class.
     * @example
     * // Create one Class
     * const Class = await prisma.class.create({
     *   data: {
     *     // ... data to create a Class
     *   }
     * })
     * 
     */
    create<T extends ClassCreateArgs>(args: SelectSubset<T, ClassCreateArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Classes.
     * @param {ClassCreateManyArgs} args - Arguments to create many Classes.
     * @example
     * // Create many Classes
     * const class = await prisma.class.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ClassCreateManyArgs>(args?: SelectSubset<T, ClassCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Classes and returns the data saved in the database.
     * @param {ClassCreateManyAndReturnArgs} args - Arguments to create many Classes.
     * @example
     * // Create many Classes
     * const class = await prisma.class.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Classes and only return the `id`
     * const classWithIdOnly = await prisma.class.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ClassCreateManyAndReturnArgs>(args?: SelectSubset<T, ClassCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Class.
     * @param {ClassDeleteArgs} args - Arguments to delete one Class.
     * @example
     * // Delete one Class
     * const Class = await prisma.class.delete({
     *   where: {
     *     // ... filter to delete one Class
     *   }
     * })
     * 
     */
    delete<T extends ClassDeleteArgs>(args: SelectSubset<T, ClassDeleteArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Class.
     * @param {ClassUpdateArgs} args - Arguments to update one Class.
     * @example
     * // Update one Class
     * const class = await prisma.class.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ClassUpdateArgs>(args: SelectSubset<T, ClassUpdateArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Classes.
     * @param {ClassDeleteManyArgs} args - Arguments to filter Classes to delete.
     * @example
     * // Delete a few Classes
     * const { count } = await prisma.class.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ClassDeleteManyArgs>(args?: SelectSubset<T, ClassDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Classes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Classes
     * const class = await prisma.class.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ClassUpdateManyArgs>(args: SelectSubset<T, ClassUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Classes and returns the data updated in the database.
     * @param {ClassUpdateManyAndReturnArgs} args - Arguments to update many Classes.
     * @example
     * // Update many Classes
     * const class = await prisma.class.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Classes and only return the `id`
     * const classWithIdOnly = await prisma.class.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ClassUpdateManyAndReturnArgs>(args: SelectSubset<T, ClassUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Class.
     * @param {ClassUpsertArgs} args - Arguments to update or create a Class.
     * @example
     * // Update or create a Class
     * const class = await prisma.class.upsert({
     *   create: {
     *     // ... data to create a Class
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Class we want to update
     *   }
     * })
     */
    upsert<T extends ClassUpsertArgs>(args: SelectSubset<T, ClassUpsertArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Classes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassCountArgs} args - Arguments to filter Classes to count.
     * @example
     * // Count the number of Classes
     * const count = await prisma.class.count({
     *   where: {
     *     // ... the filter for the Classes we want to count
     *   }
     * })
    **/
    count<T extends ClassCountArgs>(
      args?: Subset<T, ClassCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClassCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Class.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClassAggregateArgs>(args: Subset<T, ClassAggregateArgs>): Prisma.PrismaPromise<GetClassAggregateType<T>>

    /**
     * Group by Class.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClassGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClassGroupByArgs['orderBy'] }
        : { orderBy?: ClassGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClassGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClassGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Class model
   */
  readonly fields: ClassFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Class.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ClassClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    pupils<T extends Class$pupilsArgs<ExtArgs> = {}>(args?: Subset<T, Class$pupilsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PupilPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    disciplines<T extends Class$disciplinesArgs<ExtArgs> = {}>(args?: Subset<T, Class$disciplinesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClassesDisciplinesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    assignedTeacher<T extends Class$assignedTeacherArgs<ExtArgs> = {}>(args?: Subset<T, Class$assignedTeacherArgs<ExtArgs>>): Prisma__TeacherClient<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Class model
   */
  interface ClassFieldRefs {
    readonly id: FieldRef<"Class", 'Int'>
    readonly classTeacher: FieldRef<"Class", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Class findUnique
   */
  export type ClassFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    /**
     * Filter, which Class to fetch.
     */
    where: ClassWhereUniqueInput
  }

  /**
   * Class findUniqueOrThrow
   */
  export type ClassFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    /**
     * Filter, which Class to fetch.
     */
    where: ClassWhereUniqueInput
  }

  /**
   * Class findFirst
   */
  export type ClassFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    /**
     * Filter, which Class to fetch.
     */
    where?: ClassWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Classes to fetch.
     */
    orderBy?: ClassOrderByWithRelationInput | ClassOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Classes.
     */
    cursor?: ClassWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Classes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Classes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Classes.
     */
    distinct?: ClassScalarFieldEnum | ClassScalarFieldEnum[]
  }

  /**
   * Class findFirstOrThrow
   */
  export type ClassFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    /**
     * Filter, which Class to fetch.
     */
    where?: ClassWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Classes to fetch.
     */
    orderBy?: ClassOrderByWithRelationInput | ClassOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Classes.
     */
    cursor?: ClassWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Classes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Classes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Classes.
     */
    distinct?: ClassScalarFieldEnum | ClassScalarFieldEnum[]
  }

  /**
   * Class findMany
   */
  export type ClassFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    /**
     * Filter, which Classes to fetch.
     */
    where?: ClassWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Classes to fetch.
     */
    orderBy?: ClassOrderByWithRelationInput | ClassOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Classes.
     */
    cursor?: ClassWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Classes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Classes.
     */
    skip?: number
    distinct?: ClassScalarFieldEnum | ClassScalarFieldEnum[]
  }

  /**
   * Class create
   */
  export type ClassCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    /**
     * The data needed to create a Class.
     */
    data?: XOR<ClassCreateInput, ClassUncheckedCreateInput>
  }

  /**
   * Class createMany
   */
  export type ClassCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Classes.
     */
    data: ClassCreateManyInput | ClassCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Class createManyAndReturn
   */
  export type ClassCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * The data used to create many Classes.
     */
    data: ClassCreateManyInput | ClassCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Class update
   */
  export type ClassUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    /**
     * The data needed to update a Class.
     */
    data: XOR<ClassUpdateInput, ClassUncheckedUpdateInput>
    /**
     * Choose, which Class to update.
     */
    where: ClassWhereUniqueInput
  }

  /**
   * Class updateMany
   */
  export type ClassUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Classes.
     */
    data: XOR<ClassUpdateManyMutationInput, ClassUncheckedUpdateManyInput>
    /**
     * Filter which Classes to update
     */
    where?: ClassWhereInput
    /**
     * Limit how many Classes to update.
     */
    limit?: number
  }

  /**
   * Class updateManyAndReturn
   */
  export type ClassUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * The data used to update Classes.
     */
    data: XOR<ClassUpdateManyMutationInput, ClassUncheckedUpdateManyInput>
    /**
     * Filter which Classes to update
     */
    where?: ClassWhereInput
    /**
     * Limit how many Classes to update.
     */
    limit?: number
  }

  /**
   * Class upsert
   */
  export type ClassUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    /**
     * The filter to search for the Class to update in case it exists.
     */
    where: ClassWhereUniqueInput
    /**
     * In case the Class found by the `where` argument doesn't exist, create a new Class with this data.
     */
    create: XOR<ClassCreateInput, ClassUncheckedCreateInput>
    /**
     * In case the Class was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ClassUpdateInput, ClassUncheckedUpdateInput>
  }

  /**
   * Class delete
   */
  export type ClassDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
    /**
     * Filter which Class to delete.
     */
    where: ClassWhereUniqueInput
  }

  /**
   * Class deleteMany
   */
  export type ClassDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Classes to delete
     */
    where?: ClassWhereInput
    /**
     * Limit how many Classes to delete.
     */
    limit?: number
  }

  /**
   * Class.pupils
   */
  export type Class$pupilsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pupil
     */
    select?: PupilSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Pupil
     */
    omit?: PupilOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PupilInclude<ExtArgs> | null
    where?: PupilWhereInput
    orderBy?: PupilOrderByWithRelationInput | PupilOrderByWithRelationInput[]
    cursor?: PupilWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PupilScalarFieldEnum | PupilScalarFieldEnum[]
  }

  /**
   * Class.disciplines
   */
  export type Class$disciplinesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassesDisciplines
     */
    select?: ClassesDisciplinesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClassesDisciplines
     */
    omit?: ClassesDisciplinesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassesDisciplinesInclude<ExtArgs> | null
    where?: ClassesDisciplinesWhereInput
    orderBy?: ClassesDisciplinesOrderByWithRelationInput | ClassesDisciplinesOrderByWithRelationInput[]
    cursor?: ClassesDisciplinesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ClassesDisciplinesScalarFieldEnum | ClassesDisciplinesScalarFieldEnum[]
  }

  /**
   * Class.assignedTeacher
   */
  export type Class$assignedTeacherArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Teacher
     */
    select?: TeacherSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Teacher
     */
    omit?: TeacherOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeacherInclude<ExtArgs> | null
    where?: TeacherWhereInput
  }

  /**
   * Class without action
   */
  export type ClassDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Class
     */
    select?: ClassSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Class
     */
    omit?: ClassOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassInclude<ExtArgs> | null
  }


  /**
   * Model Pupil
   */

  export type AggregatePupil = {
    _count: PupilCountAggregateOutputType | null
    _avg: PupilAvgAggregateOutputType | null
    _sum: PupilSumAggregateOutputType | null
    _min: PupilMinAggregateOutputType | null
    _max: PupilMaxAggregateOutputType | null
  }

  export type PupilAvgAggregateOutputType = {
    id: number | null
    classId: number | null
  }

  export type PupilSumAggregateOutputType = {
    id: number | null
    classId: number | null
  }

  export type PupilMinAggregateOutputType = {
    id: number | null
    classId: number | null
  }

  export type PupilMaxAggregateOutputType = {
    id: number | null
    classId: number | null
  }

  export type PupilCountAggregateOutputType = {
    id: number
    classId: number
    _all: number
  }


  export type PupilAvgAggregateInputType = {
    id?: true
    classId?: true
  }

  export type PupilSumAggregateInputType = {
    id?: true
    classId?: true
  }

  export type PupilMinAggregateInputType = {
    id?: true
    classId?: true
  }

  export type PupilMaxAggregateInputType = {
    id?: true
    classId?: true
  }

  export type PupilCountAggregateInputType = {
    id?: true
    classId?: true
    _all?: true
  }

  export type PupilAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Pupil to aggregate.
     */
    where?: PupilWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pupils to fetch.
     */
    orderBy?: PupilOrderByWithRelationInput | PupilOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PupilWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pupils from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pupils.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Pupils
    **/
    _count?: true | PupilCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PupilAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PupilSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PupilMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PupilMaxAggregateInputType
  }

  export type GetPupilAggregateType<T extends PupilAggregateArgs> = {
        [P in keyof T & keyof AggregatePupil]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePupil[P]>
      : GetScalarType<T[P], AggregatePupil[P]>
  }




  export type PupilGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PupilWhereInput
    orderBy?: PupilOrderByWithAggregationInput | PupilOrderByWithAggregationInput[]
    by: PupilScalarFieldEnum[] | PupilScalarFieldEnum
    having?: PupilScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PupilCountAggregateInputType | true
    _avg?: PupilAvgAggregateInputType
    _sum?: PupilSumAggregateInputType
    _min?: PupilMinAggregateInputType
    _max?: PupilMaxAggregateInputType
  }

  export type PupilGroupByOutputType = {
    id: number
    classId: number
    _count: PupilCountAggregateOutputType | null
    _avg: PupilAvgAggregateOutputType | null
    _sum: PupilSumAggregateOutputType | null
    _min: PupilMinAggregateOutputType | null
    _max: PupilMaxAggregateOutputType | null
  }

  type GetPupilGroupByPayload<T extends PupilGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PupilGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PupilGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PupilGroupByOutputType[P]>
            : GetScalarType<T[P], PupilGroupByOutputType[P]>
        }
      >
    >


  export type PupilSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    classId?: boolean
    class?: boolean | ClassDefaultArgs<ExtArgs>
    marks?: boolean | Pupil$marksArgs<ExtArgs>
    _count?: boolean | PupilCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["pupil"]>

  export type PupilSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    classId?: boolean
    class?: boolean | ClassDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["pupil"]>

  export type PupilSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    classId?: boolean
    class?: boolean | ClassDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["pupil"]>

  export type PupilSelectScalar = {
    id?: boolean
    classId?: boolean
  }

  export type PupilOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "classId", ExtArgs["result"]["pupil"]>
  export type PupilInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    class?: boolean | ClassDefaultArgs<ExtArgs>
    marks?: boolean | Pupil$marksArgs<ExtArgs>
    _count?: boolean | PupilCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PupilIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    class?: boolean | ClassDefaultArgs<ExtArgs>
  }
  export type PupilIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    class?: boolean | ClassDefaultArgs<ExtArgs>
  }

  export type $PupilPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Pupil"
    objects: {
      class: Prisma.$ClassPayload<ExtArgs>
      marks: Prisma.$DisciplinePupilsMarkPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      classId: number
    }, ExtArgs["result"]["pupil"]>
    composites: {}
  }

  type PupilGetPayload<S extends boolean | null | undefined | PupilDefaultArgs> = $Result.GetResult<Prisma.$PupilPayload, S>

  type PupilCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PupilFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PupilCountAggregateInputType | true
    }

  export interface PupilDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Pupil'], meta: { name: 'Pupil' } }
    /**
     * Find zero or one Pupil that matches the filter.
     * @param {PupilFindUniqueArgs} args - Arguments to find a Pupil
     * @example
     * // Get one Pupil
     * const pupil = await prisma.pupil.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PupilFindUniqueArgs>(args: SelectSubset<T, PupilFindUniqueArgs<ExtArgs>>): Prisma__PupilClient<$Result.GetResult<Prisma.$PupilPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Pupil that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PupilFindUniqueOrThrowArgs} args - Arguments to find a Pupil
     * @example
     * // Get one Pupil
     * const pupil = await prisma.pupil.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PupilFindUniqueOrThrowArgs>(args: SelectSubset<T, PupilFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PupilClient<$Result.GetResult<Prisma.$PupilPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Pupil that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PupilFindFirstArgs} args - Arguments to find a Pupil
     * @example
     * // Get one Pupil
     * const pupil = await prisma.pupil.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PupilFindFirstArgs>(args?: SelectSubset<T, PupilFindFirstArgs<ExtArgs>>): Prisma__PupilClient<$Result.GetResult<Prisma.$PupilPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Pupil that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PupilFindFirstOrThrowArgs} args - Arguments to find a Pupil
     * @example
     * // Get one Pupil
     * const pupil = await prisma.pupil.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PupilFindFirstOrThrowArgs>(args?: SelectSubset<T, PupilFindFirstOrThrowArgs<ExtArgs>>): Prisma__PupilClient<$Result.GetResult<Prisma.$PupilPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Pupils that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PupilFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Pupils
     * const pupils = await prisma.pupil.findMany()
     * 
     * // Get first 10 Pupils
     * const pupils = await prisma.pupil.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const pupilWithIdOnly = await prisma.pupil.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PupilFindManyArgs>(args?: SelectSubset<T, PupilFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PupilPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Pupil.
     * @param {PupilCreateArgs} args - Arguments to create a Pupil.
     * @example
     * // Create one Pupil
     * const Pupil = await prisma.pupil.create({
     *   data: {
     *     // ... data to create a Pupil
     *   }
     * })
     * 
     */
    create<T extends PupilCreateArgs>(args: SelectSubset<T, PupilCreateArgs<ExtArgs>>): Prisma__PupilClient<$Result.GetResult<Prisma.$PupilPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Pupils.
     * @param {PupilCreateManyArgs} args - Arguments to create many Pupils.
     * @example
     * // Create many Pupils
     * const pupil = await prisma.pupil.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PupilCreateManyArgs>(args?: SelectSubset<T, PupilCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Pupils and returns the data saved in the database.
     * @param {PupilCreateManyAndReturnArgs} args - Arguments to create many Pupils.
     * @example
     * // Create many Pupils
     * const pupil = await prisma.pupil.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Pupils and only return the `id`
     * const pupilWithIdOnly = await prisma.pupil.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PupilCreateManyAndReturnArgs>(args?: SelectSubset<T, PupilCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PupilPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Pupil.
     * @param {PupilDeleteArgs} args - Arguments to delete one Pupil.
     * @example
     * // Delete one Pupil
     * const Pupil = await prisma.pupil.delete({
     *   where: {
     *     // ... filter to delete one Pupil
     *   }
     * })
     * 
     */
    delete<T extends PupilDeleteArgs>(args: SelectSubset<T, PupilDeleteArgs<ExtArgs>>): Prisma__PupilClient<$Result.GetResult<Prisma.$PupilPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Pupil.
     * @param {PupilUpdateArgs} args - Arguments to update one Pupil.
     * @example
     * // Update one Pupil
     * const pupil = await prisma.pupil.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PupilUpdateArgs>(args: SelectSubset<T, PupilUpdateArgs<ExtArgs>>): Prisma__PupilClient<$Result.GetResult<Prisma.$PupilPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Pupils.
     * @param {PupilDeleteManyArgs} args - Arguments to filter Pupils to delete.
     * @example
     * // Delete a few Pupils
     * const { count } = await prisma.pupil.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PupilDeleteManyArgs>(args?: SelectSubset<T, PupilDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Pupils.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PupilUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Pupils
     * const pupil = await prisma.pupil.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PupilUpdateManyArgs>(args: SelectSubset<T, PupilUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Pupils and returns the data updated in the database.
     * @param {PupilUpdateManyAndReturnArgs} args - Arguments to update many Pupils.
     * @example
     * // Update many Pupils
     * const pupil = await prisma.pupil.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Pupils and only return the `id`
     * const pupilWithIdOnly = await prisma.pupil.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PupilUpdateManyAndReturnArgs>(args: SelectSubset<T, PupilUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PupilPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Pupil.
     * @param {PupilUpsertArgs} args - Arguments to update or create a Pupil.
     * @example
     * // Update or create a Pupil
     * const pupil = await prisma.pupil.upsert({
     *   create: {
     *     // ... data to create a Pupil
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Pupil we want to update
     *   }
     * })
     */
    upsert<T extends PupilUpsertArgs>(args: SelectSubset<T, PupilUpsertArgs<ExtArgs>>): Prisma__PupilClient<$Result.GetResult<Prisma.$PupilPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Pupils.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PupilCountArgs} args - Arguments to filter Pupils to count.
     * @example
     * // Count the number of Pupils
     * const count = await prisma.pupil.count({
     *   where: {
     *     // ... the filter for the Pupils we want to count
     *   }
     * })
    **/
    count<T extends PupilCountArgs>(
      args?: Subset<T, PupilCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PupilCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Pupil.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PupilAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PupilAggregateArgs>(args: Subset<T, PupilAggregateArgs>): Prisma.PrismaPromise<GetPupilAggregateType<T>>

    /**
     * Group by Pupil.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PupilGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PupilGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PupilGroupByArgs['orderBy'] }
        : { orderBy?: PupilGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PupilGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPupilGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Pupil model
   */
  readonly fields: PupilFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Pupil.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PupilClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    class<T extends ClassDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClassDefaultArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    marks<T extends Pupil$marksArgs<ExtArgs> = {}>(args?: Subset<T, Pupil$marksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DisciplinePupilsMarkPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Pupil model
   */
  interface PupilFieldRefs {
    readonly id: FieldRef<"Pupil", 'Int'>
    readonly classId: FieldRef<"Pupil", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Pupil findUnique
   */
  export type PupilFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pupil
     */
    select?: PupilSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Pupil
     */
    omit?: PupilOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PupilInclude<ExtArgs> | null
    /**
     * Filter, which Pupil to fetch.
     */
    where: PupilWhereUniqueInput
  }

  /**
   * Pupil findUniqueOrThrow
   */
  export type PupilFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pupil
     */
    select?: PupilSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Pupil
     */
    omit?: PupilOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PupilInclude<ExtArgs> | null
    /**
     * Filter, which Pupil to fetch.
     */
    where: PupilWhereUniqueInput
  }

  /**
   * Pupil findFirst
   */
  export type PupilFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pupil
     */
    select?: PupilSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Pupil
     */
    omit?: PupilOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PupilInclude<ExtArgs> | null
    /**
     * Filter, which Pupil to fetch.
     */
    where?: PupilWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pupils to fetch.
     */
    orderBy?: PupilOrderByWithRelationInput | PupilOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Pupils.
     */
    cursor?: PupilWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pupils from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pupils.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Pupils.
     */
    distinct?: PupilScalarFieldEnum | PupilScalarFieldEnum[]
  }

  /**
   * Pupil findFirstOrThrow
   */
  export type PupilFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pupil
     */
    select?: PupilSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Pupil
     */
    omit?: PupilOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PupilInclude<ExtArgs> | null
    /**
     * Filter, which Pupil to fetch.
     */
    where?: PupilWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pupils to fetch.
     */
    orderBy?: PupilOrderByWithRelationInput | PupilOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Pupils.
     */
    cursor?: PupilWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pupils from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pupils.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Pupils.
     */
    distinct?: PupilScalarFieldEnum | PupilScalarFieldEnum[]
  }

  /**
   * Pupil findMany
   */
  export type PupilFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pupil
     */
    select?: PupilSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Pupil
     */
    omit?: PupilOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PupilInclude<ExtArgs> | null
    /**
     * Filter, which Pupils to fetch.
     */
    where?: PupilWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pupils to fetch.
     */
    orderBy?: PupilOrderByWithRelationInput | PupilOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Pupils.
     */
    cursor?: PupilWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pupils from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pupils.
     */
    skip?: number
    distinct?: PupilScalarFieldEnum | PupilScalarFieldEnum[]
  }

  /**
   * Pupil create
   */
  export type PupilCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pupil
     */
    select?: PupilSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Pupil
     */
    omit?: PupilOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PupilInclude<ExtArgs> | null
    /**
     * The data needed to create a Pupil.
     */
    data: XOR<PupilCreateInput, PupilUncheckedCreateInput>
  }

  /**
   * Pupil createMany
   */
  export type PupilCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Pupils.
     */
    data: PupilCreateManyInput | PupilCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Pupil createManyAndReturn
   */
  export type PupilCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pupil
     */
    select?: PupilSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Pupil
     */
    omit?: PupilOmit<ExtArgs> | null
    /**
     * The data used to create many Pupils.
     */
    data: PupilCreateManyInput | PupilCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PupilIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Pupil update
   */
  export type PupilUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pupil
     */
    select?: PupilSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Pupil
     */
    omit?: PupilOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PupilInclude<ExtArgs> | null
    /**
     * The data needed to update a Pupil.
     */
    data: XOR<PupilUpdateInput, PupilUncheckedUpdateInput>
    /**
     * Choose, which Pupil to update.
     */
    where: PupilWhereUniqueInput
  }

  /**
   * Pupil updateMany
   */
  export type PupilUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Pupils.
     */
    data: XOR<PupilUpdateManyMutationInput, PupilUncheckedUpdateManyInput>
    /**
     * Filter which Pupils to update
     */
    where?: PupilWhereInput
    /**
     * Limit how many Pupils to update.
     */
    limit?: number
  }

  /**
   * Pupil updateManyAndReturn
   */
  export type PupilUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pupil
     */
    select?: PupilSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Pupil
     */
    omit?: PupilOmit<ExtArgs> | null
    /**
     * The data used to update Pupils.
     */
    data: XOR<PupilUpdateManyMutationInput, PupilUncheckedUpdateManyInput>
    /**
     * Filter which Pupils to update
     */
    where?: PupilWhereInput
    /**
     * Limit how many Pupils to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PupilIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Pupil upsert
   */
  export type PupilUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pupil
     */
    select?: PupilSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Pupil
     */
    omit?: PupilOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PupilInclude<ExtArgs> | null
    /**
     * The filter to search for the Pupil to update in case it exists.
     */
    where: PupilWhereUniqueInput
    /**
     * In case the Pupil found by the `where` argument doesn't exist, create a new Pupil with this data.
     */
    create: XOR<PupilCreateInput, PupilUncheckedCreateInput>
    /**
     * In case the Pupil was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PupilUpdateInput, PupilUncheckedUpdateInput>
  }

  /**
   * Pupil delete
   */
  export type PupilDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pupil
     */
    select?: PupilSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Pupil
     */
    omit?: PupilOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PupilInclude<ExtArgs> | null
    /**
     * Filter which Pupil to delete.
     */
    where: PupilWhereUniqueInput
  }

  /**
   * Pupil deleteMany
   */
  export type PupilDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Pupils to delete
     */
    where?: PupilWhereInput
    /**
     * Limit how many Pupils to delete.
     */
    limit?: number
  }

  /**
   * Pupil.marks
   */
  export type Pupil$marksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DisciplinePupilsMark
     */
    select?: DisciplinePupilsMarkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DisciplinePupilsMark
     */
    omit?: DisciplinePupilsMarkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DisciplinePupilsMarkInclude<ExtArgs> | null
    where?: DisciplinePupilsMarkWhereInput
    orderBy?: DisciplinePupilsMarkOrderByWithRelationInput | DisciplinePupilsMarkOrderByWithRelationInput[]
    cursor?: DisciplinePupilsMarkWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DisciplinePupilsMarkScalarFieldEnum | DisciplinePupilsMarkScalarFieldEnum[]
  }

  /**
   * Pupil without action
   */
  export type PupilDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pupil
     */
    select?: PupilSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Pupil
     */
    omit?: PupilOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PupilInclude<ExtArgs> | null
  }


  /**
   * Model TeachersDisciplines
   */

  export type AggregateTeachersDisciplines = {
    _count: TeachersDisciplinesCountAggregateOutputType | null
    _avg: TeachersDisciplinesAvgAggregateOutputType | null
    _sum: TeachersDisciplinesSumAggregateOutputType | null
    _min: TeachersDisciplinesMinAggregateOutputType | null
    _max: TeachersDisciplinesMaxAggregateOutputType | null
  }

  export type TeachersDisciplinesAvgAggregateOutputType = {
    teacherId: number | null
    disciplineId: number | null
  }

  export type TeachersDisciplinesSumAggregateOutputType = {
    teacherId: number | null
    disciplineId: number | null
  }

  export type TeachersDisciplinesMinAggregateOutputType = {
    teacherId: number | null
    disciplineId: number | null
  }

  export type TeachersDisciplinesMaxAggregateOutputType = {
    teacherId: number | null
    disciplineId: number | null
  }

  export type TeachersDisciplinesCountAggregateOutputType = {
    teacherId: number
    disciplineId: number
    _all: number
  }


  export type TeachersDisciplinesAvgAggregateInputType = {
    teacherId?: true
    disciplineId?: true
  }

  export type TeachersDisciplinesSumAggregateInputType = {
    teacherId?: true
    disciplineId?: true
  }

  export type TeachersDisciplinesMinAggregateInputType = {
    teacherId?: true
    disciplineId?: true
  }

  export type TeachersDisciplinesMaxAggregateInputType = {
    teacherId?: true
    disciplineId?: true
  }

  export type TeachersDisciplinesCountAggregateInputType = {
    teacherId?: true
    disciplineId?: true
    _all?: true
  }

  export type TeachersDisciplinesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TeachersDisciplines to aggregate.
     */
    where?: TeachersDisciplinesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeachersDisciplines to fetch.
     */
    orderBy?: TeachersDisciplinesOrderByWithRelationInput | TeachersDisciplinesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TeachersDisciplinesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeachersDisciplines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeachersDisciplines.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TeachersDisciplines
    **/
    _count?: true | TeachersDisciplinesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TeachersDisciplinesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TeachersDisciplinesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TeachersDisciplinesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TeachersDisciplinesMaxAggregateInputType
  }

  export type GetTeachersDisciplinesAggregateType<T extends TeachersDisciplinesAggregateArgs> = {
        [P in keyof T & keyof AggregateTeachersDisciplines]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTeachersDisciplines[P]>
      : GetScalarType<T[P], AggregateTeachersDisciplines[P]>
  }




  export type TeachersDisciplinesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeachersDisciplinesWhereInput
    orderBy?: TeachersDisciplinesOrderByWithAggregationInput | TeachersDisciplinesOrderByWithAggregationInput[]
    by: TeachersDisciplinesScalarFieldEnum[] | TeachersDisciplinesScalarFieldEnum
    having?: TeachersDisciplinesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TeachersDisciplinesCountAggregateInputType | true
    _avg?: TeachersDisciplinesAvgAggregateInputType
    _sum?: TeachersDisciplinesSumAggregateInputType
    _min?: TeachersDisciplinesMinAggregateInputType
    _max?: TeachersDisciplinesMaxAggregateInputType
  }

  export type TeachersDisciplinesGroupByOutputType = {
    teacherId: number
    disciplineId: number
    _count: TeachersDisciplinesCountAggregateOutputType | null
    _avg: TeachersDisciplinesAvgAggregateOutputType | null
    _sum: TeachersDisciplinesSumAggregateOutputType | null
    _min: TeachersDisciplinesMinAggregateOutputType | null
    _max: TeachersDisciplinesMaxAggregateOutputType | null
  }

  type GetTeachersDisciplinesGroupByPayload<T extends TeachersDisciplinesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TeachersDisciplinesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TeachersDisciplinesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TeachersDisciplinesGroupByOutputType[P]>
            : GetScalarType<T[P], TeachersDisciplinesGroupByOutputType[P]>
        }
      >
    >


  export type TeachersDisciplinesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    teacherId?: boolean
    disciplineId?: boolean
    teacher?: boolean | TeacherDefaultArgs<ExtArgs>
    discipline?: boolean | DisciplineDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["teachersDisciplines"]>

  export type TeachersDisciplinesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    teacherId?: boolean
    disciplineId?: boolean
    teacher?: boolean | TeacherDefaultArgs<ExtArgs>
    discipline?: boolean | DisciplineDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["teachersDisciplines"]>

  export type TeachersDisciplinesSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    teacherId?: boolean
    disciplineId?: boolean
    teacher?: boolean | TeacherDefaultArgs<ExtArgs>
    discipline?: boolean | DisciplineDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["teachersDisciplines"]>

  export type TeachersDisciplinesSelectScalar = {
    teacherId?: boolean
    disciplineId?: boolean
  }

  export type TeachersDisciplinesOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"teacherId" | "disciplineId", ExtArgs["result"]["teachersDisciplines"]>
  export type TeachersDisciplinesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    teacher?: boolean | TeacherDefaultArgs<ExtArgs>
    discipline?: boolean | DisciplineDefaultArgs<ExtArgs>
  }
  export type TeachersDisciplinesIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    teacher?: boolean | TeacherDefaultArgs<ExtArgs>
    discipline?: boolean | DisciplineDefaultArgs<ExtArgs>
  }
  export type TeachersDisciplinesIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    teacher?: boolean | TeacherDefaultArgs<ExtArgs>
    discipline?: boolean | DisciplineDefaultArgs<ExtArgs>
  }

  export type $TeachersDisciplinesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TeachersDisciplines"
    objects: {
      teacher: Prisma.$TeacherPayload<ExtArgs>
      discipline: Prisma.$DisciplinePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      teacherId: number
      disciplineId: number
    }, ExtArgs["result"]["teachersDisciplines"]>
    composites: {}
  }

  type TeachersDisciplinesGetPayload<S extends boolean | null | undefined | TeachersDisciplinesDefaultArgs> = $Result.GetResult<Prisma.$TeachersDisciplinesPayload, S>

  type TeachersDisciplinesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TeachersDisciplinesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TeachersDisciplinesCountAggregateInputType | true
    }

  export interface TeachersDisciplinesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TeachersDisciplines'], meta: { name: 'TeachersDisciplines' } }
    /**
     * Find zero or one TeachersDisciplines that matches the filter.
     * @param {TeachersDisciplinesFindUniqueArgs} args - Arguments to find a TeachersDisciplines
     * @example
     * // Get one TeachersDisciplines
     * const teachersDisciplines = await prisma.teachersDisciplines.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TeachersDisciplinesFindUniqueArgs>(args: SelectSubset<T, TeachersDisciplinesFindUniqueArgs<ExtArgs>>): Prisma__TeachersDisciplinesClient<$Result.GetResult<Prisma.$TeachersDisciplinesPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TeachersDisciplines that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TeachersDisciplinesFindUniqueOrThrowArgs} args - Arguments to find a TeachersDisciplines
     * @example
     * // Get one TeachersDisciplines
     * const teachersDisciplines = await prisma.teachersDisciplines.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TeachersDisciplinesFindUniqueOrThrowArgs>(args: SelectSubset<T, TeachersDisciplinesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TeachersDisciplinesClient<$Result.GetResult<Prisma.$TeachersDisciplinesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TeachersDisciplines that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeachersDisciplinesFindFirstArgs} args - Arguments to find a TeachersDisciplines
     * @example
     * // Get one TeachersDisciplines
     * const teachersDisciplines = await prisma.teachersDisciplines.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TeachersDisciplinesFindFirstArgs>(args?: SelectSubset<T, TeachersDisciplinesFindFirstArgs<ExtArgs>>): Prisma__TeachersDisciplinesClient<$Result.GetResult<Prisma.$TeachersDisciplinesPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TeachersDisciplines that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeachersDisciplinesFindFirstOrThrowArgs} args - Arguments to find a TeachersDisciplines
     * @example
     * // Get one TeachersDisciplines
     * const teachersDisciplines = await prisma.teachersDisciplines.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TeachersDisciplinesFindFirstOrThrowArgs>(args?: SelectSubset<T, TeachersDisciplinesFindFirstOrThrowArgs<ExtArgs>>): Prisma__TeachersDisciplinesClient<$Result.GetResult<Prisma.$TeachersDisciplinesPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TeachersDisciplines that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeachersDisciplinesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TeachersDisciplines
     * const teachersDisciplines = await prisma.teachersDisciplines.findMany()
     * 
     * // Get first 10 TeachersDisciplines
     * const teachersDisciplines = await prisma.teachersDisciplines.findMany({ take: 10 })
     * 
     * // Only select the `teacherId`
     * const teachersDisciplinesWithTeacherIdOnly = await prisma.teachersDisciplines.findMany({ select: { teacherId: true } })
     * 
     */
    findMany<T extends TeachersDisciplinesFindManyArgs>(args?: SelectSubset<T, TeachersDisciplinesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeachersDisciplinesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TeachersDisciplines.
     * @param {TeachersDisciplinesCreateArgs} args - Arguments to create a TeachersDisciplines.
     * @example
     * // Create one TeachersDisciplines
     * const TeachersDisciplines = await prisma.teachersDisciplines.create({
     *   data: {
     *     // ... data to create a TeachersDisciplines
     *   }
     * })
     * 
     */
    create<T extends TeachersDisciplinesCreateArgs>(args: SelectSubset<T, TeachersDisciplinesCreateArgs<ExtArgs>>): Prisma__TeachersDisciplinesClient<$Result.GetResult<Prisma.$TeachersDisciplinesPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TeachersDisciplines.
     * @param {TeachersDisciplinesCreateManyArgs} args - Arguments to create many TeachersDisciplines.
     * @example
     * // Create many TeachersDisciplines
     * const teachersDisciplines = await prisma.teachersDisciplines.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TeachersDisciplinesCreateManyArgs>(args?: SelectSubset<T, TeachersDisciplinesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TeachersDisciplines and returns the data saved in the database.
     * @param {TeachersDisciplinesCreateManyAndReturnArgs} args - Arguments to create many TeachersDisciplines.
     * @example
     * // Create many TeachersDisciplines
     * const teachersDisciplines = await prisma.teachersDisciplines.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TeachersDisciplines and only return the `teacherId`
     * const teachersDisciplinesWithTeacherIdOnly = await prisma.teachersDisciplines.createManyAndReturn({
     *   select: { teacherId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TeachersDisciplinesCreateManyAndReturnArgs>(args?: SelectSubset<T, TeachersDisciplinesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeachersDisciplinesPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a TeachersDisciplines.
     * @param {TeachersDisciplinesDeleteArgs} args - Arguments to delete one TeachersDisciplines.
     * @example
     * // Delete one TeachersDisciplines
     * const TeachersDisciplines = await prisma.teachersDisciplines.delete({
     *   where: {
     *     // ... filter to delete one TeachersDisciplines
     *   }
     * })
     * 
     */
    delete<T extends TeachersDisciplinesDeleteArgs>(args: SelectSubset<T, TeachersDisciplinesDeleteArgs<ExtArgs>>): Prisma__TeachersDisciplinesClient<$Result.GetResult<Prisma.$TeachersDisciplinesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TeachersDisciplines.
     * @param {TeachersDisciplinesUpdateArgs} args - Arguments to update one TeachersDisciplines.
     * @example
     * // Update one TeachersDisciplines
     * const teachersDisciplines = await prisma.teachersDisciplines.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TeachersDisciplinesUpdateArgs>(args: SelectSubset<T, TeachersDisciplinesUpdateArgs<ExtArgs>>): Prisma__TeachersDisciplinesClient<$Result.GetResult<Prisma.$TeachersDisciplinesPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TeachersDisciplines.
     * @param {TeachersDisciplinesDeleteManyArgs} args - Arguments to filter TeachersDisciplines to delete.
     * @example
     * // Delete a few TeachersDisciplines
     * const { count } = await prisma.teachersDisciplines.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TeachersDisciplinesDeleteManyArgs>(args?: SelectSubset<T, TeachersDisciplinesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TeachersDisciplines.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeachersDisciplinesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TeachersDisciplines
     * const teachersDisciplines = await prisma.teachersDisciplines.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TeachersDisciplinesUpdateManyArgs>(args: SelectSubset<T, TeachersDisciplinesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TeachersDisciplines and returns the data updated in the database.
     * @param {TeachersDisciplinesUpdateManyAndReturnArgs} args - Arguments to update many TeachersDisciplines.
     * @example
     * // Update many TeachersDisciplines
     * const teachersDisciplines = await prisma.teachersDisciplines.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more TeachersDisciplines and only return the `teacherId`
     * const teachersDisciplinesWithTeacherIdOnly = await prisma.teachersDisciplines.updateManyAndReturn({
     *   select: { teacherId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TeachersDisciplinesUpdateManyAndReturnArgs>(args: SelectSubset<T, TeachersDisciplinesUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeachersDisciplinesPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one TeachersDisciplines.
     * @param {TeachersDisciplinesUpsertArgs} args - Arguments to update or create a TeachersDisciplines.
     * @example
     * // Update or create a TeachersDisciplines
     * const teachersDisciplines = await prisma.teachersDisciplines.upsert({
     *   create: {
     *     // ... data to create a TeachersDisciplines
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TeachersDisciplines we want to update
     *   }
     * })
     */
    upsert<T extends TeachersDisciplinesUpsertArgs>(args: SelectSubset<T, TeachersDisciplinesUpsertArgs<ExtArgs>>): Prisma__TeachersDisciplinesClient<$Result.GetResult<Prisma.$TeachersDisciplinesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of TeachersDisciplines.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeachersDisciplinesCountArgs} args - Arguments to filter TeachersDisciplines to count.
     * @example
     * // Count the number of TeachersDisciplines
     * const count = await prisma.teachersDisciplines.count({
     *   where: {
     *     // ... the filter for the TeachersDisciplines we want to count
     *   }
     * })
    **/
    count<T extends TeachersDisciplinesCountArgs>(
      args?: Subset<T, TeachersDisciplinesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TeachersDisciplinesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TeachersDisciplines.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeachersDisciplinesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TeachersDisciplinesAggregateArgs>(args: Subset<T, TeachersDisciplinesAggregateArgs>): Prisma.PrismaPromise<GetTeachersDisciplinesAggregateType<T>>

    /**
     * Group by TeachersDisciplines.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeachersDisciplinesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TeachersDisciplinesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TeachersDisciplinesGroupByArgs['orderBy'] }
        : { orderBy?: TeachersDisciplinesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TeachersDisciplinesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTeachersDisciplinesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TeachersDisciplines model
   */
  readonly fields: TeachersDisciplinesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TeachersDisciplines.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TeachersDisciplinesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    teacher<T extends TeacherDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TeacherDefaultArgs<ExtArgs>>): Prisma__TeacherClient<$Result.GetResult<Prisma.$TeacherPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    discipline<T extends DisciplineDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DisciplineDefaultArgs<ExtArgs>>): Prisma__DisciplineClient<$Result.GetResult<Prisma.$DisciplinePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TeachersDisciplines model
   */
  interface TeachersDisciplinesFieldRefs {
    readonly teacherId: FieldRef<"TeachersDisciplines", 'Int'>
    readonly disciplineId: FieldRef<"TeachersDisciplines", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * TeachersDisciplines findUnique
   */
  export type TeachersDisciplinesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeachersDisciplines
     */
    select?: TeachersDisciplinesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeachersDisciplines
     */
    omit?: TeachersDisciplinesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeachersDisciplinesInclude<ExtArgs> | null
    /**
     * Filter, which TeachersDisciplines to fetch.
     */
    where: TeachersDisciplinesWhereUniqueInput
  }

  /**
   * TeachersDisciplines findUniqueOrThrow
   */
  export type TeachersDisciplinesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeachersDisciplines
     */
    select?: TeachersDisciplinesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeachersDisciplines
     */
    omit?: TeachersDisciplinesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeachersDisciplinesInclude<ExtArgs> | null
    /**
     * Filter, which TeachersDisciplines to fetch.
     */
    where: TeachersDisciplinesWhereUniqueInput
  }

  /**
   * TeachersDisciplines findFirst
   */
  export type TeachersDisciplinesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeachersDisciplines
     */
    select?: TeachersDisciplinesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeachersDisciplines
     */
    omit?: TeachersDisciplinesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeachersDisciplinesInclude<ExtArgs> | null
    /**
     * Filter, which TeachersDisciplines to fetch.
     */
    where?: TeachersDisciplinesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeachersDisciplines to fetch.
     */
    orderBy?: TeachersDisciplinesOrderByWithRelationInput | TeachersDisciplinesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TeachersDisciplines.
     */
    cursor?: TeachersDisciplinesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeachersDisciplines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeachersDisciplines.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TeachersDisciplines.
     */
    distinct?: TeachersDisciplinesScalarFieldEnum | TeachersDisciplinesScalarFieldEnum[]
  }

  /**
   * TeachersDisciplines findFirstOrThrow
   */
  export type TeachersDisciplinesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeachersDisciplines
     */
    select?: TeachersDisciplinesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeachersDisciplines
     */
    omit?: TeachersDisciplinesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeachersDisciplinesInclude<ExtArgs> | null
    /**
     * Filter, which TeachersDisciplines to fetch.
     */
    where?: TeachersDisciplinesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeachersDisciplines to fetch.
     */
    orderBy?: TeachersDisciplinesOrderByWithRelationInput | TeachersDisciplinesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TeachersDisciplines.
     */
    cursor?: TeachersDisciplinesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeachersDisciplines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeachersDisciplines.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TeachersDisciplines.
     */
    distinct?: TeachersDisciplinesScalarFieldEnum | TeachersDisciplinesScalarFieldEnum[]
  }

  /**
   * TeachersDisciplines findMany
   */
  export type TeachersDisciplinesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeachersDisciplines
     */
    select?: TeachersDisciplinesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeachersDisciplines
     */
    omit?: TeachersDisciplinesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeachersDisciplinesInclude<ExtArgs> | null
    /**
     * Filter, which TeachersDisciplines to fetch.
     */
    where?: TeachersDisciplinesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeachersDisciplines to fetch.
     */
    orderBy?: TeachersDisciplinesOrderByWithRelationInput | TeachersDisciplinesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TeachersDisciplines.
     */
    cursor?: TeachersDisciplinesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeachersDisciplines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeachersDisciplines.
     */
    skip?: number
    distinct?: TeachersDisciplinesScalarFieldEnum | TeachersDisciplinesScalarFieldEnum[]
  }

  /**
   * TeachersDisciplines create
   */
  export type TeachersDisciplinesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeachersDisciplines
     */
    select?: TeachersDisciplinesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeachersDisciplines
     */
    omit?: TeachersDisciplinesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeachersDisciplinesInclude<ExtArgs> | null
    /**
     * The data needed to create a TeachersDisciplines.
     */
    data: XOR<TeachersDisciplinesCreateInput, TeachersDisciplinesUncheckedCreateInput>
  }

  /**
   * TeachersDisciplines createMany
   */
  export type TeachersDisciplinesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TeachersDisciplines.
     */
    data: TeachersDisciplinesCreateManyInput | TeachersDisciplinesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TeachersDisciplines createManyAndReturn
   */
  export type TeachersDisciplinesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeachersDisciplines
     */
    select?: TeachersDisciplinesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TeachersDisciplines
     */
    omit?: TeachersDisciplinesOmit<ExtArgs> | null
    /**
     * The data used to create many TeachersDisciplines.
     */
    data: TeachersDisciplinesCreateManyInput | TeachersDisciplinesCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeachersDisciplinesIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * TeachersDisciplines update
   */
  export type TeachersDisciplinesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeachersDisciplines
     */
    select?: TeachersDisciplinesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeachersDisciplines
     */
    omit?: TeachersDisciplinesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeachersDisciplinesInclude<ExtArgs> | null
    /**
     * The data needed to update a TeachersDisciplines.
     */
    data: XOR<TeachersDisciplinesUpdateInput, TeachersDisciplinesUncheckedUpdateInput>
    /**
     * Choose, which TeachersDisciplines to update.
     */
    where: TeachersDisciplinesWhereUniqueInput
  }

  /**
   * TeachersDisciplines updateMany
   */
  export type TeachersDisciplinesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TeachersDisciplines.
     */
    data: XOR<TeachersDisciplinesUpdateManyMutationInput, TeachersDisciplinesUncheckedUpdateManyInput>
    /**
     * Filter which TeachersDisciplines to update
     */
    where?: TeachersDisciplinesWhereInput
    /**
     * Limit how many TeachersDisciplines to update.
     */
    limit?: number
  }

  /**
   * TeachersDisciplines updateManyAndReturn
   */
  export type TeachersDisciplinesUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeachersDisciplines
     */
    select?: TeachersDisciplinesSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TeachersDisciplines
     */
    omit?: TeachersDisciplinesOmit<ExtArgs> | null
    /**
     * The data used to update TeachersDisciplines.
     */
    data: XOR<TeachersDisciplinesUpdateManyMutationInput, TeachersDisciplinesUncheckedUpdateManyInput>
    /**
     * Filter which TeachersDisciplines to update
     */
    where?: TeachersDisciplinesWhereInput
    /**
     * Limit how many TeachersDisciplines to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeachersDisciplinesIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * TeachersDisciplines upsert
   */
  export type TeachersDisciplinesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeachersDisciplines
     */
    select?: TeachersDisciplinesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeachersDisciplines
     */
    omit?: TeachersDisciplinesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeachersDisciplinesInclude<ExtArgs> | null
    /**
     * The filter to search for the TeachersDisciplines to update in case it exists.
     */
    where: TeachersDisciplinesWhereUniqueInput
    /**
     * In case the TeachersDisciplines found by the `where` argument doesn't exist, create a new TeachersDisciplines with this data.
     */
    create: XOR<TeachersDisciplinesCreateInput, TeachersDisciplinesUncheckedCreateInput>
    /**
     * In case the TeachersDisciplines was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TeachersDisciplinesUpdateInput, TeachersDisciplinesUncheckedUpdateInput>
  }

  /**
   * TeachersDisciplines delete
   */
  export type TeachersDisciplinesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeachersDisciplines
     */
    select?: TeachersDisciplinesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeachersDisciplines
     */
    omit?: TeachersDisciplinesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeachersDisciplinesInclude<ExtArgs> | null
    /**
     * Filter which TeachersDisciplines to delete.
     */
    where: TeachersDisciplinesWhereUniqueInput
  }

  /**
   * TeachersDisciplines deleteMany
   */
  export type TeachersDisciplinesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TeachersDisciplines to delete
     */
    where?: TeachersDisciplinesWhereInput
    /**
     * Limit how many TeachersDisciplines to delete.
     */
    limit?: number
  }

  /**
   * TeachersDisciplines without action
   */
  export type TeachersDisciplinesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeachersDisciplines
     */
    select?: TeachersDisciplinesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeachersDisciplines
     */
    omit?: TeachersDisciplinesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeachersDisciplinesInclude<ExtArgs> | null
  }


  /**
   * Model ClassesDisciplines
   */

  export type AggregateClassesDisciplines = {
    _count: ClassesDisciplinesCountAggregateOutputType | null
    _avg: ClassesDisciplinesAvgAggregateOutputType | null
    _sum: ClassesDisciplinesSumAggregateOutputType | null
    _min: ClassesDisciplinesMinAggregateOutputType | null
    _max: ClassesDisciplinesMaxAggregateOutputType | null
  }

  export type ClassesDisciplinesAvgAggregateOutputType = {
    classId: number | null
    disciplineId: number | null
  }

  export type ClassesDisciplinesSumAggregateOutputType = {
    classId: number | null
    disciplineId: number | null
  }

  export type ClassesDisciplinesMinAggregateOutputType = {
    classId: number | null
    disciplineId: number | null
  }

  export type ClassesDisciplinesMaxAggregateOutputType = {
    classId: number | null
    disciplineId: number | null
  }

  export type ClassesDisciplinesCountAggregateOutputType = {
    classId: number
    disciplineId: number
    _all: number
  }


  export type ClassesDisciplinesAvgAggregateInputType = {
    classId?: true
    disciplineId?: true
  }

  export type ClassesDisciplinesSumAggregateInputType = {
    classId?: true
    disciplineId?: true
  }

  export type ClassesDisciplinesMinAggregateInputType = {
    classId?: true
    disciplineId?: true
  }

  export type ClassesDisciplinesMaxAggregateInputType = {
    classId?: true
    disciplineId?: true
  }

  export type ClassesDisciplinesCountAggregateInputType = {
    classId?: true
    disciplineId?: true
    _all?: true
  }

  export type ClassesDisciplinesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ClassesDisciplines to aggregate.
     */
    where?: ClassesDisciplinesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClassesDisciplines to fetch.
     */
    orderBy?: ClassesDisciplinesOrderByWithRelationInput | ClassesDisciplinesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ClassesDisciplinesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClassesDisciplines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClassesDisciplines.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ClassesDisciplines
    **/
    _count?: true | ClassesDisciplinesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ClassesDisciplinesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ClassesDisciplinesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ClassesDisciplinesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ClassesDisciplinesMaxAggregateInputType
  }

  export type GetClassesDisciplinesAggregateType<T extends ClassesDisciplinesAggregateArgs> = {
        [P in keyof T & keyof AggregateClassesDisciplines]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateClassesDisciplines[P]>
      : GetScalarType<T[P], AggregateClassesDisciplines[P]>
  }




  export type ClassesDisciplinesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ClassesDisciplinesWhereInput
    orderBy?: ClassesDisciplinesOrderByWithAggregationInput | ClassesDisciplinesOrderByWithAggregationInput[]
    by: ClassesDisciplinesScalarFieldEnum[] | ClassesDisciplinesScalarFieldEnum
    having?: ClassesDisciplinesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ClassesDisciplinesCountAggregateInputType | true
    _avg?: ClassesDisciplinesAvgAggregateInputType
    _sum?: ClassesDisciplinesSumAggregateInputType
    _min?: ClassesDisciplinesMinAggregateInputType
    _max?: ClassesDisciplinesMaxAggregateInputType
  }

  export type ClassesDisciplinesGroupByOutputType = {
    classId: number
    disciplineId: number
    _count: ClassesDisciplinesCountAggregateOutputType | null
    _avg: ClassesDisciplinesAvgAggregateOutputType | null
    _sum: ClassesDisciplinesSumAggregateOutputType | null
    _min: ClassesDisciplinesMinAggregateOutputType | null
    _max: ClassesDisciplinesMaxAggregateOutputType | null
  }

  type GetClassesDisciplinesGroupByPayload<T extends ClassesDisciplinesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ClassesDisciplinesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ClassesDisciplinesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ClassesDisciplinesGroupByOutputType[P]>
            : GetScalarType<T[P], ClassesDisciplinesGroupByOutputType[P]>
        }
      >
    >


  export type ClassesDisciplinesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    classId?: boolean
    disciplineId?: boolean
    class?: boolean | ClassDefaultArgs<ExtArgs>
    discipline?: boolean | DisciplineDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["classesDisciplines"]>

  export type ClassesDisciplinesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    classId?: boolean
    disciplineId?: boolean
    class?: boolean | ClassDefaultArgs<ExtArgs>
    discipline?: boolean | DisciplineDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["classesDisciplines"]>

  export type ClassesDisciplinesSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    classId?: boolean
    disciplineId?: boolean
    class?: boolean | ClassDefaultArgs<ExtArgs>
    discipline?: boolean | DisciplineDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["classesDisciplines"]>

  export type ClassesDisciplinesSelectScalar = {
    classId?: boolean
    disciplineId?: boolean
  }

  export type ClassesDisciplinesOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"classId" | "disciplineId", ExtArgs["result"]["classesDisciplines"]>
  export type ClassesDisciplinesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    class?: boolean | ClassDefaultArgs<ExtArgs>
    discipline?: boolean | DisciplineDefaultArgs<ExtArgs>
  }
  export type ClassesDisciplinesIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    class?: boolean | ClassDefaultArgs<ExtArgs>
    discipline?: boolean | DisciplineDefaultArgs<ExtArgs>
  }
  export type ClassesDisciplinesIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    class?: boolean | ClassDefaultArgs<ExtArgs>
    discipline?: boolean | DisciplineDefaultArgs<ExtArgs>
  }

  export type $ClassesDisciplinesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ClassesDisciplines"
    objects: {
      class: Prisma.$ClassPayload<ExtArgs>
      discipline: Prisma.$DisciplinePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      classId: number
      disciplineId: number
    }, ExtArgs["result"]["classesDisciplines"]>
    composites: {}
  }

  type ClassesDisciplinesGetPayload<S extends boolean | null | undefined | ClassesDisciplinesDefaultArgs> = $Result.GetResult<Prisma.$ClassesDisciplinesPayload, S>

  type ClassesDisciplinesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ClassesDisciplinesFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ClassesDisciplinesCountAggregateInputType | true
    }

  export interface ClassesDisciplinesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ClassesDisciplines'], meta: { name: 'ClassesDisciplines' } }
    /**
     * Find zero or one ClassesDisciplines that matches the filter.
     * @param {ClassesDisciplinesFindUniqueArgs} args - Arguments to find a ClassesDisciplines
     * @example
     * // Get one ClassesDisciplines
     * const classesDisciplines = await prisma.classesDisciplines.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ClassesDisciplinesFindUniqueArgs>(args: SelectSubset<T, ClassesDisciplinesFindUniqueArgs<ExtArgs>>): Prisma__ClassesDisciplinesClient<$Result.GetResult<Prisma.$ClassesDisciplinesPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ClassesDisciplines that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ClassesDisciplinesFindUniqueOrThrowArgs} args - Arguments to find a ClassesDisciplines
     * @example
     * // Get one ClassesDisciplines
     * const classesDisciplines = await prisma.classesDisciplines.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ClassesDisciplinesFindUniqueOrThrowArgs>(args: SelectSubset<T, ClassesDisciplinesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ClassesDisciplinesClient<$Result.GetResult<Prisma.$ClassesDisciplinesPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ClassesDisciplines that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassesDisciplinesFindFirstArgs} args - Arguments to find a ClassesDisciplines
     * @example
     * // Get one ClassesDisciplines
     * const classesDisciplines = await prisma.classesDisciplines.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ClassesDisciplinesFindFirstArgs>(args?: SelectSubset<T, ClassesDisciplinesFindFirstArgs<ExtArgs>>): Prisma__ClassesDisciplinesClient<$Result.GetResult<Prisma.$ClassesDisciplinesPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ClassesDisciplines that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassesDisciplinesFindFirstOrThrowArgs} args - Arguments to find a ClassesDisciplines
     * @example
     * // Get one ClassesDisciplines
     * const classesDisciplines = await prisma.classesDisciplines.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ClassesDisciplinesFindFirstOrThrowArgs>(args?: SelectSubset<T, ClassesDisciplinesFindFirstOrThrowArgs<ExtArgs>>): Prisma__ClassesDisciplinesClient<$Result.GetResult<Prisma.$ClassesDisciplinesPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ClassesDisciplines that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassesDisciplinesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ClassesDisciplines
     * const classesDisciplines = await prisma.classesDisciplines.findMany()
     * 
     * // Get first 10 ClassesDisciplines
     * const classesDisciplines = await prisma.classesDisciplines.findMany({ take: 10 })
     * 
     * // Only select the `classId`
     * const classesDisciplinesWithClassIdOnly = await prisma.classesDisciplines.findMany({ select: { classId: true } })
     * 
     */
    findMany<T extends ClassesDisciplinesFindManyArgs>(args?: SelectSubset<T, ClassesDisciplinesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClassesDisciplinesPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ClassesDisciplines.
     * @param {ClassesDisciplinesCreateArgs} args - Arguments to create a ClassesDisciplines.
     * @example
     * // Create one ClassesDisciplines
     * const ClassesDisciplines = await prisma.classesDisciplines.create({
     *   data: {
     *     // ... data to create a ClassesDisciplines
     *   }
     * })
     * 
     */
    create<T extends ClassesDisciplinesCreateArgs>(args: SelectSubset<T, ClassesDisciplinesCreateArgs<ExtArgs>>): Prisma__ClassesDisciplinesClient<$Result.GetResult<Prisma.$ClassesDisciplinesPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ClassesDisciplines.
     * @param {ClassesDisciplinesCreateManyArgs} args - Arguments to create many ClassesDisciplines.
     * @example
     * // Create many ClassesDisciplines
     * const classesDisciplines = await prisma.classesDisciplines.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ClassesDisciplinesCreateManyArgs>(args?: SelectSubset<T, ClassesDisciplinesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ClassesDisciplines and returns the data saved in the database.
     * @param {ClassesDisciplinesCreateManyAndReturnArgs} args - Arguments to create many ClassesDisciplines.
     * @example
     * // Create many ClassesDisciplines
     * const classesDisciplines = await prisma.classesDisciplines.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ClassesDisciplines and only return the `classId`
     * const classesDisciplinesWithClassIdOnly = await prisma.classesDisciplines.createManyAndReturn({
     *   select: { classId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ClassesDisciplinesCreateManyAndReturnArgs>(args?: SelectSubset<T, ClassesDisciplinesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClassesDisciplinesPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ClassesDisciplines.
     * @param {ClassesDisciplinesDeleteArgs} args - Arguments to delete one ClassesDisciplines.
     * @example
     * // Delete one ClassesDisciplines
     * const ClassesDisciplines = await prisma.classesDisciplines.delete({
     *   where: {
     *     // ... filter to delete one ClassesDisciplines
     *   }
     * })
     * 
     */
    delete<T extends ClassesDisciplinesDeleteArgs>(args: SelectSubset<T, ClassesDisciplinesDeleteArgs<ExtArgs>>): Prisma__ClassesDisciplinesClient<$Result.GetResult<Prisma.$ClassesDisciplinesPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ClassesDisciplines.
     * @param {ClassesDisciplinesUpdateArgs} args - Arguments to update one ClassesDisciplines.
     * @example
     * // Update one ClassesDisciplines
     * const classesDisciplines = await prisma.classesDisciplines.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ClassesDisciplinesUpdateArgs>(args: SelectSubset<T, ClassesDisciplinesUpdateArgs<ExtArgs>>): Prisma__ClassesDisciplinesClient<$Result.GetResult<Prisma.$ClassesDisciplinesPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ClassesDisciplines.
     * @param {ClassesDisciplinesDeleteManyArgs} args - Arguments to filter ClassesDisciplines to delete.
     * @example
     * // Delete a few ClassesDisciplines
     * const { count } = await prisma.classesDisciplines.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ClassesDisciplinesDeleteManyArgs>(args?: SelectSubset<T, ClassesDisciplinesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ClassesDisciplines.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassesDisciplinesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ClassesDisciplines
     * const classesDisciplines = await prisma.classesDisciplines.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ClassesDisciplinesUpdateManyArgs>(args: SelectSubset<T, ClassesDisciplinesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ClassesDisciplines and returns the data updated in the database.
     * @param {ClassesDisciplinesUpdateManyAndReturnArgs} args - Arguments to update many ClassesDisciplines.
     * @example
     * // Update many ClassesDisciplines
     * const classesDisciplines = await prisma.classesDisciplines.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ClassesDisciplines and only return the `classId`
     * const classesDisciplinesWithClassIdOnly = await prisma.classesDisciplines.updateManyAndReturn({
     *   select: { classId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ClassesDisciplinesUpdateManyAndReturnArgs>(args: SelectSubset<T, ClassesDisciplinesUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ClassesDisciplinesPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ClassesDisciplines.
     * @param {ClassesDisciplinesUpsertArgs} args - Arguments to update or create a ClassesDisciplines.
     * @example
     * // Update or create a ClassesDisciplines
     * const classesDisciplines = await prisma.classesDisciplines.upsert({
     *   create: {
     *     // ... data to create a ClassesDisciplines
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ClassesDisciplines we want to update
     *   }
     * })
     */
    upsert<T extends ClassesDisciplinesUpsertArgs>(args: SelectSubset<T, ClassesDisciplinesUpsertArgs<ExtArgs>>): Prisma__ClassesDisciplinesClient<$Result.GetResult<Prisma.$ClassesDisciplinesPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ClassesDisciplines.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassesDisciplinesCountArgs} args - Arguments to filter ClassesDisciplines to count.
     * @example
     * // Count the number of ClassesDisciplines
     * const count = await prisma.classesDisciplines.count({
     *   where: {
     *     // ... the filter for the ClassesDisciplines we want to count
     *   }
     * })
    **/
    count<T extends ClassesDisciplinesCountArgs>(
      args?: Subset<T, ClassesDisciplinesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ClassesDisciplinesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ClassesDisciplines.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassesDisciplinesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ClassesDisciplinesAggregateArgs>(args: Subset<T, ClassesDisciplinesAggregateArgs>): Prisma.PrismaPromise<GetClassesDisciplinesAggregateType<T>>

    /**
     * Group by ClassesDisciplines.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ClassesDisciplinesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ClassesDisciplinesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ClassesDisciplinesGroupByArgs['orderBy'] }
        : { orderBy?: ClassesDisciplinesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ClassesDisciplinesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetClassesDisciplinesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ClassesDisciplines model
   */
  readonly fields: ClassesDisciplinesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ClassesDisciplines.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ClassesDisciplinesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    class<T extends ClassDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ClassDefaultArgs<ExtArgs>>): Prisma__ClassClient<$Result.GetResult<Prisma.$ClassPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    discipline<T extends DisciplineDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DisciplineDefaultArgs<ExtArgs>>): Prisma__DisciplineClient<$Result.GetResult<Prisma.$DisciplinePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ClassesDisciplines model
   */
  interface ClassesDisciplinesFieldRefs {
    readonly classId: FieldRef<"ClassesDisciplines", 'Int'>
    readonly disciplineId: FieldRef<"ClassesDisciplines", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * ClassesDisciplines findUnique
   */
  export type ClassesDisciplinesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassesDisciplines
     */
    select?: ClassesDisciplinesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClassesDisciplines
     */
    omit?: ClassesDisciplinesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassesDisciplinesInclude<ExtArgs> | null
    /**
     * Filter, which ClassesDisciplines to fetch.
     */
    where: ClassesDisciplinesWhereUniqueInput
  }

  /**
   * ClassesDisciplines findUniqueOrThrow
   */
  export type ClassesDisciplinesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassesDisciplines
     */
    select?: ClassesDisciplinesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClassesDisciplines
     */
    omit?: ClassesDisciplinesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassesDisciplinesInclude<ExtArgs> | null
    /**
     * Filter, which ClassesDisciplines to fetch.
     */
    where: ClassesDisciplinesWhereUniqueInput
  }

  /**
   * ClassesDisciplines findFirst
   */
  export type ClassesDisciplinesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassesDisciplines
     */
    select?: ClassesDisciplinesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClassesDisciplines
     */
    omit?: ClassesDisciplinesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassesDisciplinesInclude<ExtArgs> | null
    /**
     * Filter, which ClassesDisciplines to fetch.
     */
    where?: ClassesDisciplinesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClassesDisciplines to fetch.
     */
    orderBy?: ClassesDisciplinesOrderByWithRelationInput | ClassesDisciplinesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ClassesDisciplines.
     */
    cursor?: ClassesDisciplinesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClassesDisciplines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClassesDisciplines.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ClassesDisciplines.
     */
    distinct?: ClassesDisciplinesScalarFieldEnum | ClassesDisciplinesScalarFieldEnum[]
  }

  /**
   * ClassesDisciplines findFirstOrThrow
   */
  export type ClassesDisciplinesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassesDisciplines
     */
    select?: ClassesDisciplinesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClassesDisciplines
     */
    omit?: ClassesDisciplinesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassesDisciplinesInclude<ExtArgs> | null
    /**
     * Filter, which ClassesDisciplines to fetch.
     */
    where?: ClassesDisciplinesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClassesDisciplines to fetch.
     */
    orderBy?: ClassesDisciplinesOrderByWithRelationInput | ClassesDisciplinesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ClassesDisciplines.
     */
    cursor?: ClassesDisciplinesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClassesDisciplines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClassesDisciplines.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ClassesDisciplines.
     */
    distinct?: ClassesDisciplinesScalarFieldEnum | ClassesDisciplinesScalarFieldEnum[]
  }

  /**
   * ClassesDisciplines findMany
   */
  export type ClassesDisciplinesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassesDisciplines
     */
    select?: ClassesDisciplinesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClassesDisciplines
     */
    omit?: ClassesDisciplinesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassesDisciplinesInclude<ExtArgs> | null
    /**
     * Filter, which ClassesDisciplines to fetch.
     */
    where?: ClassesDisciplinesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ClassesDisciplines to fetch.
     */
    orderBy?: ClassesDisciplinesOrderByWithRelationInput | ClassesDisciplinesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ClassesDisciplines.
     */
    cursor?: ClassesDisciplinesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ClassesDisciplines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ClassesDisciplines.
     */
    skip?: number
    distinct?: ClassesDisciplinesScalarFieldEnum | ClassesDisciplinesScalarFieldEnum[]
  }

  /**
   * ClassesDisciplines create
   */
  export type ClassesDisciplinesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassesDisciplines
     */
    select?: ClassesDisciplinesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClassesDisciplines
     */
    omit?: ClassesDisciplinesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassesDisciplinesInclude<ExtArgs> | null
    /**
     * The data needed to create a ClassesDisciplines.
     */
    data: XOR<ClassesDisciplinesCreateInput, ClassesDisciplinesUncheckedCreateInput>
  }

  /**
   * ClassesDisciplines createMany
   */
  export type ClassesDisciplinesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ClassesDisciplines.
     */
    data: ClassesDisciplinesCreateManyInput | ClassesDisciplinesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ClassesDisciplines createManyAndReturn
   */
  export type ClassesDisciplinesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassesDisciplines
     */
    select?: ClassesDisciplinesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ClassesDisciplines
     */
    omit?: ClassesDisciplinesOmit<ExtArgs> | null
    /**
     * The data used to create many ClassesDisciplines.
     */
    data: ClassesDisciplinesCreateManyInput | ClassesDisciplinesCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassesDisciplinesIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ClassesDisciplines update
   */
  export type ClassesDisciplinesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassesDisciplines
     */
    select?: ClassesDisciplinesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClassesDisciplines
     */
    omit?: ClassesDisciplinesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassesDisciplinesInclude<ExtArgs> | null
    /**
     * The data needed to update a ClassesDisciplines.
     */
    data: XOR<ClassesDisciplinesUpdateInput, ClassesDisciplinesUncheckedUpdateInput>
    /**
     * Choose, which ClassesDisciplines to update.
     */
    where: ClassesDisciplinesWhereUniqueInput
  }

  /**
   * ClassesDisciplines updateMany
   */
  export type ClassesDisciplinesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ClassesDisciplines.
     */
    data: XOR<ClassesDisciplinesUpdateManyMutationInput, ClassesDisciplinesUncheckedUpdateManyInput>
    /**
     * Filter which ClassesDisciplines to update
     */
    where?: ClassesDisciplinesWhereInput
    /**
     * Limit how many ClassesDisciplines to update.
     */
    limit?: number
  }

  /**
   * ClassesDisciplines updateManyAndReturn
   */
  export type ClassesDisciplinesUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassesDisciplines
     */
    select?: ClassesDisciplinesSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ClassesDisciplines
     */
    omit?: ClassesDisciplinesOmit<ExtArgs> | null
    /**
     * The data used to update ClassesDisciplines.
     */
    data: XOR<ClassesDisciplinesUpdateManyMutationInput, ClassesDisciplinesUncheckedUpdateManyInput>
    /**
     * Filter which ClassesDisciplines to update
     */
    where?: ClassesDisciplinesWhereInput
    /**
     * Limit how many ClassesDisciplines to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassesDisciplinesIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ClassesDisciplines upsert
   */
  export type ClassesDisciplinesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassesDisciplines
     */
    select?: ClassesDisciplinesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClassesDisciplines
     */
    omit?: ClassesDisciplinesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassesDisciplinesInclude<ExtArgs> | null
    /**
     * The filter to search for the ClassesDisciplines to update in case it exists.
     */
    where: ClassesDisciplinesWhereUniqueInput
    /**
     * In case the ClassesDisciplines found by the `where` argument doesn't exist, create a new ClassesDisciplines with this data.
     */
    create: XOR<ClassesDisciplinesCreateInput, ClassesDisciplinesUncheckedCreateInput>
    /**
     * In case the ClassesDisciplines was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ClassesDisciplinesUpdateInput, ClassesDisciplinesUncheckedUpdateInput>
  }

  /**
   * ClassesDisciplines delete
   */
  export type ClassesDisciplinesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassesDisciplines
     */
    select?: ClassesDisciplinesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClassesDisciplines
     */
    omit?: ClassesDisciplinesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassesDisciplinesInclude<ExtArgs> | null
    /**
     * Filter which ClassesDisciplines to delete.
     */
    where: ClassesDisciplinesWhereUniqueInput
  }

  /**
   * ClassesDisciplines deleteMany
   */
  export type ClassesDisciplinesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ClassesDisciplines to delete
     */
    where?: ClassesDisciplinesWhereInput
    /**
     * Limit how many ClassesDisciplines to delete.
     */
    limit?: number
  }

  /**
   * ClassesDisciplines without action
   */
  export type ClassesDisciplinesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ClassesDisciplines
     */
    select?: ClassesDisciplinesSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ClassesDisciplines
     */
    omit?: ClassesDisciplinesOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ClassesDisciplinesInclude<ExtArgs> | null
  }


  /**
   * Model DisciplinePupilsMark
   */

  export type AggregateDisciplinePupilsMark = {
    _count: DisciplinePupilsMarkCountAggregateOutputType | null
    _avg: DisciplinePupilsMarkAvgAggregateOutputType | null
    _sum: DisciplinePupilsMarkSumAggregateOutputType | null
    _min: DisciplinePupilsMarkMinAggregateOutputType | null
    _max: DisciplinePupilsMarkMaxAggregateOutputType | null
  }

  export type DisciplinePupilsMarkAvgAggregateOutputType = {
    disciplineId: number | null
    pupilId: number | null
    mark: number | null
  }

  export type DisciplinePupilsMarkSumAggregateOutputType = {
    disciplineId: number | null
    pupilId: number | null
    mark: number | null
  }

  export type DisciplinePupilsMarkMinAggregateOutputType = {
    disciplineId: number | null
    pupilId: number | null
    mark: number | null
  }

  export type DisciplinePupilsMarkMaxAggregateOutputType = {
    disciplineId: number | null
    pupilId: number | null
    mark: number | null
  }

  export type DisciplinePupilsMarkCountAggregateOutputType = {
    disciplineId: number
    pupilId: number
    mark: number
    _all: number
  }


  export type DisciplinePupilsMarkAvgAggregateInputType = {
    disciplineId?: true
    pupilId?: true
    mark?: true
  }

  export type DisciplinePupilsMarkSumAggregateInputType = {
    disciplineId?: true
    pupilId?: true
    mark?: true
  }

  export type DisciplinePupilsMarkMinAggregateInputType = {
    disciplineId?: true
    pupilId?: true
    mark?: true
  }

  export type DisciplinePupilsMarkMaxAggregateInputType = {
    disciplineId?: true
    pupilId?: true
    mark?: true
  }

  export type DisciplinePupilsMarkCountAggregateInputType = {
    disciplineId?: true
    pupilId?: true
    mark?: true
    _all?: true
  }

  export type DisciplinePupilsMarkAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DisciplinePupilsMark to aggregate.
     */
    where?: DisciplinePupilsMarkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DisciplinePupilsMarks to fetch.
     */
    orderBy?: DisciplinePupilsMarkOrderByWithRelationInput | DisciplinePupilsMarkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DisciplinePupilsMarkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DisciplinePupilsMarks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DisciplinePupilsMarks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DisciplinePupilsMarks
    **/
    _count?: true | DisciplinePupilsMarkCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DisciplinePupilsMarkAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DisciplinePupilsMarkSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DisciplinePupilsMarkMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DisciplinePupilsMarkMaxAggregateInputType
  }

  export type GetDisciplinePupilsMarkAggregateType<T extends DisciplinePupilsMarkAggregateArgs> = {
        [P in keyof T & keyof AggregateDisciplinePupilsMark]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDisciplinePupilsMark[P]>
      : GetScalarType<T[P], AggregateDisciplinePupilsMark[P]>
  }




  export type DisciplinePupilsMarkGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DisciplinePupilsMarkWhereInput
    orderBy?: DisciplinePupilsMarkOrderByWithAggregationInput | DisciplinePupilsMarkOrderByWithAggregationInput[]
    by: DisciplinePupilsMarkScalarFieldEnum[] | DisciplinePupilsMarkScalarFieldEnum
    having?: DisciplinePupilsMarkScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DisciplinePupilsMarkCountAggregateInputType | true
    _avg?: DisciplinePupilsMarkAvgAggregateInputType
    _sum?: DisciplinePupilsMarkSumAggregateInputType
    _min?: DisciplinePupilsMarkMinAggregateInputType
    _max?: DisciplinePupilsMarkMaxAggregateInputType
  }

  export type DisciplinePupilsMarkGroupByOutputType = {
    disciplineId: number
    pupilId: number
    mark: number
    _count: DisciplinePupilsMarkCountAggregateOutputType | null
    _avg: DisciplinePupilsMarkAvgAggregateOutputType | null
    _sum: DisciplinePupilsMarkSumAggregateOutputType | null
    _min: DisciplinePupilsMarkMinAggregateOutputType | null
    _max: DisciplinePupilsMarkMaxAggregateOutputType | null
  }

  type GetDisciplinePupilsMarkGroupByPayload<T extends DisciplinePupilsMarkGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DisciplinePupilsMarkGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DisciplinePupilsMarkGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DisciplinePupilsMarkGroupByOutputType[P]>
            : GetScalarType<T[P], DisciplinePupilsMarkGroupByOutputType[P]>
        }
      >
    >


  export type DisciplinePupilsMarkSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    disciplineId?: boolean
    pupilId?: boolean
    mark?: boolean
    discipline?: boolean | DisciplineDefaultArgs<ExtArgs>
    pupil?: boolean | PupilDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["disciplinePupilsMark"]>

  export type DisciplinePupilsMarkSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    disciplineId?: boolean
    pupilId?: boolean
    mark?: boolean
    discipline?: boolean | DisciplineDefaultArgs<ExtArgs>
    pupil?: boolean | PupilDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["disciplinePupilsMark"]>

  export type DisciplinePupilsMarkSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    disciplineId?: boolean
    pupilId?: boolean
    mark?: boolean
    discipline?: boolean | DisciplineDefaultArgs<ExtArgs>
    pupil?: boolean | PupilDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["disciplinePupilsMark"]>

  export type DisciplinePupilsMarkSelectScalar = {
    disciplineId?: boolean
    pupilId?: boolean
    mark?: boolean
  }

  export type DisciplinePupilsMarkOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"disciplineId" | "pupilId" | "mark", ExtArgs["result"]["disciplinePupilsMark"]>
  export type DisciplinePupilsMarkInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    discipline?: boolean | DisciplineDefaultArgs<ExtArgs>
    pupil?: boolean | PupilDefaultArgs<ExtArgs>
  }
  export type DisciplinePupilsMarkIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    discipline?: boolean | DisciplineDefaultArgs<ExtArgs>
    pupil?: boolean | PupilDefaultArgs<ExtArgs>
  }
  export type DisciplinePupilsMarkIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    discipline?: boolean | DisciplineDefaultArgs<ExtArgs>
    pupil?: boolean | PupilDefaultArgs<ExtArgs>
  }

  export type $DisciplinePupilsMarkPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DisciplinePupilsMark"
    objects: {
      discipline: Prisma.$DisciplinePayload<ExtArgs>
      pupil: Prisma.$PupilPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      disciplineId: number
      pupilId: number
      mark: number
    }, ExtArgs["result"]["disciplinePupilsMark"]>
    composites: {}
  }

  type DisciplinePupilsMarkGetPayload<S extends boolean | null | undefined | DisciplinePupilsMarkDefaultArgs> = $Result.GetResult<Prisma.$DisciplinePupilsMarkPayload, S>

  type DisciplinePupilsMarkCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DisciplinePupilsMarkFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DisciplinePupilsMarkCountAggregateInputType | true
    }

  export interface DisciplinePupilsMarkDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DisciplinePupilsMark'], meta: { name: 'DisciplinePupilsMark' } }
    /**
     * Find zero or one DisciplinePupilsMark that matches the filter.
     * @param {DisciplinePupilsMarkFindUniqueArgs} args - Arguments to find a DisciplinePupilsMark
     * @example
     * // Get one DisciplinePupilsMark
     * const disciplinePupilsMark = await prisma.disciplinePupilsMark.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DisciplinePupilsMarkFindUniqueArgs>(args: SelectSubset<T, DisciplinePupilsMarkFindUniqueArgs<ExtArgs>>): Prisma__DisciplinePupilsMarkClient<$Result.GetResult<Prisma.$DisciplinePupilsMarkPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one DisciplinePupilsMark that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DisciplinePupilsMarkFindUniqueOrThrowArgs} args - Arguments to find a DisciplinePupilsMark
     * @example
     * // Get one DisciplinePupilsMark
     * const disciplinePupilsMark = await prisma.disciplinePupilsMark.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DisciplinePupilsMarkFindUniqueOrThrowArgs>(args: SelectSubset<T, DisciplinePupilsMarkFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DisciplinePupilsMarkClient<$Result.GetResult<Prisma.$DisciplinePupilsMarkPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DisciplinePupilsMark that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DisciplinePupilsMarkFindFirstArgs} args - Arguments to find a DisciplinePupilsMark
     * @example
     * // Get one DisciplinePupilsMark
     * const disciplinePupilsMark = await prisma.disciplinePupilsMark.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DisciplinePupilsMarkFindFirstArgs>(args?: SelectSubset<T, DisciplinePupilsMarkFindFirstArgs<ExtArgs>>): Prisma__DisciplinePupilsMarkClient<$Result.GetResult<Prisma.$DisciplinePupilsMarkPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DisciplinePupilsMark that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DisciplinePupilsMarkFindFirstOrThrowArgs} args - Arguments to find a DisciplinePupilsMark
     * @example
     * // Get one DisciplinePupilsMark
     * const disciplinePupilsMark = await prisma.disciplinePupilsMark.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DisciplinePupilsMarkFindFirstOrThrowArgs>(args?: SelectSubset<T, DisciplinePupilsMarkFindFirstOrThrowArgs<ExtArgs>>): Prisma__DisciplinePupilsMarkClient<$Result.GetResult<Prisma.$DisciplinePupilsMarkPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more DisciplinePupilsMarks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DisciplinePupilsMarkFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DisciplinePupilsMarks
     * const disciplinePupilsMarks = await prisma.disciplinePupilsMark.findMany()
     * 
     * // Get first 10 DisciplinePupilsMarks
     * const disciplinePupilsMarks = await prisma.disciplinePupilsMark.findMany({ take: 10 })
     * 
     * // Only select the `disciplineId`
     * const disciplinePupilsMarkWithDisciplineIdOnly = await prisma.disciplinePupilsMark.findMany({ select: { disciplineId: true } })
     * 
     */
    findMany<T extends DisciplinePupilsMarkFindManyArgs>(args?: SelectSubset<T, DisciplinePupilsMarkFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DisciplinePupilsMarkPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a DisciplinePupilsMark.
     * @param {DisciplinePupilsMarkCreateArgs} args - Arguments to create a DisciplinePupilsMark.
     * @example
     * // Create one DisciplinePupilsMark
     * const DisciplinePupilsMark = await prisma.disciplinePupilsMark.create({
     *   data: {
     *     // ... data to create a DisciplinePupilsMark
     *   }
     * })
     * 
     */
    create<T extends DisciplinePupilsMarkCreateArgs>(args: SelectSubset<T, DisciplinePupilsMarkCreateArgs<ExtArgs>>): Prisma__DisciplinePupilsMarkClient<$Result.GetResult<Prisma.$DisciplinePupilsMarkPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many DisciplinePupilsMarks.
     * @param {DisciplinePupilsMarkCreateManyArgs} args - Arguments to create many DisciplinePupilsMarks.
     * @example
     * // Create many DisciplinePupilsMarks
     * const disciplinePupilsMark = await prisma.disciplinePupilsMark.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DisciplinePupilsMarkCreateManyArgs>(args?: SelectSubset<T, DisciplinePupilsMarkCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DisciplinePupilsMarks and returns the data saved in the database.
     * @param {DisciplinePupilsMarkCreateManyAndReturnArgs} args - Arguments to create many DisciplinePupilsMarks.
     * @example
     * // Create many DisciplinePupilsMarks
     * const disciplinePupilsMark = await prisma.disciplinePupilsMark.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DisciplinePupilsMarks and only return the `disciplineId`
     * const disciplinePupilsMarkWithDisciplineIdOnly = await prisma.disciplinePupilsMark.createManyAndReturn({
     *   select: { disciplineId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DisciplinePupilsMarkCreateManyAndReturnArgs>(args?: SelectSubset<T, DisciplinePupilsMarkCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DisciplinePupilsMarkPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a DisciplinePupilsMark.
     * @param {DisciplinePupilsMarkDeleteArgs} args - Arguments to delete one DisciplinePupilsMark.
     * @example
     * // Delete one DisciplinePupilsMark
     * const DisciplinePupilsMark = await prisma.disciplinePupilsMark.delete({
     *   where: {
     *     // ... filter to delete one DisciplinePupilsMark
     *   }
     * })
     * 
     */
    delete<T extends DisciplinePupilsMarkDeleteArgs>(args: SelectSubset<T, DisciplinePupilsMarkDeleteArgs<ExtArgs>>): Prisma__DisciplinePupilsMarkClient<$Result.GetResult<Prisma.$DisciplinePupilsMarkPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one DisciplinePupilsMark.
     * @param {DisciplinePupilsMarkUpdateArgs} args - Arguments to update one DisciplinePupilsMark.
     * @example
     * // Update one DisciplinePupilsMark
     * const disciplinePupilsMark = await prisma.disciplinePupilsMark.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DisciplinePupilsMarkUpdateArgs>(args: SelectSubset<T, DisciplinePupilsMarkUpdateArgs<ExtArgs>>): Prisma__DisciplinePupilsMarkClient<$Result.GetResult<Prisma.$DisciplinePupilsMarkPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more DisciplinePupilsMarks.
     * @param {DisciplinePupilsMarkDeleteManyArgs} args - Arguments to filter DisciplinePupilsMarks to delete.
     * @example
     * // Delete a few DisciplinePupilsMarks
     * const { count } = await prisma.disciplinePupilsMark.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DisciplinePupilsMarkDeleteManyArgs>(args?: SelectSubset<T, DisciplinePupilsMarkDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DisciplinePupilsMarks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DisciplinePupilsMarkUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DisciplinePupilsMarks
     * const disciplinePupilsMark = await prisma.disciplinePupilsMark.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DisciplinePupilsMarkUpdateManyArgs>(args: SelectSubset<T, DisciplinePupilsMarkUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DisciplinePupilsMarks and returns the data updated in the database.
     * @param {DisciplinePupilsMarkUpdateManyAndReturnArgs} args - Arguments to update many DisciplinePupilsMarks.
     * @example
     * // Update many DisciplinePupilsMarks
     * const disciplinePupilsMark = await prisma.disciplinePupilsMark.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more DisciplinePupilsMarks and only return the `disciplineId`
     * const disciplinePupilsMarkWithDisciplineIdOnly = await prisma.disciplinePupilsMark.updateManyAndReturn({
     *   select: { disciplineId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DisciplinePupilsMarkUpdateManyAndReturnArgs>(args: SelectSubset<T, DisciplinePupilsMarkUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DisciplinePupilsMarkPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one DisciplinePupilsMark.
     * @param {DisciplinePupilsMarkUpsertArgs} args - Arguments to update or create a DisciplinePupilsMark.
     * @example
     * // Update or create a DisciplinePupilsMark
     * const disciplinePupilsMark = await prisma.disciplinePupilsMark.upsert({
     *   create: {
     *     // ... data to create a DisciplinePupilsMark
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DisciplinePupilsMark we want to update
     *   }
     * })
     */
    upsert<T extends DisciplinePupilsMarkUpsertArgs>(args: SelectSubset<T, DisciplinePupilsMarkUpsertArgs<ExtArgs>>): Prisma__DisciplinePupilsMarkClient<$Result.GetResult<Prisma.$DisciplinePupilsMarkPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of DisciplinePupilsMarks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DisciplinePupilsMarkCountArgs} args - Arguments to filter DisciplinePupilsMarks to count.
     * @example
     * // Count the number of DisciplinePupilsMarks
     * const count = await prisma.disciplinePupilsMark.count({
     *   where: {
     *     // ... the filter for the DisciplinePupilsMarks we want to count
     *   }
     * })
    **/
    count<T extends DisciplinePupilsMarkCountArgs>(
      args?: Subset<T, DisciplinePupilsMarkCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DisciplinePupilsMarkCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DisciplinePupilsMark.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DisciplinePupilsMarkAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DisciplinePupilsMarkAggregateArgs>(args: Subset<T, DisciplinePupilsMarkAggregateArgs>): Prisma.PrismaPromise<GetDisciplinePupilsMarkAggregateType<T>>

    /**
     * Group by DisciplinePupilsMark.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DisciplinePupilsMarkGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DisciplinePupilsMarkGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DisciplinePupilsMarkGroupByArgs['orderBy'] }
        : { orderBy?: DisciplinePupilsMarkGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DisciplinePupilsMarkGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDisciplinePupilsMarkGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DisciplinePupilsMark model
   */
  readonly fields: DisciplinePupilsMarkFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DisciplinePupilsMark.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DisciplinePupilsMarkClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    discipline<T extends DisciplineDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DisciplineDefaultArgs<ExtArgs>>): Prisma__DisciplineClient<$Result.GetResult<Prisma.$DisciplinePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    pupil<T extends PupilDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PupilDefaultArgs<ExtArgs>>): Prisma__PupilClient<$Result.GetResult<Prisma.$PupilPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DisciplinePupilsMark model
   */
  interface DisciplinePupilsMarkFieldRefs {
    readonly disciplineId: FieldRef<"DisciplinePupilsMark", 'Int'>
    readonly pupilId: FieldRef<"DisciplinePupilsMark", 'Int'>
    readonly mark: FieldRef<"DisciplinePupilsMark", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * DisciplinePupilsMark findUnique
   */
  export type DisciplinePupilsMarkFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DisciplinePupilsMark
     */
    select?: DisciplinePupilsMarkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DisciplinePupilsMark
     */
    omit?: DisciplinePupilsMarkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DisciplinePupilsMarkInclude<ExtArgs> | null
    /**
     * Filter, which DisciplinePupilsMark to fetch.
     */
    where: DisciplinePupilsMarkWhereUniqueInput
  }

  /**
   * DisciplinePupilsMark findUniqueOrThrow
   */
  export type DisciplinePupilsMarkFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DisciplinePupilsMark
     */
    select?: DisciplinePupilsMarkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DisciplinePupilsMark
     */
    omit?: DisciplinePupilsMarkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DisciplinePupilsMarkInclude<ExtArgs> | null
    /**
     * Filter, which DisciplinePupilsMark to fetch.
     */
    where: DisciplinePupilsMarkWhereUniqueInput
  }

  /**
   * DisciplinePupilsMark findFirst
   */
  export type DisciplinePupilsMarkFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DisciplinePupilsMark
     */
    select?: DisciplinePupilsMarkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DisciplinePupilsMark
     */
    omit?: DisciplinePupilsMarkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DisciplinePupilsMarkInclude<ExtArgs> | null
    /**
     * Filter, which DisciplinePupilsMark to fetch.
     */
    where?: DisciplinePupilsMarkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DisciplinePupilsMarks to fetch.
     */
    orderBy?: DisciplinePupilsMarkOrderByWithRelationInput | DisciplinePupilsMarkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DisciplinePupilsMarks.
     */
    cursor?: DisciplinePupilsMarkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DisciplinePupilsMarks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DisciplinePupilsMarks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DisciplinePupilsMarks.
     */
    distinct?: DisciplinePupilsMarkScalarFieldEnum | DisciplinePupilsMarkScalarFieldEnum[]
  }

  /**
   * DisciplinePupilsMark findFirstOrThrow
   */
  export type DisciplinePupilsMarkFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DisciplinePupilsMark
     */
    select?: DisciplinePupilsMarkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DisciplinePupilsMark
     */
    omit?: DisciplinePupilsMarkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DisciplinePupilsMarkInclude<ExtArgs> | null
    /**
     * Filter, which DisciplinePupilsMark to fetch.
     */
    where?: DisciplinePupilsMarkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DisciplinePupilsMarks to fetch.
     */
    orderBy?: DisciplinePupilsMarkOrderByWithRelationInput | DisciplinePupilsMarkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DisciplinePupilsMarks.
     */
    cursor?: DisciplinePupilsMarkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DisciplinePupilsMarks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DisciplinePupilsMarks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DisciplinePupilsMarks.
     */
    distinct?: DisciplinePupilsMarkScalarFieldEnum | DisciplinePupilsMarkScalarFieldEnum[]
  }

  /**
   * DisciplinePupilsMark findMany
   */
  export type DisciplinePupilsMarkFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DisciplinePupilsMark
     */
    select?: DisciplinePupilsMarkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DisciplinePupilsMark
     */
    omit?: DisciplinePupilsMarkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DisciplinePupilsMarkInclude<ExtArgs> | null
    /**
     * Filter, which DisciplinePupilsMarks to fetch.
     */
    where?: DisciplinePupilsMarkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DisciplinePupilsMarks to fetch.
     */
    orderBy?: DisciplinePupilsMarkOrderByWithRelationInput | DisciplinePupilsMarkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DisciplinePupilsMarks.
     */
    cursor?: DisciplinePupilsMarkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DisciplinePupilsMarks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DisciplinePupilsMarks.
     */
    skip?: number
    distinct?: DisciplinePupilsMarkScalarFieldEnum | DisciplinePupilsMarkScalarFieldEnum[]
  }

  /**
   * DisciplinePupilsMark create
   */
  export type DisciplinePupilsMarkCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DisciplinePupilsMark
     */
    select?: DisciplinePupilsMarkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DisciplinePupilsMark
     */
    omit?: DisciplinePupilsMarkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DisciplinePupilsMarkInclude<ExtArgs> | null
    /**
     * The data needed to create a DisciplinePupilsMark.
     */
    data: XOR<DisciplinePupilsMarkCreateInput, DisciplinePupilsMarkUncheckedCreateInput>
  }

  /**
   * DisciplinePupilsMark createMany
   */
  export type DisciplinePupilsMarkCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DisciplinePupilsMarks.
     */
    data: DisciplinePupilsMarkCreateManyInput | DisciplinePupilsMarkCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DisciplinePupilsMark createManyAndReturn
   */
  export type DisciplinePupilsMarkCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DisciplinePupilsMark
     */
    select?: DisciplinePupilsMarkSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DisciplinePupilsMark
     */
    omit?: DisciplinePupilsMarkOmit<ExtArgs> | null
    /**
     * The data used to create many DisciplinePupilsMarks.
     */
    data: DisciplinePupilsMarkCreateManyInput | DisciplinePupilsMarkCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DisciplinePupilsMarkIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * DisciplinePupilsMark update
   */
  export type DisciplinePupilsMarkUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DisciplinePupilsMark
     */
    select?: DisciplinePupilsMarkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DisciplinePupilsMark
     */
    omit?: DisciplinePupilsMarkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DisciplinePupilsMarkInclude<ExtArgs> | null
    /**
     * The data needed to update a DisciplinePupilsMark.
     */
    data: XOR<DisciplinePupilsMarkUpdateInput, DisciplinePupilsMarkUncheckedUpdateInput>
    /**
     * Choose, which DisciplinePupilsMark to update.
     */
    where: DisciplinePupilsMarkWhereUniqueInput
  }

  /**
   * DisciplinePupilsMark updateMany
   */
  export type DisciplinePupilsMarkUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DisciplinePupilsMarks.
     */
    data: XOR<DisciplinePupilsMarkUpdateManyMutationInput, DisciplinePupilsMarkUncheckedUpdateManyInput>
    /**
     * Filter which DisciplinePupilsMarks to update
     */
    where?: DisciplinePupilsMarkWhereInput
    /**
     * Limit how many DisciplinePupilsMarks to update.
     */
    limit?: number
  }

  /**
   * DisciplinePupilsMark updateManyAndReturn
   */
  export type DisciplinePupilsMarkUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DisciplinePupilsMark
     */
    select?: DisciplinePupilsMarkSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DisciplinePupilsMark
     */
    omit?: DisciplinePupilsMarkOmit<ExtArgs> | null
    /**
     * The data used to update DisciplinePupilsMarks.
     */
    data: XOR<DisciplinePupilsMarkUpdateManyMutationInput, DisciplinePupilsMarkUncheckedUpdateManyInput>
    /**
     * Filter which DisciplinePupilsMarks to update
     */
    where?: DisciplinePupilsMarkWhereInput
    /**
     * Limit how many DisciplinePupilsMarks to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DisciplinePupilsMarkIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * DisciplinePupilsMark upsert
   */
  export type DisciplinePupilsMarkUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DisciplinePupilsMark
     */
    select?: DisciplinePupilsMarkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DisciplinePupilsMark
     */
    omit?: DisciplinePupilsMarkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DisciplinePupilsMarkInclude<ExtArgs> | null
    /**
     * The filter to search for the DisciplinePupilsMark to update in case it exists.
     */
    where: DisciplinePupilsMarkWhereUniqueInput
    /**
     * In case the DisciplinePupilsMark found by the `where` argument doesn't exist, create a new DisciplinePupilsMark with this data.
     */
    create: XOR<DisciplinePupilsMarkCreateInput, DisciplinePupilsMarkUncheckedCreateInput>
    /**
     * In case the DisciplinePupilsMark was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DisciplinePupilsMarkUpdateInput, DisciplinePupilsMarkUncheckedUpdateInput>
  }

  /**
   * DisciplinePupilsMark delete
   */
  export type DisciplinePupilsMarkDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DisciplinePupilsMark
     */
    select?: DisciplinePupilsMarkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DisciplinePupilsMark
     */
    omit?: DisciplinePupilsMarkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DisciplinePupilsMarkInclude<ExtArgs> | null
    /**
     * Filter which DisciplinePupilsMark to delete.
     */
    where: DisciplinePupilsMarkWhereUniqueInput
  }

  /**
   * DisciplinePupilsMark deleteMany
   */
  export type DisciplinePupilsMarkDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DisciplinePupilsMarks to delete
     */
    where?: DisciplinePupilsMarkWhereInput
    /**
     * Limit how many DisciplinePupilsMarks to delete.
     */
    limit?: number
  }

  /**
   * DisciplinePupilsMark without action
   */
  export type DisciplinePupilsMarkDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DisciplinePupilsMark
     */
    select?: DisciplinePupilsMarkSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DisciplinePupilsMark
     */
    omit?: DisciplinePupilsMarkOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DisciplinePupilsMarkInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    roleId: 'roleId',
    name: 'name',
    surname: 'surname',
    patronymic: 'patronymic'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const RoleScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type RoleScalarFieldEnum = (typeof RoleScalarFieldEnum)[keyof typeof RoleScalarFieldEnum]


  export const TeacherScalarFieldEnum: {
    id: 'id',
    classroomNumber: 'classroomNumber',
    classId: 'classId'
  };

  export type TeacherScalarFieldEnum = (typeof TeacherScalarFieldEnum)[keyof typeof TeacherScalarFieldEnum]


  export const DisciplineScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description'
  };

  export type DisciplineScalarFieldEnum = (typeof DisciplineScalarFieldEnum)[keyof typeof DisciplineScalarFieldEnum]


  export const ClassScalarFieldEnum: {
    id: 'id',
    classTeacher: 'classTeacher'
  };

  export type ClassScalarFieldEnum = (typeof ClassScalarFieldEnum)[keyof typeof ClassScalarFieldEnum]


  export const PupilScalarFieldEnum: {
    id: 'id',
    classId: 'classId'
  };

  export type PupilScalarFieldEnum = (typeof PupilScalarFieldEnum)[keyof typeof PupilScalarFieldEnum]


  export const TeachersDisciplinesScalarFieldEnum: {
    teacherId: 'teacherId',
    disciplineId: 'disciplineId'
  };

  export type TeachersDisciplinesScalarFieldEnum = (typeof TeachersDisciplinesScalarFieldEnum)[keyof typeof TeachersDisciplinesScalarFieldEnum]


  export const ClassesDisciplinesScalarFieldEnum: {
    classId: 'classId',
    disciplineId: 'disciplineId'
  };

  export type ClassesDisciplinesScalarFieldEnum = (typeof ClassesDisciplinesScalarFieldEnum)[keyof typeof ClassesDisciplinesScalarFieldEnum]


  export const DisciplinePupilsMarkScalarFieldEnum: {
    disciplineId: 'disciplineId',
    pupilId: 'pupilId',
    mark: 'mark'
  };

  export type DisciplinePupilsMarkScalarFieldEnum = (typeof DisciplinePupilsMarkScalarFieldEnum)[keyof typeof DisciplinePupilsMarkScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    roleId?: IntFilter<"User"> | number
    name?: StringFilter<"User"> | string
    surname?: StringFilter<"User"> | string
    patronymic?: StringFilter<"User"> | string
    role?: XOR<RoleScalarRelationFilter, RoleWhereInput>
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    roleId?: SortOrder
    name?: SortOrder
    surname?: SortOrder
    patronymic?: SortOrder
    role?: RoleOrderByWithRelationInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    roleId?: IntFilter<"User"> | number
    name?: StringFilter<"User"> | string
    surname?: StringFilter<"User"> | string
    patronymic?: StringFilter<"User"> | string
    role?: XOR<RoleScalarRelationFilter, RoleWhereInput>
  }, "id">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    roleId?: SortOrder
    name?: SortOrder
    surname?: SortOrder
    patronymic?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    roleId?: IntWithAggregatesFilter<"User"> | number
    name?: StringWithAggregatesFilter<"User"> | string
    surname?: StringWithAggregatesFilter<"User"> | string
    patronymic?: StringWithAggregatesFilter<"User"> | string
  }

  export type RoleWhereInput = {
    AND?: RoleWhereInput | RoleWhereInput[]
    OR?: RoleWhereInput[]
    NOT?: RoleWhereInput | RoleWhereInput[]
    id?: IntFilter<"Role"> | number
    name?: StringFilter<"Role"> | string
    users?: UserListRelationFilter
  }

  export type RoleOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    users?: UserOrderByRelationAggregateInput
  }

  export type RoleWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: RoleWhereInput | RoleWhereInput[]
    OR?: RoleWhereInput[]
    NOT?: RoleWhereInput | RoleWhereInput[]
    name?: StringFilter<"Role"> | string
    users?: UserListRelationFilter
  }, "id">

  export type RoleOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: RoleCountOrderByAggregateInput
    _avg?: RoleAvgOrderByAggregateInput
    _max?: RoleMaxOrderByAggregateInput
    _min?: RoleMinOrderByAggregateInput
    _sum?: RoleSumOrderByAggregateInput
  }

  export type RoleScalarWhereWithAggregatesInput = {
    AND?: RoleScalarWhereWithAggregatesInput | RoleScalarWhereWithAggregatesInput[]
    OR?: RoleScalarWhereWithAggregatesInput[]
    NOT?: RoleScalarWhereWithAggregatesInput | RoleScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Role"> | number
    name?: StringWithAggregatesFilter<"Role"> | string
  }

  export type TeacherWhereInput = {
    AND?: TeacherWhereInput | TeacherWhereInput[]
    OR?: TeacherWhereInput[]
    NOT?: TeacherWhereInput | TeacherWhereInput[]
    id?: IntFilter<"Teacher"> | number
    classroomNumber?: StringFilter<"Teacher"> | string
    classId?: IntNullableFilter<"Teacher"> | number | null
    class?: XOR<ClassNullableScalarRelationFilter, ClassWhereInput> | null
    disciplines?: TeachersDisciplinesListRelationFilter
  }

  export type TeacherOrderByWithRelationInput = {
    id?: SortOrder
    classroomNumber?: SortOrder
    classId?: SortOrderInput | SortOrder
    class?: ClassOrderByWithRelationInput
    disciplines?: TeachersDisciplinesOrderByRelationAggregateInput
  }

  export type TeacherWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    classId?: number
    AND?: TeacherWhereInput | TeacherWhereInput[]
    OR?: TeacherWhereInput[]
    NOT?: TeacherWhereInput | TeacherWhereInput[]
    classroomNumber?: StringFilter<"Teacher"> | string
    class?: XOR<ClassNullableScalarRelationFilter, ClassWhereInput> | null
    disciplines?: TeachersDisciplinesListRelationFilter
  }, "id" | "classId">

  export type TeacherOrderByWithAggregationInput = {
    id?: SortOrder
    classroomNumber?: SortOrder
    classId?: SortOrderInput | SortOrder
    _count?: TeacherCountOrderByAggregateInput
    _avg?: TeacherAvgOrderByAggregateInput
    _max?: TeacherMaxOrderByAggregateInput
    _min?: TeacherMinOrderByAggregateInput
    _sum?: TeacherSumOrderByAggregateInput
  }

  export type TeacherScalarWhereWithAggregatesInput = {
    AND?: TeacherScalarWhereWithAggregatesInput | TeacherScalarWhereWithAggregatesInput[]
    OR?: TeacherScalarWhereWithAggregatesInput[]
    NOT?: TeacherScalarWhereWithAggregatesInput | TeacherScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Teacher"> | number
    classroomNumber?: StringWithAggregatesFilter<"Teacher"> | string
    classId?: IntNullableWithAggregatesFilter<"Teacher"> | number | null
  }

  export type DisciplineWhereInput = {
    AND?: DisciplineWhereInput | DisciplineWhereInput[]
    OR?: DisciplineWhereInput[]
    NOT?: DisciplineWhereInput | DisciplineWhereInput[]
    id?: IntFilter<"Discipline"> | number
    name?: StringFilter<"Discipline"> | string
    description?: StringFilter<"Discipline"> | string
    teachers?: TeachersDisciplinesListRelationFilter
    classes?: ClassesDisciplinesListRelationFilter
    marks?: DisciplinePupilsMarkListRelationFilter
  }

  export type DisciplineOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    teachers?: TeachersDisciplinesOrderByRelationAggregateInput
    classes?: ClassesDisciplinesOrderByRelationAggregateInput
    marks?: DisciplinePupilsMarkOrderByRelationAggregateInput
  }

  export type DisciplineWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: DisciplineWhereInput | DisciplineWhereInput[]
    OR?: DisciplineWhereInput[]
    NOT?: DisciplineWhereInput | DisciplineWhereInput[]
    name?: StringFilter<"Discipline"> | string
    description?: StringFilter<"Discipline"> | string
    teachers?: TeachersDisciplinesListRelationFilter
    classes?: ClassesDisciplinesListRelationFilter
    marks?: DisciplinePupilsMarkListRelationFilter
  }, "id">

  export type DisciplineOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    _count?: DisciplineCountOrderByAggregateInput
    _avg?: DisciplineAvgOrderByAggregateInput
    _max?: DisciplineMaxOrderByAggregateInput
    _min?: DisciplineMinOrderByAggregateInput
    _sum?: DisciplineSumOrderByAggregateInput
  }

  export type DisciplineScalarWhereWithAggregatesInput = {
    AND?: DisciplineScalarWhereWithAggregatesInput | DisciplineScalarWhereWithAggregatesInput[]
    OR?: DisciplineScalarWhereWithAggregatesInput[]
    NOT?: DisciplineScalarWhereWithAggregatesInput | DisciplineScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Discipline"> | number
    name?: StringWithAggregatesFilter<"Discipline"> | string
    description?: StringWithAggregatesFilter<"Discipline"> | string
  }

  export type ClassWhereInput = {
    AND?: ClassWhereInput | ClassWhereInput[]
    OR?: ClassWhereInput[]
    NOT?: ClassWhereInput | ClassWhereInput[]
    id?: IntFilter<"Class"> | number
    classTeacher?: IntNullableFilter<"Class"> | number | null
    pupils?: PupilListRelationFilter
    disciplines?: ClassesDisciplinesListRelationFilter
    assignedTeacher?: XOR<TeacherNullableScalarRelationFilter, TeacherWhereInput> | null
  }

  export type ClassOrderByWithRelationInput = {
    id?: SortOrder
    classTeacher?: SortOrderInput | SortOrder
    pupils?: PupilOrderByRelationAggregateInput
    disciplines?: ClassesDisciplinesOrderByRelationAggregateInput
    assignedTeacher?: TeacherOrderByWithRelationInput
  }

  export type ClassWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    classTeacher?: number
    AND?: ClassWhereInput | ClassWhereInput[]
    OR?: ClassWhereInput[]
    NOT?: ClassWhereInput | ClassWhereInput[]
    pupils?: PupilListRelationFilter
    disciplines?: ClassesDisciplinesListRelationFilter
    assignedTeacher?: XOR<TeacherNullableScalarRelationFilter, TeacherWhereInput> | null
  }, "id" | "classTeacher">

  export type ClassOrderByWithAggregationInput = {
    id?: SortOrder
    classTeacher?: SortOrderInput | SortOrder
    _count?: ClassCountOrderByAggregateInput
    _avg?: ClassAvgOrderByAggregateInput
    _max?: ClassMaxOrderByAggregateInput
    _min?: ClassMinOrderByAggregateInput
    _sum?: ClassSumOrderByAggregateInput
  }

  export type ClassScalarWhereWithAggregatesInput = {
    AND?: ClassScalarWhereWithAggregatesInput | ClassScalarWhereWithAggregatesInput[]
    OR?: ClassScalarWhereWithAggregatesInput[]
    NOT?: ClassScalarWhereWithAggregatesInput | ClassScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Class"> | number
    classTeacher?: IntNullableWithAggregatesFilter<"Class"> | number | null
  }

  export type PupilWhereInput = {
    AND?: PupilWhereInput | PupilWhereInput[]
    OR?: PupilWhereInput[]
    NOT?: PupilWhereInput | PupilWhereInput[]
    id?: IntFilter<"Pupil"> | number
    classId?: IntFilter<"Pupil"> | number
    class?: XOR<ClassScalarRelationFilter, ClassWhereInput>
    marks?: DisciplinePupilsMarkListRelationFilter
  }

  export type PupilOrderByWithRelationInput = {
    id?: SortOrder
    classId?: SortOrder
    class?: ClassOrderByWithRelationInput
    marks?: DisciplinePupilsMarkOrderByRelationAggregateInput
  }

  export type PupilWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PupilWhereInput | PupilWhereInput[]
    OR?: PupilWhereInput[]
    NOT?: PupilWhereInput | PupilWhereInput[]
    classId?: IntFilter<"Pupil"> | number
    class?: XOR<ClassScalarRelationFilter, ClassWhereInput>
    marks?: DisciplinePupilsMarkListRelationFilter
  }, "id">

  export type PupilOrderByWithAggregationInput = {
    id?: SortOrder
    classId?: SortOrder
    _count?: PupilCountOrderByAggregateInput
    _avg?: PupilAvgOrderByAggregateInput
    _max?: PupilMaxOrderByAggregateInput
    _min?: PupilMinOrderByAggregateInput
    _sum?: PupilSumOrderByAggregateInput
  }

  export type PupilScalarWhereWithAggregatesInput = {
    AND?: PupilScalarWhereWithAggregatesInput | PupilScalarWhereWithAggregatesInput[]
    OR?: PupilScalarWhereWithAggregatesInput[]
    NOT?: PupilScalarWhereWithAggregatesInput | PupilScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Pupil"> | number
    classId?: IntWithAggregatesFilter<"Pupil"> | number
  }

  export type TeachersDisciplinesWhereInput = {
    AND?: TeachersDisciplinesWhereInput | TeachersDisciplinesWhereInput[]
    OR?: TeachersDisciplinesWhereInput[]
    NOT?: TeachersDisciplinesWhereInput | TeachersDisciplinesWhereInput[]
    teacherId?: IntFilter<"TeachersDisciplines"> | number
    disciplineId?: IntFilter<"TeachersDisciplines"> | number
    teacher?: XOR<TeacherScalarRelationFilter, TeacherWhereInput>
    discipline?: XOR<DisciplineScalarRelationFilter, DisciplineWhereInput>
  }

  export type TeachersDisciplinesOrderByWithRelationInput = {
    teacherId?: SortOrder
    disciplineId?: SortOrder
    teacher?: TeacherOrderByWithRelationInput
    discipline?: DisciplineOrderByWithRelationInput
  }

  export type TeachersDisciplinesWhereUniqueInput = Prisma.AtLeast<{
    teacherId_disciplineId?: TeachersDisciplinesTeacherIdDisciplineIdCompoundUniqueInput
    AND?: TeachersDisciplinesWhereInput | TeachersDisciplinesWhereInput[]
    OR?: TeachersDisciplinesWhereInput[]
    NOT?: TeachersDisciplinesWhereInput | TeachersDisciplinesWhereInput[]
    teacherId?: IntFilter<"TeachersDisciplines"> | number
    disciplineId?: IntFilter<"TeachersDisciplines"> | number
    teacher?: XOR<TeacherScalarRelationFilter, TeacherWhereInput>
    discipline?: XOR<DisciplineScalarRelationFilter, DisciplineWhereInput>
  }, "teacherId_disciplineId">

  export type TeachersDisciplinesOrderByWithAggregationInput = {
    teacherId?: SortOrder
    disciplineId?: SortOrder
    _count?: TeachersDisciplinesCountOrderByAggregateInput
    _avg?: TeachersDisciplinesAvgOrderByAggregateInput
    _max?: TeachersDisciplinesMaxOrderByAggregateInput
    _min?: TeachersDisciplinesMinOrderByAggregateInput
    _sum?: TeachersDisciplinesSumOrderByAggregateInput
  }

  export type TeachersDisciplinesScalarWhereWithAggregatesInput = {
    AND?: TeachersDisciplinesScalarWhereWithAggregatesInput | TeachersDisciplinesScalarWhereWithAggregatesInput[]
    OR?: TeachersDisciplinesScalarWhereWithAggregatesInput[]
    NOT?: TeachersDisciplinesScalarWhereWithAggregatesInput | TeachersDisciplinesScalarWhereWithAggregatesInput[]
    teacherId?: IntWithAggregatesFilter<"TeachersDisciplines"> | number
    disciplineId?: IntWithAggregatesFilter<"TeachersDisciplines"> | number
  }

  export type ClassesDisciplinesWhereInput = {
    AND?: ClassesDisciplinesWhereInput | ClassesDisciplinesWhereInput[]
    OR?: ClassesDisciplinesWhereInput[]
    NOT?: ClassesDisciplinesWhereInput | ClassesDisciplinesWhereInput[]
    classId?: IntFilter<"ClassesDisciplines"> | number
    disciplineId?: IntFilter<"ClassesDisciplines"> | number
    class?: XOR<ClassScalarRelationFilter, ClassWhereInput>
    discipline?: XOR<DisciplineScalarRelationFilter, DisciplineWhereInput>
  }

  export type ClassesDisciplinesOrderByWithRelationInput = {
    classId?: SortOrder
    disciplineId?: SortOrder
    class?: ClassOrderByWithRelationInput
    discipline?: DisciplineOrderByWithRelationInput
  }

  export type ClassesDisciplinesWhereUniqueInput = Prisma.AtLeast<{
    classId_disciplineId?: ClassesDisciplinesClassIdDisciplineIdCompoundUniqueInput
    AND?: ClassesDisciplinesWhereInput | ClassesDisciplinesWhereInput[]
    OR?: ClassesDisciplinesWhereInput[]
    NOT?: ClassesDisciplinesWhereInput | ClassesDisciplinesWhereInput[]
    classId?: IntFilter<"ClassesDisciplines"> | number
    disciplineId?: IntFilter<"ClassesDisciplines"> | number
    class?: XOR<ClassScalarRelationFilter, ClassWhereInput>
    discipline?: XOR<DisciplineScalarRelationFilter, DisciplineWhereInput>
  }, "classId_disciplineId">

  export type ClassesDisciplinesOrderByWithAggregationInput = {
    classId?: SortOrder
    disciplineId?: SortOrder
    _count?: ClassesDisciplinesCountOrderByAggregateInput
    _avg?: ClassesDisciplinesAvgOrderByAggregateInput
    _max?: ClassesDisciplinesMaxOrderByAggregateInput
    _min?: ClassesDisciplinesMinOrderByAggregateInput
    _sum?: ClassesDisciplinesSumOrderByAggregateInput
  }

  export type ClassesDisciplinesScalarWhereWithAggregatesInput = {
    AND?: ClassesDisciplinesScalarWhereWithAggregatesInput | ClassesDisciplinesScalarWhereWithAggregatesInput[]
    OR?: ClassesDisciplinesScalarWhereWithAggregatesInput[]
    NOT?: ClassesDisciplinesScalarWhereWithAggregatesInput | ClassesDisciplinesScalarWhereWithAggregatesInput[]
    classId?: IntWithAggregatesFilter<"ClassesDisciplines"> | number
    disciplineId?: IntWithAggregatesFilter<"ClassesDisciplines"> | number
  }

  export type DisciplinePupilsMarkWhereInput = {
    AND?: DisciplinePupilsMarkWhereInput | DisciplinePupilsMarkWhereInput[]
    OR?: DisciplinePupilsMarkWhereInput[]
    NOT?: DisciplinePupilsMarkWhereInput | DisciplinePupilsMarkWhereInput[]
    disciplineId?: IntFilter<"DisciplinePupilsMark"> | number
    pupilId?: IntFilter<"DisciplinePupilsMark"> | number
    mark?: IntFilter<"DisciplinePupilsMark"> | number
    discipline?: XOR<DisciplineScalarRelationFilter, DisciplineWhereInput>
    pupil?: XOR<PupilScalarRelationFilter, PupilWhereInput>
  }

  export type DisciplinePupilsMarkOrderByWithRelationInput = {
    disciplineId?: SortOrder
    pupilId?: SortOrder
    mark?: SortOrder
    discipline?: DisciplineOrderByWithRelationInput
    pupil?: PupilOrderByWithRelationInput
  }

  export type DisciplinePupilsMarkWhereUniqueInput = Prisma.AtLeast<{
    disciplineId_pupilId?: DisciplinePupilsMarkDisciplineIdPupilIdCompoundUniqueInput
    AND?: DisciplinePupilsMarkWhereInput | DisciplinePupilsMarkWhereInput[]
    OR?: DisciplinePupilsMarkWhereInput[]
    NOT?: DisciplinePupilsMarkWhereInput | DisciplinePupilsMarkWhereInput[]
    disciplineId?: IntFilter<"DisciplinePupilsMark"> | number
    pupilId?: IntFilter<"DisciplinePupilsMark"> | number
    mark?: IntFilter<"DisciplinePupilsMark"> | number
    discipline?: XOR<DisciplineScalarRelationFilter, DisciplineWhereInput>
    pupil?: XOR<PupilScalarRelationFilter, PupilWhereInput>
  }, "disciplineId_pupilId">

  export type DisciplinePupilsMarkOrderByWithAggregationInput = {
    disciplineId?: SortOrder
    pupilId?: SortOrder
    mark?: SortOrder
    _count?: DisciplinePupilsMarkCountOrderByAggregateInput
    _avg?: DisciplinePupilsMarkAvgOrderByAggregateInput
    _max?: DisciplinePupilsMarkMaxOrderByAggregateInput
    _min?: DisciplinePupilsMarkMinOrderByAggregateInput
    _sum?: DisciplinePupilsMarkSumOrderByAggregateInput
  }

  export type DisciplinePupilsMarkScalarWhereWithAggregatesInput = {
    AND?: DisciplinePupilsMarkScalarWhereWithAggregatesInput | DisciplinePupilsMarkScalarWhereWithAggregatesInput[]
    OR?: DisciplinePupilsMarkScalarWhereWithAggregatesInput[]
    NOT?: DisciplinePupilsMarkScalarWhereWithAggregatesInput | DisciplinePupilsMarkScalarWhereWithAggregatesInput[]
    disciplineId?: IntWithAggregatesFilter<"DisciplinePupilsMark"> | number
    pupilId?: IntWithAggregatesFilter<"DisciplinePupilsMark"> | number
    mark?: IntWithAggregatesFilter<"DisciplinePupilsMark"> | number
  }

  export type UserCreateInput = {
    name: string
    surname: string
    patronymic: string
    role: RoleCreateNestedOneWithoutUsersInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    roleId: number
    name: string
    surname: string
    patronymic: string
  }

  export type UserUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    patronymic?: StringFieldUpdateOperationsInput | string
    role?: RoleUpdateOneRequiredWithoutUsersNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    roleId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    patronymic?: StringFieldUpdateOperationsInput | string
  }

  export type UserCreateManyInput = {
    id?: number
    roleId: number
    name: string
    surname: string
    patronymic: string
  }

  export type UserUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    patronymic?: StringFieldUpdateOperationsInput | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    roleId?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    patronymic?: StringFieldUpdateOperationsInput | string
  }

  export type RoleCreateInput = {
    name: string
    users?: UserCreateNestedManyWithoutRoleInput
  }

  export type RoleUncheckedCreateInput = {
    id?: number
    name: string
    users?: UserUncheckedCreateNestedManyWithoutRoleInput
  }

  export type RoleUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    users?: UserUpdateManyWithoutRoleNestedInput
  }

  export type RoleUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    users?: UserUncheckedUpdateManyWithoutRoleNestedInput
  }

  export type RoleCreateManyInput = {
    id?: number
    name: string
  }

  export type RoleUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type RoleUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type TeacherCreateInput = {
    classroomNumber: string
    class?: ClassCreateNestedOneWithoutAssignedTeacherInput
    disciplines?: TeachersDisciplinesCreateNestedManyWithoutTeacherInput
  }

  export type TeacherUncheckedCreateInput = {
    id?: number
    classroomNumber: string
    classId?: number | null
    disciplines?: TeachersDisciplinesUncheckedCreateNestedManyWithoutTeacherInput
  }

  export type TeacherUpdateInput = {
    classroomNumber?: StringFieldUpdateOperationsInput | string
    class?: ClassUpdateOneWithoutAssignedTeacherNestedInput
    disciplines?: TeachersDisciplinesUpdateManyWithoutTeacherNestedInput
  }

  export type TeacherUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    classroomNumber?: StringFieldUpdateOperationsInput | string
    classId?: NullableIntFieldUpdateOperationsInput | number | null
    disciplines?: TeachersDisciplinesUncheckedUpdateManyWithoutTeacherNestedInput
  }

  export type TeacherCreateManyInput = {
    id?: number
    classroomNumber: string
    classId?: number | null
  }

  export type TeacherUpdateManyMutationInput = {
    classroomNumber?: StringFieldUpdateOperationsInput | string
  }

  export type TeacherUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    classroomNumber?: StringFieldUpdateOperationsInput | string
    classId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type DisciplineCreateInput = {
    name: string
    description: string
    teachers?: TeachersDisciplinesCreateNestedManyWithoutDisciplineInput
    classes?: ClassesDisciplinesCreateNestedManyWithoutDisciplineInput
    marks?: DisciplinePupilsMarkCreateNestedManyWithoutDisciplineInput
  }

  export type DisciplineUncheckedCreateInput = {
    id?: number
    name: string
    description: string
    teachers?: TeachersDisciplinesUncheckedCreateNestedManyWithoutDisciplineInput
    classes?: ClassesDisciplinesUncheckedCreateNestedManyWithoutDisciplineInput
    marks?: DisciplinePupilsMarkUncheckedCreateNestedManyWithoutDisciplineInput
  }

  export type DisciplineUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    teachers?: TeachersDisciplinesUpdateManyWithoutDisciplineNestedInput
    classes?: ClassesDisciplinesUpdateManyWithoutDisciplineNestedInput
    marks?: DisciplinePupilsMarkUpdateManyWithoutDisciplineNestedInput
  }

  export type DisciplineUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    teachers?: TeachersDisciplinesUncheckedUpdateManyWithoutDisciplineNestedInput
    classes?: ClassesDisciplinesUncheckedUpdateManyWithoutDisciplineNestedInput
    marks?: DisciplinePupilsMarkUncheckedUpdateManyWithoutDisciplineNestedInput
  }

  export type DisciplineCreateManyInput = {
    id?: number
    name: string
    description: string
  }

  export type DisciplineUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type DisciplineUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type ClassCreateInput = {
    classTeacher?: number | null
    pupils?: PupilCreateNestedManyWithoutClassInput
    disciplines?: ClassesDisciplinesCreateNestedManyWithoutClassInput
    assignedTeacher?: TeacherCreateNestedOneWithoutClassInput
  }

  export type ClassUncheckedCreateInput = {
    id?: number
    classTeacher?: number | null
    pupils?: PupilUncheckedCreateNestedManyWithoutClassInput
    disciplines?: ClassesDisciplinesUncheckedCreateNestedManyWithoutClassInput
    assignedTeacher?: TeacherUncheckedCreateNestedOneWithoutClassInput
  }

  export type ClassUpdateInput = {
    classTeacher?: NullableIntFieldUpdateOperationsInput | number | null
    pupils?: PupilUpdateManyWithoutClassNestedInput
    disciplines?: ClassesDisciplinesUpdateManyWithoutClassNestedInput
    assignedTeacher?: TeacherUpdateOneWithoutClassNestedInput
  }

  export type ClassUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    classTeacher?: NullableIntFieldUpdateOperationsInput | number | null
    pupils?: PupilUncheckedUpdateManyWithoutClassNestedInput
    disciplines?: ClassesDisciplinesUncheckedUpdateManyWithoutClassNestedInput
    assignedTeacher?: TeacherUncheckedUpdateOneWithoutClassNestedInput
  }

  export type ClassCreateManyInput = {
    id?: number
    classTeacher?: number | null
  }

  export type ClassUpdateManyMutationInput = {
    classTeacher?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ClassUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    classTeacher?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type PupilCreateInput = {
    class: ClassCreateNestedOneWithoutPupilsInput
    marks?: DisciplinePupilsMarkCreateNestedManyWithoutPupilInput
  }

  export type PupilUncheckedCreateInput = {
    id?: number
    classId: number
    marks?: DisciplinePupilsMarkUncheckedCreateNestedManyWithoutPupilInput
  }

  export type PupilUpdateInput = {
    class?: ClassUpdateOneRequiredWithoutPupilsNestedInput
    marks?: DisciplinePupilsMarkUpdateManyWithoutPupilNestedInput
  }

  export type PupilUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    classId?: IntFieldUpdateOperationsInput | number
    marks?: DisciplinePupilsMarkUncheckedUpdateManyWithoutPupilNestedInput
  }

  export type PupilCreateManyInput = {
    id?: number
    classId: number
  }

  export type PupilUpdateManyMutationInput = {

  }

  export type PupilUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    classId?: IntFieldUpdateOperationsInput | number
  }

  export type TeachersDisciplinesCreateInput = {
    teacher: TeacherCreateNestedOneWithoutDisciplinesInput
    discipline: DisciplineCreateNestedOneWithoutTeachersInput
  }

  export type TeachersDisciplinesUncheckedCreateInput = {
    teacherId: number
    disciplineId: number
  }

  export type TeachersDisciplinesUpdateInput = {
    teacher?: TeacherUpdateOneRequiredWithoutDisciplinesNestedInput
    discipline?: DisciplineUpdateOneRequiredWithoutTeachersNestedInput
  }

  export type TeachersDisciplinesUncheckedUpdateInput = {
    teacherId?: IntFieldUpdateOperationsInput | number
    disciplineId?: IntFieldUpdateOperationsInput | number
  }

  export type TeachersDisciplinesCreateManyInput = {
    teacherId: number
    disciplineId: number
  }

  export type TeachersDisciplinesUpdateManyMutationInput = {

  }

  export type TeachersDisciplinesUncheckedUpdateManyInput = {
    teacherId?: IntFieldUpdateOperationsInput | number
    disciplineId?: IntFieldUpdateOperationsInput | number
  }

  export type ClassesDisciplinesCreateInput = {
    class: ClassCreateNestedOneWithoutDisciplinesInput
    discipline: DisciplineCreateNestedOneWithoutClassesInput
  }

  export type ClassesDisciplinesUncheckedCreateInput = {
    classId: number
    disciplineId: number
  }

  export type ClassesDisciplinesUpdateInput = {
    class?: ClassUpdateOneRequiredWithoutDisciplinesNestedInput
    discipline?: DisciplineUpdateOneRequiredWithoutClassesNestedInput
  }

  export type ClassesDisciplinesUncheckedUpdateInput = {
    classId?: IntFieldUpdateOperationsInput | number
    disciplineId?: IntFieldUpdateOperationsInput | number
  }

  export type ClassesDisciplinesCreateManyInput = {
    classId: number
    disciplineId: number
  }

  export type ClassesDisciplinesUpdateManyMutationInput = {

  }

  export type ClassesDisciplinesUncheckedUpdateManyInput = {
    classId?: IntFieldUpdateOperationsInput | number
    disciplineId?: IntFieldUpdateOperationsInput | number
  }

  export type DisciplinePupilsMarkCreateInput = {
    mark: number
    discipline: DisciplineCreateNestedOneWithoutMarksInput
    pupil: PupilCreateNestedOneWithoutMarksInput
  }

  export type DisciplinePupilsMarkUncheckedCreateInput = {
    disciplineId: number
    pupilId: number
    mark: number
  }

  export type DisciplinePupilsMarkUpdateInput = {
    mark?: IntFieldUpdateOperationsInput | number
    discipline?: DisciplineUpdateOneRequiredWithoutMarksNestedInput
    pupil?: PupilUpdateOneRequiredWithoutMarksNestedInput
  }

  export type DisciplinePupilsMarkUncheckedUpdateInput = {
    disciplineId?: IntFieldUpdateOperationsInput | number
    pupilId?: IntFieldUpdateOperationsInput | number
    mark?: IntFieldUpdateOperationsInput | number
  }

  export type DisciplinePupilsMarkCreateManyInput = {
    disciplineId: number
    pupilId: number
    mark: number
  }

  export type DisciplinePupilsMarkUpdateManyMutationInput = {
    mark?: IntFieldUpdateOperationsInput | number
  }

  export type DisciplinePupilsMarkUncheckedUpdateManyInput = {
    disciplineId?: IntFieldUpdateOperationsInput | number
    pupilId?: IntFieldUpdateOperationsInput | number
    mark?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type RoleScalarRelationFilter = {
    is?: RoleWhereInput
    isNot?: RoleWhereInput
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    roleId?: SortOrder
    name?: SortOrder
    surname?: SortOrder
    patronymic?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
    roleId?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    roleId?: SortOrder
    name?: SortOrder
    surname?: SortOrder
    patronymic?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    roleId?: SortOrder
    name?: SortOrder
    surname?: SortOrder
    patronymic?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
    roleId?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RoleCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type RoleAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type RoleMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type RoleMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type RoleSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type ClassNullableScalarRelationFilter = {
    is?: ClassWhereInput | null
    isNot?: ClassWhereInput | null
  }

  export type TeachersDisciplinesListRelationFilter = {
    every?: TeachersDisciplinesWhereInput
    some?: TeachersDisciplinesWhereInput
    none?: TeachersDisciplinesWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type TeachersDisciplinesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TeacherCountOrderByAggregateInput = {
    id?: SortOrder
    classroomNumber?: SortOrder
    classId?: SortOrder
  }

  export type TeacherAvgOrderByAggregateInput = {
    id?: SortOrder
    classId?: SortOrder
  }

  export type TeacherMaxOrderByAggregateInput = {
    id?: SortOrder
    classroomNumber?: SortOrder
    classId?: SortOrder
  }

  export type TeacherMinOrderByAggregateInput = {
    id?: SortOrder
    classroomNumber?: SortOrder
    classId?: SortOrder
  }

  export type TeacherSumOrderByAggregateInput = {
    id?: SortOrder
    classId?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type ClassesDisciplinesListRelationFilter = {
    every?: ClassesDisciplinesWhereInput
    some?: ClassesDisciplinesWhereInput
    none?: ClassesDisciplinesWhereInput
  }

  export type DisciplinePupilsMarkListRelationFilter = {
    every?: DisciplinePupilsMarkWhereInput
    some?: DisciplinePupilsMarkWhereInput
    none?: DisciplinePupilsMarkWhereInput
  }

  export type ClassesDisciplinesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DisciplinePupilsMarkOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DisciplineCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
  }

  export type DisciplineAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DisciplineMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
  }

  export type DisciplineMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
  }

  export type DisciplineSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type PupilListRelationFilter = {
    every?: PupilWhereInput
    some?: PupilWhereInput
    none?: PupilWhereInput
  }

  export type TeacherNullableScalarRelationFilter = {
    is?: TeacherWhereInput | null
    isNot?: TeacherWhereInput | null
  }

  export type PupilOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ClassCountOrderByAggregateInput = {
    id?: SortOrder
    classTeacher?: SortOrder
  }

  export type ClassAvgOrderByAggregateInput = {
    id?: SortOrder
    classTeacher?: SortOrder
  }

  export type ClassMaxOrderByAggregateInput = {
    id?: SortOrder
    classTeacher?: SortOrder
  }

  export type ClassMinOrderByAggregateInput = {
    id?: SortOrder
    classTeacher?: SortOrder
  }

  export type ClassSumOrderByAggregateInput = {
    id?: SortOrder
    classTeacher?: SortOrder
  }

  export type ClassScalarRelationFilter = {
    is?: ClassWhereInput
    isNot?: ClassWhereInput
  }

  export type PupilCountOrderByAggregateInput = {
    id?: SortOrder
    classId?: SortOrder
  }

  export type PupilAvgOrderByAggregateInput = {
    id?: SortOrder
    classId?: SortOrder
  }

  export type PupilMaxOrderByAggregateInput = {
    id?: SortOrder
    classId?: SortOrder
  }

  export type PupilMinOrderByAggregateInput = {
    id?: SortOrder
    classId?: SortOrder
  }

  export type PupilSumOrderByAggregateInput = {
    id?: SortOrder
    classId?: SortOrder
  }

  export type TeacherScalarRelationFilter = {
    is?: TeacherWhereInput
    isNot?: TeacherWhereInput
  }

  export type DisciplineScalarRelationFilter = {
    is?: DisciplineWhereInput
    isNot?: DisciplineWhereInput
  }

  export type TeachersDisciplinesTeacherIdDisciplineIdCompoundUniqueInput = {
    teacherId: number
    disciplineId: number
  }

  export type TeachersDisciplinesCountOrderByAggregateInput = {
    teacherId?: SortOrder
    disciplineId?: SortOrder
  }

  export type TeachersDisciplinesAvgOrderByAggregateInput = {
    teacherId?: SortOrder
    disciplineId?: SortOrder
  }

  export type TeachersDisciplinesMaxOrderByAggregateInput = {
    teacherId?: SortOrder
    disciplineId?: SortOrder
  }

  export type TeachersDisciplinesMinOrderByAggregateInput = {
    teacherId?: SortOrder
    disciplineId?: SortOrder
  }

  export type TeachersDisciplinesSumOrderByAggregateInput = {
    teacherId?: SortOrder
    disciplineId?: SortOrder
  }

  export type ClassesDisciplinesClassIdDisciplineIdCompoundUniqueInput = {
    classId: number
    disciplineId: number
  }

  export type ClassesDisciplinesCountOrderByAggregateInput = {
    classId?: SortOrder
    disciplineId?: SortOrder
  }

  export type ClassesDisciplinesAvgOrderByAggregateInput = {
    classId?: SortOrder
    disciplineId?: SortOrder
  }

  export type ClassesDisciplinesMaxOrderByAggregateInput = {
    classId?: SortOrder
    disciplineId?: SortOrder
  }

  export type ClassesDisciplinesMinOrderByAggregateInput = {
    classId?: SortOrder
    disciplineId?: SortOrder
  }

  export type ClassesDisciplinesSumOrderByAggregateInput = {
    classId?: SortOrder
    disciplineId?: SortOrder
  }

  export type PupilScalarRelationFilter = {
    is?: PupilWhereInput
    isNot?: PupilWhereInput
  }

  export type DisciplinePupilsMarkDisciplineIdPupilIdCompoundUniqueInput = {
    disciplineId: number
    pupilId: number
  }

  export type DisciplinePupilsMarkCountOrderByAggregateInput = {
    disciplineId?: SortOrder
    pupilId?: SortOrder
    mark?: SortOrder
  }

  export type DisciplinePupilsMarkAvgOrderByAggregateInput = {
    disciplineId?: SortOrder
    pupilId?: SortOrder
    mark?: SortOrder
  }

  export type DisciplinePupilsMarkMaxOrderByAggregateInput = {
    disciplineId?: SortOrder
    pupilId?: SortOrder
    mark?: SortOrder
  }

  export type DisciplinePupilsMarkMinOrderByAggregateInput = {
    disciplineId?: SortOrder
    pupilId?: SortOrder
    mark?: SortOrder
  }

  export type DisciplinePupilsMarkSumOrderByAggregateInput = {
    disciplineId?: SortOrder
    pupilId?: SortOrder
    mark?: SortOrder
  }

  export type RoleCreateNestedOneWithoutUsersInput = {
    create?: XOR<RoleCreateWithoutUsersInput, RoleUncheckedCreateWithoutUsersInput>
    connectOrCreate?: RoleCreateOrConnectWithoutUsersInput
    connect?: RoleWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type RoleUpdateOneRequiredWithoutUsersNestedInput = {
    create?: XOR<RoleCreateWithoutUsersInput, RoleUncheckedCreateWithoutUsersInput>
    connectOrCreate?: RoleCreateOrConnectWithoutUsersInput
    upsert?: RoleUpsertWithoutUsersInput
    connect?: RoleWhereUniqueInput
    update?: XOR<XOR<RoleUpdateToOneWithWhereWithoutUsersInput, RoleUpdateWithoutUsersInput>, RoleUncheckedUpdateWithoutUsersInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserCreateNestedManyWithoutRoleInput = {
    create?: XOR<UserCreateWithoutRoleInput, UserUncheckedCreateWithoutRoleInput> | UserCreateWithoutRoleInput[] | UserUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: UserCreateOrConnectWithoutRoleInput | UserCreateOrConnectWithoutRoleInput[]
    createMany?: UserCreateManyRoleInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutRoleInput = {
    create?: XOR<UserCreateWithoutRoleInput, UserUncheckedCreateWithoutRoleInput> | UserCreateWithoutRoleInput[] | UserUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: UserCreateOrConnectWithoutRoleInput | UserCreateOrConnectWithoutRoleInput[]
    createMany?: UserCreateManyRoleInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserUpdateManyWithoutRoleNestedInput = {
    create?: XOR<UserCreateWithoutRoleInput, UserUncheckedCreateWithoutRoleInput> | UserCreateWithoutRoleInput[] | UserUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: UserCreateOrConnectWithoutRoleInput | UserCreateOrConnectWithoutRoleInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutRoleInput | UserUpsertWithWhereUniqueWithoutRoleInput[]
    createMany?: UserCreateManyRoleInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutRoleInput | UserUpdateWithWhereUniqueWithoutRoleInput[]
    updateMany?: UserUpdateManyWithWhereWithoutRoleInput | UserUpdateManyWithWhereWithoutRoleInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutRoleNestedInput = {
    create?: XOR<UserCreateWithoutRoleInput, UserUncheckedCreateWithoutRoleInput> | UserCreateWithoutRoleInput[] | UserUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: UserCreateOrConnectWithoutRoleInput | UserCreateOrConnectWithoutRoleInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutRoleInput | UserUpsertWithWhereUniqueWithoutRoleInput[]
    createMany?: UserCreateManyRoleInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutRoleInput | UserUpdateWithWhereUniqueWithoutRoleInput[]
    updateMany?: UserUpdateManyWithWhereWithoutRoleInput | UserUpdateManyWithWhereWithoutRoleInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type ClassCreateNestedOneWithoutAssignedTeacherInput = {
    create?: XOR<ClassCreateWithoutAssignedTeacherInput, ClassUncheckedCreateWithoutAssignedTeacherInput>
    connectOrCreate?: ClassCreateOrConnectWithoutAssignedTeacherInput
    connect?: ClassWhereUniqueInput
  }

  export type TeachersDisciplinesCreateNestedManyWithoutTeacherInput = {
    create?: XOR<TeachersDisciplinesCreateWithoutTeacherInput, TeachersDisciplinesUncheckedCreateWithoutTeacherInput> | TeachersDisciplinesCreateWithoutTeacherInput[] | TeachersDisciplinesUncheckedCreateWithoutTeacherInput[]
    connectOrCreate?: TeachersDisciplinesCreateOrConnectWithoutTeacherInput | TeachersDisciplinesCreateOrConnectWithoutTeacherInput[]
    createMany?: TeachersDisciplinesCreateManyTeacherInputEnvelope
    connect?: TeachersDisciplinesWhereUniqueInput | TeachersDisciplinesWhereUniqueInput[]
  }

  export type TeachersDisciplinesUncheckedCreateNestedManyWithoutTeacherInput = {
    create?: XOR<TeachersDisciplinesCreateWithoutTeacherInput, TeachersDisciplinesUncheckedCreateWithoutTeacherInput> | TeachersDisciplinesCreateWithoutTeacherInput[] | TeachersDisciplinesUncheckedCreateWithoutTeacherInput[]
    connectOrCreate?: TeachersDisciplinesCreateOrConnectWithoutTeacherInput | TeachersDisciplinesCreateOrConnectWithoutTeacherInput[]
    createMany?: TeachersDisciplinesCreateManyTeacherInputEnvelope
    connect?: TeachersDisciplinesWhereUniqueInput | TeachersDisciplinesWhereUniqueInput[]
  }

  export type ClassUpdateOneWithoutAssignedTeacherNestedInput = {
    create?: XOR<ClassCreateWithoutAssignedTeacherInput, ClassUncheckedCreateWithoutAssignedTeacherInput>
    connectOrCreate?: ClassCreateOrConnectWithoutAssignedTeacherInput
    upsert?: ClassUpsertWithoutAssignedTeacherInput
    disconnect?: ClassWhereInput | boolean
    delete?: ClassWhereInput | boolean
    connect?: ClassWhereUniqueInput
    update?: XOR<XOR<ClassUpdateToOneWithWhereWithoutAssignedTeacherInput, ClassUpdateWithoutAssignedTeacherInput>, ClassUncheckedUpdateWithoutAssignedTeacherInput>
  }

  export type TeachersDisciplinesUpdateManyWithoutTeacherNestedInput = {
    create?: XOR<TeachersDisciplinesCreateWithoutTeacherInput, TeachersDisciplinesUncheckedCreateWithoutTeacherInput> | TeachersDisciplinesCreateWithoutTeacherInput[] | TeachersDisciplinesUncheckedCreateWithoutTeacherInput[]
    connectOrCreate?: TeachersDisciplinesCreateOrConnectWithoutTeacherInput | TeachersDisciplinesCreateOrConnectWithoutTeacherInput[]
    upsert?: TeachersDisciplinesUpsertWithWhereUniqueWithoutTeacherInput | TeachersDisciplinesUpsertWithWhereUniqueWithoutTeacherInput[]
    createMany?: TeachersDisciplinesCreateManyTeacherInputEnvelope
    set?: TeachersDisciplinesWhereUniqueInput | TeachersDisciplinesWhereUniqueInput[]
    disconnect?: TeachersDisciplinesWhereUniqueInput | TeachersDisciplinesWhereUniqueInput[]
    delete?: TeachersDisciplinesWhereUniqueInput | TeachersDisciplinesWhereUniqueInput[]
    connect?: TeachersDisciplinesWhereUniqueInput | TeachersDisciplinesWhereUniqueInput[]
    update?: TeachersDisciplinesUpdateWithWhereUniqueWithoutTeacherInput | TeachersDisciplinesUpdateWithWhereUniqueWithoutTeacherInput[]
    updateMany?: TeachersDisciplinesUpdateManyWithWhereWithoutTeacherInput | TeachersDisciplinesUpdateManyWithWhereWithoutTeacherInput[]
    deleteMany?: TeachersDisciplinesScalarWhereInput | TeachersDisciplinesScalarWhereInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type TeachersDisciplinesUncheckedUpdateManyWithoutTeacherNestedInput = {
    create?: XOR<TeachersDisciplinesCreateWithoutTeacherInput, TeachersDisciplinesUncheckedCreateWithoutTeacherInput> | TeachersDisciplinesCreateWithoutTeacherInput[] | TeachersDisciplinesUncheckedCreateWithoutTeacherInput[]
    connectOrCreate?: TeachersDisciplinesCreateOrConnectWithoutTeacherInput | TeachersDisciplinesCreateOrConnectWithoutTeacherInput[]
    upsert?: TeachersDisciplinesUpsertWithWhereUniqueWithoutTeacherInput | TeachersDisciplinesUpsertWithWhereUniqueWithoutTeacherInput[]
    createMany?: TeachersDisciplinesCreateManyTeacherInputEnvelope
    set?: TeachersDisciplinesWhereUniqueInput | TeachersDisciplinesWhereUniqueInput[]
    disconnect?: TeachersDisciplinesWhereUniqueInput | TeachersDisciplinesWhereUniqueInput[]
    delete?: TeachersDisciplinesWhereUniqueInput | TeachersDisciplinesWhereUniqueInput[]
    connect?: TeachersDisciplinesWhereUniqueInput | TeachersDisciplinesWhereUniqueInput[]
    update?: TeachersDisciplinesUpdateWithWhereUniqueWithoutTeacherInput | TeachersDisciplinesUpdateWithWhereUniqueWithoutTeacherInput[]
    updateMany?: TeachersDisciplinesUpdateManyWithWhereWithoutTeacherInput | TeachersDisciplinesUpdateManyWithWhereWithoutTeacherInput[]
    deleteMany?: TeachersDisciplinesScalarWhereInput | TeachersDisciplinesScalarWhereInput[]
  }

  export type TeachersDisciplinesCreateNestedManyWithoutDisciplineInput = {
    create?: XOR<TeachersDisciplinesCreateWithoutDisciplineInput, TeachersDisciplinesUncheckedCreateWithoutDisciplineInput> | TeachersDisciplinesCreateWithoutDisciplineInput[] | TeachersDisciplinesUncheckedCreateWithoutDisciplineInput[]
    connectOrCreate?: TeachersDisciplinesCreateOrConnectWithoutDisciplineInput | TeachersDisciplinesCreateOrConnectWithoutDisciplineInput[]
    createMany?: TeachersDisciplinesCreateManyDisciplineInputEnvelope
    connect?: TeachersDisciplinesWhereUniqueInput | TeachersDisciplinesWhereUniqueInput[]
  }

  export type ClassesDisciplinesCreateNestedManyWithoutDisciplineInput = {
    create?: XOR<ClassesDisciplinesCreateWithoutDisciplineInput, ClassesDisciplinesUncheckedCreateWithoutDisciplineInput> | ClassesDisciplinesCreateWithoutDisciplineInput[] | ClassesDisciplinesUncheckedCreateWithoutDisciplineInput[]
    connectOrCreate?: ClassesDisciplinesCreateOrConnectWithoutDisciplineInput | ClassesDisciplinesCreateOrConnectWithoutDisciplineInput[]
    createMany?: ClassesDisciplinesCreateManyDisciplineInputEnvelope
    connect?: ClassesDisciplinesWhereUniqueInput | ClassesDisciplinesWhereUniqueInput[]
  }

  export type DisciplinePupilsMarkCreateNestedManyWithoutDisciplineInput = {
    create?: XOR<DisciplinePupilsMarkCreateWithoutDisciplineInput, DisciplinePupilsMarkUncheckedCreateWithoutDisciplineInput> | DisciplinePupilsMarkCreateWithoutDisciplineInput[] | DisciplinePupilsMarkUncheckedCreateWithoutDisciplineInput[]
    connectOrCreate?: DisciplinePupilsMarkCreateOrConnectWithoutDisciplineInput | DisciplinePupilsMarkCreateOrConnectWithoutDisciplineInput[]
    createMany?: DisciplinePupilsMarkCreateManyDisciplineInputEnvelope
    connect?: DisciplinePupilsMarkWhereUniqueInput | DisciplinePupilsMarkWhereUniqueInput[]
  }

  export type TeachersDisciplinesUncheckedCreateNestedManyWithoutDisciplineInput = {
    create?: XOR<TeachersDisciplinesCreateWithoutDisciplineInput, TeachersDisciplinesUncheckedCreateWithoutDisciplineInput> | TeachersDisciplinesCreateWithoutDisciplineInput[] | TeachersDisciplinesUncheckedCreateWithoutDisciplineInput[]
    connectOrCreate?: TeachersDisciplinesCreateOrConnectWithoutDisciplineInput | TeachersDisciplinesCreateOrConnectWithoutDisciplineInput[]
    createMany?: TeachersDisciplinesCreateManyDisciplineInputEnvelope
    connect?: TeachersDisciplinesWhereUniqueInput | TeachersDisciplinesWhereUniqueInput[]
  }

  export type ClassesDisciplinesUncheckedCreateNestedManyWithoutDisciplineInput = {
    create?: XOR<ClassesDisciplinesCreateWithoutDisciplineInput, ClassesDisciplinesUncheckedCreateWithoutDisciplineInput> | ClassesDisciplinesCreateWithoutDisciplineInput[] | ClassesDisciplinesUncheckedCreateWithoutDisciplineInput[]
    connectOrCreate?: ClassesDisciplinesCreateOrConnectWithoutDisciplineInput | ClassesDisciplinesCreateOrConnectWithoutDisciplineInput[]
    createMany?: ClassesDisciplinesCreateManyDisciplineInputEnvelope
    connect?: ClassesDisciplinesWhereUniqueInput | ClassesDisciplinesWhereUniqueInput[]
  }

  export type DisciplinePupilsMarkUncheckedCreateNestedManyWithoutDisciplineInput = {
    create?: XOR<DisciplinePupilsMarkCreateWithoutDisciplineInput, DisciplinePupilsMarkUncheckedCreateWithoutDisciplineInput> | DisciplinePupilsMarkCreateWithoutDisciplineInput[] | DisciplinePupilsMarkUncheckedCreateWithoutDisciplineInput[]
    connectOrCreate?: DisciplinePupilsMarkCreateOrConnectWithoutDisciplineInput | DisciplinePupilsMarkCreateOrConnectWithoutDisciplineInput[]
    createMany?: DisciplinePupilsMarkCreateManyDisciplineInputEnvelope
    connect?: DisciplinePupilsMarkWhereUniqueInput | DisciplinePupilsMarkWhereUniqueInput[]
  }

  export type TeachersDisciplinesUpdateManyWithoutDisciplineNestedInput = {
    create?: XOR<TeachersDisciplinesCreateWithoutDisciplineInput, TeachersDisciplinesUncheckedCreateWithoutDisciplineInput> | TeachersDisciplinesCreateWithoutDisciplineInput[] | TeachersDisciplinesUncheckedCreateWithoutDisciplineInput[]
    connectOrCreate?: TeachersDisciplinesCreateOrConnectWithoutDisciplineInput | TeachersDisciplinesCreateOrConnectWithoutDisciplineInput[]
    upsert?: TeachersDisciplinesUpsertWithWhereUniqueWithoutDisciplineInput | TeachersDisciplinesUpsertWithWhereUniqueWithoutDisciplineInput[]
    createMany?: TeachersDisciplinesCreateManyDisciplineInputEnvelope
    set?: TeachersDisciplinesWhereUniqueInput | TeachersDisciplinesWhereUniqueInput[]
    disconnect?: TeachersDisciplinesWhereUniqueInput | TeachersDisciplinesWhereUniqueInput[]
    delete?: TeachersDisciplinesWhereUniqueInput | TeachersDisciplinesWhereUniqueInput[]
    connect?: TeachersDisciplinesWhereUniqueInput | TeachersDisciplinesWhereUniqueInput[]
    update?: TeachersDisciplinesUpdateWithWhereUniqueWithoutDisciplineInput | TeachersDisciplinesUpdateWithWhereUniqueWithoutDisciplineInput[]
    updateMany?: TeachersDisciplinesUpdateManyWithWhereWithoutDisciplineInput | TeachersDisciplinesUpdateManyWithWhereWithoutDisciplineInput[]
    deleteMany?: TeachersDisciplinesScalarWhereInput | TeachersDisciplinesScalarWhereInput[]
  }

  export type ClassesDisciplinesUpdateManyWithoutDisciplineNestedInput = {
    create?: XOR<ClassesDisciplinesCreateWithoutDisciplineInput, ClassesDisciplinesUncheckedCreateWithoutDisciplineInput> | ClassesDisciplinesCreateWithoutDisciplineInput[] | ClassesDisciplinesUncheckedCreateWithoutDisciplineInput[]
    connectOrCreate?: ClassesDisciplinesCreateOrConnectWithoutDisciplineInput | ClassesDisciplinesCreateOrConnectWithoutDisciplineInput[]
    upsert?: ClassesDisciplinesUpsertWithWhereUniqueWithoutDisciplineInput | ClassesDisciplinesUpsertWithWhereUniqueWithoutDisciplineInput[]
    createMany?: ClassesDisciplinesCreateManyDisciplineInputEnvelope
    set?: ClassesDisciplinesWhereUniqueInput | ClassesDisciplinesWhereUniqueInput[]
    disconnect?: ClassesDisciplinesWhereUniqueInput | ClassesDisciplinesWhereUniqueInput[]
    delete?: ClassesDisciplinesWhereUniqueInput | ClassesDisciplinesWhereUniqueInput[]
    connect?: ClassesDisciplinesWhereUniqueInput | ClassesDisciplinesWhereUniqueInput[]
    update?: ClassesDisciplinesUpdateWithWhereUniqueWithoutDisciplineInput | ClassesDisciplinesUpdateWithWhereUniqueWithoutDisciplineInput[]
    updateMany?: ClassesDisciplinesUpdateManyWithWhereWithoutDisciplineInput | ClassesDisciplinesUpdateManyWithWhereWithoutDisciplineInput[]
    deleteMany?: ClassesDisciplinesScalarWhereInput | ClassesDisciplinesScalarWhereInput[]
  }

  export type DisciplinePupilsMarkUpdateManyWithoutDisciplineNestedInput = {
    create?: XOR<DisciplinePupilsMarkCreateWithoutDisciplineInput, DisciplinePupilsMarkUncheckedCreateWithoutDisciplineInput> | DisciplinePupilsMarkCreateWithoutDisciplineInput[] | DisciplinePupilsMarkUncheckedCreateWithoutDisciplineInput[]
    connectOrCreate?: DisciplinePupilsMarkCreateOrConnectWithoutDisciplineInput | DisciplinePupilsMarkCreateOrConnectWithoutDisciplineInput[]
    upsert?: DisciplinePupilsMarkUpsertWithWhereUniqueWithoutDisciplineInput | DisciplinePupilsMarkUpsertWithWhereUniqueWithoutDisciplineInput[]
    createMany?: DisciplinePupilsMarkCreateManyDisciplineInputEnvelope
    set?: DisciplinePupilsMarkWhereUniqueInput | DisciplinePupilsMarkWhereUniqueInput[]
    disconnect?: DisciplinePupilsMarkWhereUniqueInput | DisciplinePupilsMarkWhereUniqueInput[]
    delete?: DisciplinePupilsMarkWhereUniqueInput | DisciplinePupilsMarkWhereUniqueInput[]
    connect?: DisciplinePupilsMarkWhereUniqueInput | DisciplinePupilsMarkWhereUniqueInput[]
    update?: DisciplinePupilsMarkUpdateWithWhereUniqueWithoutDisciplineInput | DisciplinePupilsMarkUpdateWithWhereUniqueWithoutDisciplineInput[]
    updateMany?: DisciplinePupilsMarkUpdateManyWithWhereWithoutDisciplineInput | DisciplinePupilsMarkUpdateManyWithWhereWithoutDisciplineInput[]
    deleteMany?: DisciplinePupilsMarkScalarWhereInput | DisciplinePupilsMarkScalarWhereInput[]
  }

  export type TeachersDisciplinesUncheckedUpdateManyWithoutDisciplineNestedInput = {
    create?: XOR<TeachersDisciplinesCreateWithoutDisciplineInput, TeachersDisciplinesUncheckedCreateWithoutDisciplineInput> | TeachersDisciplinesCreateWithoutDisciplineInput[] | TeachersDisciplinesUncheckedCreateWithoutDisciplineInput[]
    connectOrCreate?: TeachersDisciplinesCreateOrConnectWithoutDisciplineInput | TeachersDisciplinesCreateOrConnectWithoutDisciplineInput[]
    upsert?: TeachersDisciplinesUpsertWithWhereUniqueWithoutDisciplineInput | TeachersDisciplinesUpsertWithWhereUniqueWithoutDisciplineInput[]
    createMany?: TeachersDisciplinesCreateManyDisciplineInputEnvelope
    set?: TeachersDisciplinesWhereUniqueInput | TeachersDisciplinesWhereUniqueInput[]
    disconnect?: TeachersDisciplinesWhereUniqueInput | TeachersDisciplinesWhereUniqueInput[]
    delete?: TeachersDisciplinesWhereUniqueInput | TeachersDisciplinesWhereUniqueInput[]
    connect?: TeachersDisciplinesWhereUniqueInput | TeachersDisciplinesWhereUniqueInput[]
    update?: TeachersDisciplinesUpdateWithWhereUniqueWithoutDisciplineInput | TeachersDisciplinesUpdateWithWhereUniqueWithoutDisciplineInput[]
    updateMany?: TeachersDisciplinesUpdateManyWithWhereWithoutDisciplineInput | TeachersDisciplinesUpdateManyWithWhereWithoutDisciplineInput[]
    deleteMany?: TeachersDisciplinesScalarWhereInput | TeachersDisciplinesScalarWhereInput[]
  }

  export type ClassesDisciplinesUncheckedUpdateManyWithoutDisciplineNestedInput = {
    create?: XOR<ClassesDisciplinesCreateWithoutDisciplineInput, ClassesDisciplinesUncheckedCreateWithoutDisciplineInput> | ClassesDisciplinesCreateWithoutDisciplineInput[] | ClassesDisciplinesUncheckedCreateWithoutDisciplineInput[]
    connectOrCreate?: ClassesDisciplinesCreateOrConnectWithoutDisciplineInput | ClassesDisciplinesCreateOrConnectWithoutDisciplineInput[]
    upsert?: ClassesDisciplinesUpsertWithWhereUniqueWithoutDisciplineInput | ClassesDisciplinesUpsertWithWhereUniqueWithoutDisciplineInput[]
    createMany?: ClassesDisciplinesCreateManyDisciplineInputEnvelope
    set?: ClassesDisciplinesWhereUniqueInput | ClassesDisciplinesWhereUniqueInput[]
    disconnect?: ClassesDisciplinesWhereUniqueInput | ClassesDisciplinesWhereUniqueInput[]
    delete?: ClassesDisciplinesWhereUniqueInput | ClassesDisciplinesWhereUniqueInput[]
    connect?: ClassesDisciplinesWhereUniqueInput | ClassesDisciplinesWhereUniqueInput[]
    update?: ClassesDisciplinesUpdateWithWhereUniqueWithoutDisciplineInput | ClassesDisciplinesUpdateWithWhereUniqueWithoutDisciplineInput[]
    updateMany?: ClassesDisciplinesUpdateManyWithWhereWithoutDisciplineInput | ClassesDisciplinesUpdateManyWithWhereWithoutDisciplineInput[]
    deleteMany?: ClassesDisciplinesScalarWhereInput | ClassesDisciplinesScalarWhereInput[]
  }

  export type DisciplinePupilsMarkUncheckedUpdateManyWithoutDisciplineNestedInput = {
    create?: XOR<DisciplinePupilsMarkCreateWithoutDisciplineInput, DisciplinePupilsMarkUncheckedCreateWithoutDisciplineInput> | DisciplinePupilsMarkCreateWithoutDisciplineInput[] | DisciplinePupilsMarkUncheckedCreateWithoutDisciplineInput[]
    connectOrCreate?: DisciplinePupilsMarkCreateOrConnectWithoutDisciplineInput | DisciplinePupilsMarkCreateOrConnectWithoutDisciplineInput[]
    upsert?: DisciplinePupilsMarkUpsertWithWhereUniqueWithoutDisciplineInput | DisciplinePupilsMarkUpsertWithWhereUniqueWithoutDisciplineInput[]
    createMany?: DisciplinePupilsMarkCreateManyDisciplineInputEnvelope
    set?: DisciplinePupilsMarkWhereUniqueInput | DisciplinePupilsMarkWhereUniqueInput[]
    disconnect?: DisciplinePupilsMarkWhereUniqueInput | DisciplinePupilsMarkWhereUniqueInput[]
    delete?: DisciplinePupilsMarkWhereUniqueInput | DisciplinePupilsMarkWhereUniqueInput[]
    connect?: DisciplinePupilsMarkWhereUniqueInput | DisciplinePupilsMarkWhereUniqueInput[]
    update?: DisciplinePupilsMarkUpdateWithWhereUniqueWithoutDisciplineInput | DisciplinePupilsMarkUpdateWithWhereUniqueWithoutDisciplineInput[]
    updateMany?: DisciplinePupilsMarkUpdateManyWithWhereWithoutDisciplineInput | DisciplinePupilsMarkUpdateManyWithWhereWithoutDisciplineInput[]
    deleteMany?: DisciplinePupilsMarkScalarWhereInput | DisciplinePupilsMarkScalarWhereInput[]
  }

  export type PupilCreateNestedManyWithoutClassInput = {
    create?: XOR<PupilCreateWithoutClassInput, PupilUncheckedCreateWithoutClassInput> | PupilCreateWithoutClassInput[] | PupilUncheckedCreateWithoutClassInput[]
    connectOrCreate?: PupilCreateOrConnectWithoutClassInput | PupilCreateOrConnectWithoutClassInput[]
    createMany?: PupilCreateManyClassInputEnvelope
    connect?: PupilWhereUniqueInput | PupilWhereUniqueInput[]
  }

  export type ClassesDisciplinesCreateNestedManyWithoutClassInput = {
    create?: XOR<ClassesDisciplinesCreateWithoutClassInput, ClassesDisciplinesUncheckedCreateWithoutClassInput> | ClassesDisciplinesCreateWithoutClassInput[] | ClassesDisciplinesUncheckedCreateWithoutClassInput[]
    connectOrCreate?: ClassesDisciplinesCreateOrConnectWithoutClassInput | ClassesDisciplinesCreateOrConnectWithoutClassInput[]
    createMany?: ClassesDisciplinesCreateManyClassInputEnvelope
    connect?: ClassesDisciplinesWhereUniqueInput | ClassesDisciplinesWhereUniqueInput[]
  }

  export type TeacherCreateNestedOneWithoutClassInput = {
    create?: XOR<TeacherCreateWithoutClassInput, TeacherUncheckedCreateWithoutClassInput>
    connectOrCreate?: TeacherCreateOrConnectWithoutClassInput
    connect?: TeacherWhereUniqueInput
  }

  export type PupilUncheckedCreateNestedManyWithoutClassInput = {
    create?: XOR<PupilCreateWithoutClassInput, PupilUncheckedCreateWithoutClassInput> | PupilCreateWithoutClassInput[] | PupilUncheckedCreateWithoutClassInput[]
    connectOrCreate?: PupilCreateOrConnectWithoutClassInput | PupilCreateOrConnectWithoutClassInput[]
    createMany?: PupilCreateManyClassInputEnvelope
    connect?: PupilWhereUniqueInput | PupilWhereUniqueInput[]
  }

  export type ClassesDisciplinesUncheckedCreateNestedManyWithoutClassInput = {
    create?: XOR<ClassesDisciplinesCreateWithoutClassInput, ClassesDisciplinesUncheckedCreateWithoutClassInput> | ClassesDisciplinesCreateWithoutClassInput[] | ClassesDisciplinesUncheckedCreateWithoutClassInput[]
    connectOrCreate?: ClassesDisciplinesCreateOrConnectWithoutClassInput | ClassesDisciplinesCreateOrConnectWithoutClassInput[]
    createMany?: ClassesDisciplinesCreateManyClassInputEnvelope
    connect?: ClassesDisciplinesWhereUniqueInput | ClassesDisciplinesWhereUniqueInput[]
  }

  export type TeacherUncheckedCreateNestedOneWithoutClassInput = {
    create?: XOR<TeacherCreateWithoutClassInput, TeacherUncheckedCreateWithoutClassInput>
    connectOrCreate?: TeacherCreateOrConnectWithoutClassInput
    connect?: TeacherWhereUniqueInput
  }

  export type PupilUpdateManyWithoutClassNestedInput = {
    create?: XOR<PupilCreateWithoutClassInput, PupilUncheckedCreateWithoutClassInput> | PupilCreateWithoutClassInput[] | PupilUncheckedCreateWithoutClassInput[]
    connectOrCreate?: PupilCreateOrConnectWithoutClassInput | PupilCreateOrConnectWithoutClassInput[]
    upsert?: PupilUpsertWithWhereUniqueWithoutClassInput | PupilUpsertWithWhereUniqueWithoutClassInput[]
    createMany?: PupilCreateManyClassInputEnvelope
    set?: PupilWhereUniqueInput | PupilWhereUniqueInput[]
    disconnect?: PupilWhereUniqueInput | PupilWhereUniqueInput[]
    delete?: PupilWhereUniqueInput | PupilWhereUniqueInput[]
    connect?: PupilWhereUniqueInput | PupilWhereUniqueInput[]
    update?: PupilUpdateWithWhereUniqueWithoutClassInput | PupilUpdateWithWhereUniqueWithoutClassInput[]
    updateMany?: PupilUpdateManyWithWhereWithoutClassInput | PupilUpdateManyWithWhereWithoutClassInput[]
    deleteMany?: PupilScalarWhereInput | PupilScalarWhereInput[]
  }

  export type ClassesDisciplinesUpdateManyWithoutClassNestedInput = {
    create?: XOR<ClassesDisciplinesCreateWithoutClassInput, ClassesDisciplinesUncheckedCreateWithoutClassInput> | ClassesDisciplinesCreateWithoutClassInput[] | ClassesDisciplinesUncheckedCreateWithoutClassInput[]
    connectOrCreate?: ClassesDisciplinesCreateOrConnectWithoutClassInput | ClassesDisciplinesCreateOrConnectWithoutClassInput[]
    upsert?: ClassesDisciplinesUpsertWithWhereUniqueWithoutClassInput | ClassesDisciplinesUpsertWithWhereUniqueWithoutClassInput[]
    createMany?: ClassesDisciplinesCreateManyClassInputEnvelope
    set?: ClassesDisciplinesWhereUniqueInput | ClassesDisciplinesWhereUniqueInput[]
    disconnect?: ClassesDisciplinesWhereUniqueInput | ClassesDisciplinesWhereUniqueInput[]
    delete?: ClassesDisciplinesWhereUniqueInput | ClassesDisciplinesWhereUniqueInput[]
    connect?: ClassesDisciplinesWhereUniqueInput | ClassesDisciplinesWhereUniqueInput[]
    update?: ClassesDisciplinesUpdateWithWhereUniqueWithoutClassInput | ClassesDisciplinesUpdateWithWhereUniqueWithoutClassInput[]
    updateMany?: ClassesDisciplinesUpdateManyWithWhereWithoutClassInput | ClassesDisciplinesUpdateManyWithWhereWithoutClassInput[]
    deleteMany?: ClassesDisciplinesScalarWhereInput | ClassesDisciplinesScalarWhereInput[]
  }

  export type TeacherUpdateOneWithoutClassNestedInput = {
    create?: XOR<TeacherCreateWithoutClassInput, TeacherUncheckedCreateWithoutClassInput>
    connectOrCreate?: TeacherCreateOrConnectWithoutClassInput
    upsert?: TeacherUpsertWithoutClassInput
    disconnect?: TeacherWhereInput | boolean
    delete?: TeacherWhereInput | boolean
    connect?: TeacherWhereUniqueInput
    update?: XOR<XOR<TeacherUpdateToOneWithWhereWithoutClassInput, TeacherUpdateWithoutClassInput>, TeacherUncheckedUpdateWithoutClassInput>
  }

  export type PupilUncheckedUpdateManyWithoutClassNestedInput = {
    create?: XOR<PupilCreateWithoutClassInput, PupilUncheckedCreateWithoutClassInput> | PupilCreateWithoutClassInput[] | PupilUncheckedCreateWithoutClassInput[]
    connectOrCreate?: PupilCreateOrConnectWithoutClassInput | PupilCreateOrConnectWithoutClassInput[]
    upsert?: PupilUpsertWithWhereUniqueWithoutClassInput | PupilUpsertWithWhereUniqueWithoutClassInput[]
    createMany?: PupilCreateManyClassInputEnvelope
    set?: PupilWhereUniqueInput | PupilWhereUniqueInput[]
    disconnect?: PupilWhereUniqueInput | PupilWhereUniqueInput[]
    delete?: PupilWhereUniqueInput | PupilWhereUniqueInput[]
    connect?: PupilWhereUniqueInput | PupilWhereUniqueInput[]
    update?: PupilUpdateWithWhereUniqueWithoutClassInput | PupilUpdateWithWhereUniqueWithoutClassInput[]
    updateMany?: PupilUpdateManyWithWhereWithoutClassInput | PupilUpdateManyWithWhereWithoutClassInput[]
    deleteMany?: PupilScalarWhereInput | PupilScalarWhereInput[]
  }

  export type ClassesDisciplinesUncheckedUpdateManyWithoutClassNestedInput = {
    create?: XOR<ClassesDisciplinesCreateWithoutClassInput, ClassesDisciplinesUncheckedCreateWithoutClassInput> | ClassesDisciplinesCreateWithoutClassInput[] | ClassesDisciplinesUncheckedCreateWithoutClassInput[]
    connectOrCreate?: ClassesDisciplinesCreateOrConnectWithoutClassInput | ClassesDisciplinesCreateOrConnectWithoutClassInput[]
    upsert?: ClassesDisciplinesUpsertWithWhereUniqueWithoutClassInput | ClassesDisciplinesUpsertWithWhereUniqueWithoutClassInput[]
    createMany?: ClassesDisciplinesCreateManyClassInputEnvelope
    set?: ClassesDisciplinesWhereUniqueInput | ClassesDisciplinesWhereUniqueInput[]
    disconnect?: ClassesDisciplinesWhereUniqueInput | ClassesDisciplinesWhereUniqueInput[]
    delete?: ClassesDisciplinesWhereUniqueInput | ClassesDisciplinesWhereUniqueInput[]
    connect?: ClassesDisciplinesWhereUniqueInput | ClassesDisciplinesWhereUniqueInput[]
    update?: ClassesDisciplinesUpdateWithWhereUniqueWithoutClassInput | ClassesDisciplinesUpdateWithWhereUniqueWithoutClassInput[]
    updateMany?: ClassesDisciplinesUpdateManyWithWhereWithoutClassInput | ClassesDisciplinesUpdateManyWithWhereWithoutClassInput[]
    deleteMany?: ClassesDisciplinesScalarWhereInput | ClassesDisciplinesScalarWhereInput[]
  }

  export type TeacherUncheckedUpdateOneWithoutClassNestedInput = {
    create?: XOR<TeacherCreateWithoutClassInput, TeacherUncheckedCreateWithoutClassInput>
    connectOrCreate?: TeacherCreateOrConnectWithoutClassInput
    upsert?: TeacherUpsertWithoutClassInput
    disconnect?: TeacherWhereInput | boolean
    delete?: TeacherWhereInput | boolean
    connect?: TeacherWhereUniqueInput
    update?: XOR<XOR<TeacherUpdateToOneWithWhereWithoutClassInput, TeacherUpdateWithoutClassInput>, TeacherUncheckedUpdateWithoutClassInput>
  }

  export type ClassCreateNestedOneWithoutPupilsInput = {
    create?: XOR<ClassCreateWithoutPupilsInput, ClassUncheckedCreateWithoutPupilsInput>
    connectOrCreate?: ClassCreateOrConnectWithoutPupilsInput
    connect?: ClassWhereUniqueInput
  }

  export type DisciplinePupilsMarkCreateNestedManyWithoutPupilInput = {
    create?: XOR<DisciplinePupilsMarkCreateWithoutPupilInput, DisciplinePupilsMarkUncheckedCreateWithoutPupilInput> | DisciplinePupilsMarkCreateWithoutPupilInput[] | DisciplinePupilsMarkUncheckedCreateWithoutPupilInput[]
    connectOrCreate?: DisciplinePupilsMarkCreateOrConnectWithoutPupilInput | DisciplinePupilsMarkCreateOrConnectWithoutPupilInput[]
    createMany?: DisciplinePupilsMarkCreateManyPupilInputEnvelope
    connect?: DisciplinePupilsMarkWhereUniqueInput | DisciplinePupilsMarkWhereUniqueInput[]
  }

  export type DisciplinePupilsMarkUncheckedCreateNestedManyWithoutPupilInput = {
    create?: XOR<DisciplinePupilsMarkCreateWithoutPupilInput, DisciplinePupilsMarkUncheckedCreateWithoutPupilInput> | DisciplinePupilsMarkCreateWithoutPupilInput[] | DisciplinePupilsMarkUncheckedCreateWithoutPupilInput[]
    connectOrCreate?: DisciplinePupilsMarkCreateOrConnectWithoutPupilInput | DisciplinePupilsMarkCreateOrConnectWithoutPupilInput[]
    createMany?: DisciplinePupilsMarkCreateManyPupilInputEnvelope
    connect?: DisciplinePupilsMarkWhereUniqueInput | DisciplinePupilsMarkWhereUniqueInput[]
  }

  export type ClassUpdateOneRequiredWithoutPupilsNestedInput = {
    create?: XOR<ClassCreateWithoutPupilsInput, ClassUncheckedCreateWithoutPupilsInput>
    connectOrCreate?: ClassCreateOrConnectWithoutPupilsInput
    upsert?: ClassUpsertWithoutPupilsInput
    connect?: ClassWhereUniqueInput
    update?: XOR<XOR<ClassUpdateToOneWithWhereWithoutPupilsInput, ClassUpdateWithoutPupilsInput>, ClassUncheckedUpdateWithoutPupilsInput>
  }

  export type DisciplinePupilsMarkUpdateManyWithoutPupilNestedInput = {
    create?: XOR<DisciplinePupilsMarkCreateWithoutPupilInput, DisciplinePupilsMarkUncheckedCreateWithoutPupilInput> | DisciplinePupilsMarkCreateWithoutPupilInput[] | DisciplinePupilsMarkUncheckedCreateWithoutPupilInput[]
    connectOrCreate?: DisciplinePupilsMarkCreateOrConnectWithoutPupilInput | DisciplinePupilsMarkCreateOrConnectWithoutPupilInput[]
    upsert?: DisciplinePupilsMarkUpsertWithWhereUniqueWithoutPupilInput | DisciplinePupilsMarkUpsertWithWhereUniqueWithoutPupilInput[]
    createMany?: DisciplinePupilsMarkCreateManyPupilInputEnvelope
    set?: DisciplinePupilsMarkWhereUniqueInput | DisciplinePupilsMarkWhereUniqueInput[]
    disconnect?: DisciplinePupilsMarkWhereUniqueInput | DisciplinePupilsMarkWhereUniqueInput[]
    delete?: DisciplinePupilsMarkWhereUniqueInput | DisciplinePupilsMarkWhereUniqueInput[]
    connect?: DisciplinePupilsMarkWhereUniqueInput | DisciplinePupilsMarkWhereUniqueInput[]
    update?: DisciplinePupilsMarkUpdateWithWhereUniqueWithoutPupilInput | DisciplinePupilsMarkUpdateWithWhereUniqueWithoutPupilInput[]
    updateMany?: DisciplinePupilsMarkUpdateManyWithWhereWithoutPupilInput | DisciplinePupilsMarkUpdateManyWithWhereWithoutPupilInput[]
    deleteMany?: DisciplinePupilsMarkScalarWhereInput | DisciplinePupilsMarkScalarWhereInput[]
  }

  export type DisciplinePupilsMarkUncheckedUpdateManyWithoutPupilNestedInput = {
    create?: XOR<DisciplinePupilsMarkCreateWithoutPupilInput, DisciplinePupilsMarkUncheckedCreateWithoutPupilInput> | DisciplinePupilsMarkCreateWithoutPupilInput[] | DisciplinePupilsMarkUncheckedCreateWithoutPupilInput[]
    connectOrCreate?: DisciplinePupilsMarkCreateOrConnectWithoutPupilInput | DisciplinePupilsMarkCreateOrConnectWithoutPupilInput[]
    upsert?: DisciplinePupilsMarkUpsertWithWhereUniqueWithoutPupilInput | DisciplinePupilsMarkUpsertWithWhereUniqueWithoutPupilInput[]
    createMany?: DisciplinePupilsMarkCreateManyPupilInputEnvelope
    set?: DisciplinePupilsMarkWhereUniqueInput | DisciplinePupilsMarkWhereUniqueInput[]
    disconnect?: DisciplinePupilsMarkWhereUniqueInput | DisciplinePupilsMarkWhereUniqueInput[]
    delete?: DisciplinePupilsMarkWhereUniqueInput | DisciplinePupilsMarkWhereUniqueInput[]
    connect?: DisciplinePupilsMarkWhereUniqueInput | DisciplinePupilsMarkWhereUniqueInput[]
    update?: DisciplinePupilsMarkUpdateWithWhereUniqueWithoutPupilInput | DisciplinePupilsMarkUpdateWithWhereUniqueWithoutPupilInput[]
    updateMany?: DisciplinePupilsMarkUpdateManyWithWhereWithoutPupilInput | DisciplinePupilsMarkUpdateManyWithWhereWithoutPupilInput[]
    deleteMany?: DisciplinePupilsMarkScalarWhereInput | DisciplinePupilsMarkScalarWhereInput[]
  }

  export type TeacherCreateNestedOneWithoutDisciplinesInput = {
    create?: XOR<TeacherCreateWithoutDisciplinesInput, TeacherUncheckedCreateWithoutDisciplinesInput>
    connectOrCreate?: TeacherCreateOrConnectWithoutDisciplinesInput
    connect?: TeacherWhereUniqueInput
  }

  export type DisciplineCreateNestedOneWithoutTeachersInput = {
    create?: XOR<DisciplineCreateWithoutTeachersInput, DisciplineUncheckedCreateWithoutTeachersInput>
    connectOrCreate?: DisciplineCreateOrConnectWithoutTeachersInput
    connect?: DisciplineWhereUniqueInput
  }

  export type TeacherUpdateOneRequiredWithoutDisciplinesNestedInput = {
    create?: XOR<TeacherCreateWithoutDisciplinesInput, TeacherUncheckedCreateWithoutDisciplinesInput>
    connectOrCreate?: TeacherCreateOrConnectWithoutDisciplinesInput
    upsert?: TeacherUpsertWithoutDisciplinesInput
    connect?: TeacherWhereUniqueInput
    update?: XOR<XOR<TeacherUpdateToOneWithWhereWithoutDisciplinesInput, TeacherUpdateWithoutDisciplinesInput>, TeacherUncheckedUpdateWithoutDisciplinesInput>
  }

  export type DisciplineUpdateOneRequiredWithoutTeachersNestedInput = {
    create?: XOR<DisciplineCreateWithoutTeachersInput, DisciplineUncheckedCreateWithoutTeachersInput>
    connectOrCreate?: DisciplineCreateOrConnectWithoutTeachersInput
    upsert?: DisciplineUpsertWithoutTeachersInput
    connect?: DisciplineWhereUniqueInput
    update?: XOR<XOR<DisciplineUpdateToOneWithWhereWithoutTeachersInput, DisciplineUpdateWithoutTeachersInput>, DisciplineUncheckedUpdateWithoutTeachersInput>
  }

  export type ClassCreateNestedOneWithoutDisciplinesInput = {
    create?: XOR<ClassCreateWithoutDisciplinesInput, ClassUncheckedCreateWithoutDisciplinesInput>
    connectOrCreate?: ClassCreateOrConnectWithoutDisciplinesInput
    connect?: ClassWhereUniqueInput
  }

  export type DisciplineCreateNestedOneWithoutClassesInput = {
    create?: XOR<DisciplineCreateWithoutClassesInput, DisciplineUncheckedCreateWithoutClassesInput>
    connectOrCreate?: DisciplineCreateOrConnectWithoutClassesInput
    connect?: DisciplineWhereUniqueInput
  }

  export type ClassUpdateOneRequiredWithoutDisciplinesNestedInput = {
    create?: XOR<ClassCreateWithoutDisciplinesInput, ClassUncheckedCreateWithoutDisciplinesInput>
    connectOrCreate?: ClassCreateOrConnectWithoutDisciplinesInput
    upsert?: ClassUpsertWithoutDisciplinesInput
    connect?: ClassWhereUniqueInput
    update?: XOR<XOR<ClassUpdateToOneWithWhereWithoutDisciplinesInput, ClassUpdateWithoutDisciplinesInput>, ClassUncheckedUpdateWithoutDisciplinesInput>
  }

  export type DisciplineUpdateOneRequiredWithoutClassesNestedInput = {
    create?: XOR<DisciplineCreateWithoutClassesInput, DisciplineUncheckedCreateWithoutClassesInput>
    connectOrCreate?: DisciplineCreateOrConnectWithoutClassesInput
    upsert?: DisciplineUpsertWithoutClassesInput
    connect?: DisciplineWhereUniqueInput
    update?: XOR<XOR<DisciplineUpdateToOneWithWhereWithoutClassesInput, DisciplineUpdateWithoutClassesInput>, DisciplineUncheckedUpdateWithoutClassesInput>
  }

  export type DisciplineCreateNestedOneWithoutMarksInput = {
    create?: XOR<DisciplineCreateWithoutMarksInput, DisciplineUncheckedCreateWithoutMarksInput>
    connectOrCreate?: DisciplineCreateOrConnectWithoutMarksInput
    connect?: DisciplineWhereUniqueInput
  }

  export type PupilCreateNestedOneWithoutMarksInput = {
    create?: XOR<PupilCreateWithoutMarksInput, PupilUncheckedCreateWithoutMarksInput>
    connectOrCreate?: PupilCreateOrConnectWithoutMarksInput
    connect?: PupilWhereUniqueInput
  }

  export type DisciplineUpdateOneRequiredWithoutMarksNestedInput = {
    create?: XOR<DisciplineCreateWithoutMarksInput, DisciplineUncheckedCreateWithoutMarksInput>
    connectOrCreate?: DisciplineCreateOrConnectWithoutMarksInput
    upsert?: DisciplineUpsertWithoutMarksInput
    connect?: DisciplineWhereUniqueInput
    update?: XOR<XOR<DisciplineUpdateToOneWithWhereWithoutMarksInput, DisciplineUpdateWithoutMarksInput>, DisciplineUncheckedUpdateWithoutMarksInput>
  }

  export type PupilUpdateOneRequiredWithoutMarksNestedInput = {
    create?: XOR<PupilCreateWithoutMarksInput, PupilUncheckedCreateWithoutMarksInput>
    connectOrCreate?: PupilCreateOrConnectWithoutMarksInput
    upsert?: PupilUpsertWithoutMarksInput
    connect?: PupilWhereUniqueInput
    update?: XOR<XOR<PupilUpdateToOneWithWhereWithoutMarksInput, PupilUpdateWithoutMarksInput>, PupilUncheckedUpdateWithoutMarksInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type RoleCreateWithoutUsersInput = {
    name: string
  }

  export type RoleUncheckedCreateWithoutUsersInput = {
    id?: number
    name: string
  }

  export type RoleCreateOrConnectWithoutUsersInput = {
    where: RoleWhereUniqueInput
    create: XOR<RoleCreateWithoutUsersInput, RoleUncheckedCreateWithoutUsersInput>
  }

  export type RoleUpsertWithoutUsersInput = {
    update: XOR<RoleUpdateWithoutUsersInput, RoleUncheckedUpdateWithoutUsersInput>
    create: XOR<RoleCreateWithoutUsersInput, RoleUncheckedCreateWithoutUsersInput>
    where?: RoleWhereInput
  }

  export type RoleUpdateToOneWithWhereWithoutUsersInput = {
    where?: RoleWhereInput
    data: XOR<RoleUpdateWithoutUsersInput, RoleUncheckedUpdateWithoutUsersInput>
  }

  export type RoleUpdateWithoutUsersInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type RoleUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type UserCreateWithoutRoleInput = {
    name: string
    surname: string
    patronymic: string
  }

  export type UserUncheckedCreateWithoutRoleInput = {
    id?: number
    name: string
    surname: string
    patronymic: string
  }

  export type UserCreateOrConnectWithoutRoleInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRoleInput, UserUncheckedCreateWithoutRoleInput>
  }

  export type UserCreateManyRoleInputEnvelope = {
    data: UserCreateManyRoleInput | UserCreateManyRoleInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithWhereUniqueWithoutRoleInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutRoleInput, UserUncheckedUpdateWithoutRoleInput>
    create: XOR<UserCreateWithoutRoleInput, UserUncheckedCreateWithoutRoleInput>
  }

  export type UserUpdateWithWhereUniqueWithoutRoleInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutRoleInput, UserUncheckedUpdateWithoutRoleInput>
  }

  export type UserUpdateManyWithWhereWithoutRoleInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutRoleInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    id?: IntFilter<"User"> | number
    roleId?: IntFilter<"User"> | number
    name?: StringFilter<"User"> | string
    surname?: StringFilter<"User"> | string
    patronymic?: StringFilter<"User"> | string
  }

  export type ClassCreateWithoutAssignedTeacherInput = {
    classTeacher?: number | null
    pupils?: PupilCreateNestedManyWithoutClassInput
    disciplines?: ClassesDisciplinesCreateNestedManyWithoutClassInput
  }

  export type ClassUncheckedCreateWithoutAssignedTeacherInput = {
    id?: number
    classTeacher?: number | null
    pupils?: PupilUncheckedCreateNestedManyWithoutClassInput
    disciplines?: ClassesDisciplinesUncheckedCreateNestedManyWithoutClassInput
  }

  export type ClassCreateOrConnectWithoutAssignedTeacherInput = {
    where: ClassWhereUniqueInput
    create: XOR<ClassCreateWithoutAssignedTeacherInput, ClassUncheckedCreateWithoutAssignedTeacherInput>
  }

  export type TeachersDisciplinesCreateWithoutTeacherInput = {
    discipline: DisciplineCreateNestedOneWithoutTeachersInput
  }

  export type TeachersDisciplinesUncheckedCreateWithoutTeacherInput = {
    disciplineId: number
  }

  export type TeachersDisciplinesCreateOrConnectWithoutTeacherInput = {
    where: TeachersDisciplinesWhereUniqueInput
    create: XOR<TeachersDisciplinesCreateWithoutTeacherInput, TeachersDisciplinesUncheckedCreateWithoutTeacherInput>
  }

  export type TeachersDisciplinesCreateManyTeacherInputEnvelope = {
    data: TeachersDisciplinesCreateManyTeacherInput | TeachersDisciplinesCreateManyTeacherInput[]
    skipDuplicates?: boolean
  }

  export type ClassUpsertWithoutAssignedTeacherInput = {
    update: XOR<ClassUpdateWithoutAssignedTeacherInput, ClassUncheckedUpdateWithoutAssignedTeacherInput>
    create: XOR<ClassCreateWithoutAssignedTeacherInput, ClassUncheckedCreateWithoutAssignedTeacherInput>
    where?: ClassWhereInput
  }

  export type ClassUpdateToOneWithWhereWithoutAssignedTeacherInput = {
    where?: ClassWhereInput
    data: XOR<ClassUpdateWithoutAssignedTeacherInput, ClassUncheckedUpdateWithoutAssignedTeacherInput>
  }

  export type ClassUpdateWithoutAssignedTeacherInput = {
    classTeacher?: NullableIntFieldUpdateOperationsInput | number | null
    pupils?: PupilUpdateManyWithoutClassNestedInput
    disciplines?: ClassesDisciplinesUpdateManyWithoutClassNestedInput
  }

  export type ClassUncheckedUpdateWithoutAssignedTeacherInput = {
    id?: IntFieldUpdateOperationsInput | number
    classTeacher?: NullableIntFieldUpdateOperationsInput | number | null
    pupils?: PupilUncheckedUpdateManyWithoutClassNestedInput
    disciplines?: ClassesDisciplinesUncheckedUpdateManyWithoutClassNestedInput
  }

  export type TeachersDisciplinesUpsertWithWhereUniqueWithoutTeacherInput = {
    where: TeachersDisciplinesWhereUniqueInput
    update: XOR<TeachersDisciplinesUpdateWithoutTeacherInput, TeachersDisciplinesUncheckedUpdateWithoutTeacherInput>
    create: XOR<TeachersDisciplinesCreateWithoutTeacherInput, TeachersDisciplinesUncheckedCreateWithoutTeacherInput>
  }

  export type TeachersDisciplinesUpdateWithWhereUniqueWithoutTeacherInput = {
    where: TeachersDisciplinesWhereUniqueInput
    data: XOR<TeachersDisciplinesUpdateWithoutTeacherInput, TeachersDisciplinesUncheckedUpdateWithoutTeacherInput>
  }

  export type TeachersDisciplinesUpdateManyWithWhereWithoutTeacherInput = {
    where: TeachersDisciplinesScalarWhereInput
    data: XOR<TeachersDisciplinesUpdateManyMutationInput, TeachersDisciplinesUncheckedUpdateManyWithoutTeacherInput>
  }

  export type TeachersDisciplinesScalarWhereInput = {
    AND?: TeachersDisciplinesScalarWhereInput | TeachersDisciplinesScalarWhereInput[]
    OR?: TeachersDisciplinesScalarWhereInput[]
    NOT?: TeachersDisciplinesScalarWhereInput | TeachersDisciplinesScalarWhereInput[]
    teacherId?: IntFilter<"TeachersDisciplines"> | number
    disciplineId?: IntFilter<"TeachersDisciplines"> | number
  }

  export type TeachersDisciplinesCreateWithoutDisciplineInput = {
    teacher: TeacherCreateNestedOneWithoutDisciplinesInput
  }

  export type TeachersDisciplinesUncheckedCreateWithoutDisciplineInput = {
    teacherId: number
  }

  export type TeachersDisciplinesCreateOrConnectWithoutDisciplineInput = {
    where: TeachersDisciplinesWhereUniqueInput
    create: XOR<TeachersDisciplinesCreateWithoutDisciplineInput, TeachersDisciplinesUncheckedCreateWithoutDisciplineInput>
  }

  export type TeachersDisciplinesCreateManyDisciplineInputEnvelope = {
    data: TeachersDisciplinesCreateManyDisciplineInput | TeachersDisciplinesCreateManyDisciplineInput[]
    skipDuplicates?: boolean
  }

  export type ClassesDisciplinesCreateWithoutDisciplineInput = {
    class: ClassCreateNestedOneWithoutDisciplinesInput
  }

  export type ClassesDisciplinesUncheckedCreateWithoutDisciplineInput = {
    classId: number
  }

  export type ClassesDisciplinesCreateOrConnectWithoutDisciplineInput = {
    where: ClassesDisciplinesWhereUniqueInput
    create: XOR<ClassesDisciplinesCreateWithoutDisciplineInput, ClassesDisciplinesUncheckedCreateWithoutDisciplineInput>
  }

  export type ClassesDisciplinesCreateManyDisciplineInputEnvelope = {
    data: ClassesDisciplinesCreateManyDisciplineInput | ClassesDisciplinesCreateManyDisciplineInput[]
    skipDuplicates?: boolean
  }

  export type DisciplinePupilsMarkCreateWithoutDisciplineInput = {
    mark: number
    pupil: PupilCreateNestedOneWithoutMarksInput
  }

  export type DisciplinePupilsMarkUncheckedCreateWithoutDisciplineInput = {
    pupilId: number
    mark: number
  }

  export type DisciplinePupilsMarkCreateOrConnectWithoutDisciplineInput = {
    where: DisciplinePupilsMarkWhereUniqueInput
    create: XOR<DisciplinePupilsMarkCreateWithoutDisciplineInput, DisciplinePupilsMarkUncheckedCreateWithoutDisciplineInput>
  }

  export type DisciplinePupilsMarkCreateManyDisciplineInputEnvelope = {
    data: DisciplinePupilsMarkCreateManyDisciplineInput | DisciplinePupilsMarkCreateManyDisciplineInput[]
    skipDuplicates?: boolean
  }

  export type TeachersDisciplinesUpsertWithWhereUniqueWithoutDisciplineInput = {
    where: TeachersDisciplinesWhereUniqueInput
    update: XOR<TeachersDisciplinesUpdateWithoutDisciplineInput, TeachersDisciplinesUncheckedUpdateWithoutDisciplineInput>
    create: XOR<TeachersDisciplinesCreateWithoutDisciplineInput, TeachersDisciplinesUncheckedCreateWithoutDisciplineInput>
  }

  export type TeachersDisciplinesUpdateWithWhereUniqueWithoutDisciplineInput = {
    where: TeachersDisciplinesWhereUniqueInput
    data: XOR<TeachersDisciplinesUpdateWithoutDisciplineInput, TeachersDisciplinesUncheckedUpdateWithoutDisciplineInput>
  }

  export type TeachersDisciplinesUpdateManyWithWhereWithoutDisciplineInput = {
    where: TeachersDisciplinesScalarWhereInput
    data: XOR<TeachersDisciplinesUpdateManyMutationInput, TeachersDisciplinesUncheckedUpdateManyWithoutDisciplineInput>
  }

  export type ClassesDisciplinesUpsertWithWhereUniqueWithoutDisciplineInput = {
    where: ClassesDisciplinesWhereUniqueInput
    update: XOR<ClassesDisciplinesUpdateWithoutDisciplineInput, ClassesDisciplinesUncheckedUpdateWithoutDisciplineInput>
    create: XOR<ClassesDisciplinesCreateWithoutDisciplineInput, ClassesDisciplinesUncheckedCreateWithoutDisciplineInput>
  }

  export type ClassesDisciplinesUpdateWithWhereUniqueWithoutDisciplineInput = {
    where: ClassesDisciplinesWhereUniqueInput
    data: XOR<ClassesDisciplinesUpdateWithoutDisciplineInput, ClassesDisciplinesUncheckedUpdateWithoutDisciplineInput>
  }

  export type ClassesDisciplinesUpdateManyWithWhereWithoutDisciplineInput = {
    where: ClassesDisciplinesScalarWhereInput
    data: XOR<ClassesDisciplinesUpdateManyMutationInput, ClassesDisciplinesUncheckedUpdateManyWithoutDisciplineInput>
  }

  export type ClassesDisciplinesScalarWhereInput = {
    AND?: ClassesDisciplinesScalarWhereInput | ClassesDisciplinesScalarWhereInput[]
    OR?: ClassesDisciplinesScalarWhereInput[]
    NOT?: ClassesDisciplinesScalarWhereInput | ClassesDisciplinesScalarWhereInput[]
    classId?: IntFilter<"ClassesDisciplines"> | number
    disciplineId?: IntFilter<"ClassesDisciplines"> | number
  }

  export type DisciplinePupilsMarkUpsertWithWhereUniqueWithoutDisciplineInput = {
    where: DisciplinePupilsMarkWhereUniqueInput
    update: XOR<DisciplinePupilsMarkUpdateWithoutDisciplineInput, DisciplinePupilsMarkUncheckedUpdateWithoutDisciplineInput>
    create: XOR<DisciplinePupilsMarkCreateWithoutDisciplineInput, DisciplinePupilsMarkUncheckedCreateWithoutDisciplineInput>
  }

  export type DisciplinePupilsMarkUpdateWithWhereUniqueWithoutDisciplineInput = {
    where: DisciplinePupilsMarkWhereUniqueInput
    data: XOR<DisciplinePupilsMarkUpdateWithoutDisciplineInput, DisciplinePupilsMarkUncheckedUpdateWithoutDisciplineInput>
  }

  export type DisciplinePupilsMarkUpdateManyWithWhereWithoutDisciplineInput = {
    where: DisciplinePupilsMarkScalarWhereInput
    data: XOR<DisciplinePupilsMarkUpdateManyMutationInput, DisciplinePupilsMarkUncheckedUpdateManyWithoutDisciplineInput>
  }

  export type DisciplinePupilsMarkScalarWhereInput = {
    AND?: DisciplinePupilsMarkScalarWhereInput | DisciplinePupilsMarkScalarWhereInput[]
    OR?: DisciplinePupilsMarkScalarWhereInput[]
    NOT?: DisciplinePupilsMarkScalarWhereInput | DisciplinePupilsMarkScalarWhereInput[]
    disciplineId?: IntFilter<"DisciplinePupilsMark"> | number
    pupilId?: IntFilter<"DisciplinePupilsMark"> | number
    mark?: IntFilter<"DisciplinePupilsMark"> | number
  }

  export type PupilCreateWithoutClassInput = {
    marks?: DisciplinePupilsMarkCreateNestedManyWithoutPupilInput
  }

  export type PupilUncheckedCreateWithoutClassInput = {
    id?: number
    marks?: DisciplinePupilsMarkUncheckedCreateNestedManyWithoutPupilInput
  }

  export type PupilCreateOrConnectWithoutClassInput = {
    where: PupilWhereUniqueInput
    create: XOR<PupilCreateWithoutClassInput, PupilUncheckedCreateWithoutClassInput>
  }

  export type PupilCreateManyClassInputEnvelope = {
    data: PupilCreateManyClassInput | PupilCreateManyClassInput[]
    skipDuplicates?: boolean
  }

  export type ClassesDisciplinesCreateWithoutClassInput = {
    discipline: DisciplineCreateNestedOneWithoutClassesInput
  }

  export type ClassesDisciplinesUncheckedCreateWithoutClassInput = {
    disciplineId: number
  }

  export type ClassesDisciplinesCreateOrConnectWithoutClassInput = {
    where: ClassesDisciplinesWhereUniqueInput
    create: XOR<ClassesDisciplinesCreateWithoutClassInput, ClassesDisciplinesUncheckedCreateWithoutClassInput>
  }

  export type ClassesDisciplinesCreateManyClassInputEnvelope = {
    data: ClassesDisciplinesCreateManyClassInput | ClassesDisciplinesCreateManyClassInput[]
    skipDuplicates?: boolean
  }

  export type TeacherCreateWithoutClassInput = {
    classroomNumber: string
    disciplines?: TeachersDisciplinesCreateNestedManyWithoutTeacherInput
  }

  export type TeacherUncheckedCreateWithoutClassInput = {
    id?: number
    classroomNumber: string
    disciplines?: TeachersDisciplinesUncheckedCreateNestedManyWithoutTeacherInput
  }

  export type TeacherCreateOrConnectWithoutClassInput = {
    where: TeacherWhereUniqueInput
    create: XOR<TeacherCreateWithoutClassInput, TeacherUncheckedCreateWithoutClassInput>
  }

  export type PupilUpsertWithWhereUniqueWithoutClassInput = {
    where: PupilWhereUniqueInput
    update: XOR<PupilUpdateWithoutClassInput, PupilUncheckedUpdateWithoutClassInput>
    create: XOR<PupilCreateWithoutClassInput, PupilUncheckedCreateWithoutClassInput>
  }

  export type PupilUpdateWithWhereUniqueWithoutClassInput = {
    where: PupilWhereUniqueInput
    data: XOR<PupilUpdateWithoutClassInput, PupilUncheckedUpdateWithoutClassInput>
  }

  export type PupilUpdateManyWithWhereWithoutClassInput = {
    where: PupilScalarWhereInput
    data: XOR<PupilUpdateManyMutationInput, PupilUncheckedUpdateManyWithoutClassInput>
  }

  export type PupilScalarWhereInput = {
    AND?: PupilScalarWhereInput | PupilScalarWhereInput[]
    OR?: PupilScalarWhereInput[]
    NOT?: PupilScalarWhereInput | PupilScalarWhereInput[]
    id?: IntFilter<"Pupil"> | number
    classId?: IntFilter<"Pupil"> | number
  }

  export type ClassesDisciplinesUpsertWithWhereUniqueWithoutClassInput = {
    where: ClassesDisciplinesWhereUniqueInput
    update: XOR<ClassesDisciplinesUpdateWithoutClassInput, ClassesDisciplinesUncheckedUpdateWithoutClassInput>
    create: XOR<ClassesDisciplinesCreateWithoutClassInput, ClassesDisciplinesUncheckedCreateWithoutClassInput>
  }

  export type ClassesDisciplinesUpdateWithWhereUniqueWithoutClassInput = {
    where: ClassesDisciplinesWhereUniqueInput
    data: XOR<ClassesDisciplinesUpdateWithoutClassInput, ClassesDisciplinesUncheckedUpdateWithoutClassInput>
  }

  export type ClassesDisciplinesUpdateManyWithWhereWithoutClassInput = {
    where: ClassesDisciplinesScalarWhereInput
    data: XOR<ClassesDisciplinesUpdateManyMutationInput, ClassesDisciplinesUncheckedUpdateManyWithoutClassInput>
  }

  export type TeacherUpsertWithoutClassInput = {
    update: XOR<TeacherUpdateWithoutClassInput, TeacherUncheckedUpdateWithoutClassInput>
    create: XOR<TeacherCreateWithoutClassInput, TeacherUncheckedCreateWithoutClassInput>
    where?: TeacherWhereInput
  }

  export type TeacherUpdateToOneWithWhereWithoutClassInput = {
    where?: TeacherWhereInput
    data: XOR<TeacherUpdateWithoutClassInput, TeacherUncheckedUpdateWithoutClassInput>
  }

  export type TeacherUpdateWithoutClassInput = {
    classroomNumber?: StringFieldUpdateOperationsInput | string
    disciplines?: TeachersDisciplinesUpdateManyWithoutTeacherNestedInput
  }

  export type TeacherUncheckedUpdateWithoutClassInput = {
    id?: IntFieldUpdateOperationsInput | number
    classroomNumber?: StringFieldUpdateOperationsInput | string
    disciplines?: TeachersDisciplinesUncheckedUpdateManyWithoutTeacherNestedInput
  }

  export type ClassCreateWithoutPupilsInput = {
    classTeacher?: number | null
    disciplines?: ClassesDisciplinesCreateNestedManyWithoutClassInput
    assignedTeacher?: TeacherCreateNestedOneWithoutClassInput
  }

  export type ClassUncheckedCreateWithoutPupilsInput = {
    id?: number
    classTeacher?: number | null
    disciplines?: ClassesDisciplinesUncheckedCreateNestedManyWithoutClassInput
    assignedTeacher?: TeacherUncheckedCreateNestedOneWithoutClassInput
  }

  export type ClassCreateOrConnectWithoutPupilsInput = {
    where: ClassWhereUniqueInput
    create: XOR<ClassCreateWithoutPupilsInput, ClassUncheckedCreateWithoutPupilsInput>
  }

  export type DisciplinePupilsMarkCreateWithoutPupilInput = {
    mark: number
    discipline: DisciplineCreateNestedOneWithoutMarksInput
  }

  export type DisciplinePupilsMarkUncheckedCreateWithoutPupilInput = {
    disciplineId: number
    mark: number
  }

  export type DisciplinePupilsMarkCreateOrConnectWithoutPupilInput = {
    where: DisciplinePupilsMarkWhereUniqueInput
    create: XOR<DisciplinePupilsMarkCreateWithoutPupilInput, DisciplinePupilsMarkUncheckedCreateWithoutPupilInput>
  }

  export type DisciplinePupilsMarkCreateManyPupilInputEnvelope = {
    data: DisciplinePupilsMarkCreateManyPupilInput | DisciplinePupilsMarkCreateManyPupilInput[]
    skipDuplicates?: boolean
  }

  export type ClassUpsertWithoutPupilsInput = {
    update: XOR<ClassUpdateWithoutPupilsInput, ClassUncheckedUpdateWithoutPupilsInput>
    create: XOR<ClassCreateWithoutPupilsInput, ClassUncheckedCreateWithoutPupilsInput>
    where?: ClassWhereInput
  }

  export type ClassUpdateToOneWithWhereWithoutPupilsInput = {
    where?: ClassWhereInput
    data: XOR<ClassUpdateWithoutPupilsInput, ClassUncheckedUpdateWithoutPupilsInput>
  }

  export type ClassUpdateWithoutPupilsInput = {
    classTeacher?: NullableIntFieldUpdateOperationsInput | number | null
    disciplines?: ClassesDisciplinesUpdateManyWithoutClassNestedInput
    assignedTeacher?: TeacherUpdateOneWithoutClassNestedInput
  }

  export type ClassUncheckedUpdateWithoutPupilsInput = {
    id?: IntFieldUpdateOperationsInput | number
    classTeacher?: NullableIntFieldUpdateOperationsInput | number | null
    disciplines?: ClassesDisciplinesUncheckedUpdateManyWithoutClassNestedInput
    assignedTeacher?: TeacherUncheckedUpdateOneWithoutClassNestedInput
  }

  export type DisciplinePupilsMarkUpsertWithWhereUniqueWithoutPupilInput = {
    where: DisciplinePupilsMarkWhereUniqueInput
    update: XOR<DisciplinePupilsMarkUpdateWithoutPupilInput, DisciplinePupilsMarkUncheckedUpdateWithoutPupilInput>
    create: XOR<DisciplinePupilsMarkCreateWithoutPupilInput, DisciplinePupilsMarkUncheckedCreateWithoutPupilInput>
  }

  export type DisciplinePupilsMarkUpdateWithWhereUniqueWithoutPupilInput = {
    where: DisciplinePupilsMarkWhereUniqueInput
    data: XOR<DisciplinePupilsMarkUpdateWithoutPupilInput, DisciplinePupilsMarkUncheckedUpdateWithoutPupilInput>
  }

  export type DisciplinePupilsMarkUpdateManyWithWhereWithoutPupilInput = {
    where: DisciplinePupilsMarkScalarWhereInput
    data: XOR<DisciplinePupilsMarkUpdateManyMutationInput, DisciplinePupilsMarkUncheckedUpdateManyWithoutPupilInput>
  }

  export type TeacherCreateWithoutDisciplinesInput = {
    classroomNumber: string
    class?: ClassCreateNestedOneWithoutAssignedTeacherInput
  }

  export type TeacherUncheckedCreateWithoutDisciplinesInput = {
    id?: number
    classroomNumber: string
    classId?: number | null
  }

  export type TeacherCreateOrConnectWithoutDisciplinesInput = {
    where: TeacherWhereUniqueInput
    create: XOR<TeacherCreateWithoutDisciplinesInput, TeacherUncheckedCreateWithoutDisciplinesInput>
  }

  export type DisciplineCreateWithoutTeachersInput = {
    name: string
    description: string
    classes?: ClassesDisciplinesCreateNestedManyWithoutDisciplineInput
    marks?: DisciplinePupilsMarkCreateNestedManyWithoutDisciplineInput
  }

  export type DisciplineUncheckedCreateWithoutTeachersInput = {
    id?: number
    name: string
    description: string
    classes?: ClassesDisciplinesUncheckedCreateNestedManyWithoutDisciplineInput
    marks?: DisciplinePupilsMarkUncheckedCreateNestedManyWithoutDisciplineInput
  }

  export type DisciplineCreateOrConnectWithoutTeachersInput = {
    where: DisciplineWhereUniqueInput
    create: XOR<DisciplineCreateWithoutTeachersInput, DisciplineUncheckedCreateWithoutTeachersInput>
  }

  export type TeacherUpsertWithoutDisciplinesInput = {
    update: XOR<TeacherUpdateWithoutDisciplinesInput, TeacherUncheckedUpdateWithoutDisciplinesInput>
    create: XOR<TeacherCreateWithoutDisciplinesInput, TeacherUncheckedCreateWithoutDisciplinesInput>
    where?: TeacherWhereInput
  }

  export type TeacherUpdateToOneWithWhereWithoutDisciplinesInput = {
    where?: TeacherWhereInput
    data: XOR<TeacherUpdateWithoutDisciplinesInput, TeacherUncheckedUpdateWithoutDisciplinesInput>
  }

  export type TeacherUpdateWithoutDisciplinesInput = {
    classroomNumber?: StringFieldUpdateOperationsInput | string
    class?: ClassUpdateOneWithoutAssignedTeacherNestedInput
  }

  export type TeacherUncheckedUpdateWithoutDisciplinesInput = {
    id?: IntFieldUpdateOperationsInput | number
    classroomNumber?: StringFieldUpdateOperationsInput | string
    classId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type DisciplineUpsertWithoutTeachersInput = {
    update: XOR<DisciplineUpdateWithoutTeachersInput, DisciplineUncheckedUpdateWithoutTeachersInput>
    create: XOR<DisciplineCreateWithoutTeachersInput, DisciplineUncheckedCreateWithoutTeachersInput>
    where?: DisciplineWhereInput
  }

  export type DisciplineUpdateToOneWithWhereWithoutTeachersInput = {
    where?: DisciplineWhereInput
    data: XOR<DisciplineUpdateWithoutTeachersInput, DisciplineUncheckedUpdateWithoutTeachersInput>
  }

  export type DisciplineUpdateWithoutTeachersInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    classes?: ClassesDisciplinesUpdateManyWithoutDisciplineNestedInput
    marks?: DisciplinePupilsMarkUpdateManyWithoutDisciplineNestedInput
  }

  export type DisciplineUncheckedUpdateWithoutTeachersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    classes?: ClassesDisciplinesUncheckedUpdateManyWithoutDisciplineNestedInput
    marks?: DisciplinePupilsMarkUncheckedUpdateManyWithoutDisciplineNestedInput
  }

  export type ClassCreateWithoutDisciplinesInput = {
    classTeacher?: number | null
    pupils?: PupilCreateNestedManyWithoutClassInput
    assignedTeacher?: TeacherCreateNestedOneWithoutClassInput
  }

  export type ClassUncheckedCreateWithoutDisciplinesInput = {
    id?: number
    classTeacher?: number | null
    pupils?: PupilUncheckedCreateNestedManyWithoutClassInput
    assignedTeacher?: TeacherUncheckedCreateNestedOneWithoutClassInput
  }

  export type ClassCreateOrConnectWithoutDisciplinesInput = {
    where: ClassWhereUniqueInput
    create: XOR<ClassCreateWithoutDisciplinesInput, ClassUncheckedCreateWithoutDisciplinesInput>
  }

  export type DisciplineCreateWithoutClassesInput = {
    name: string
    description: string
    teachers?: TeachersDisciplinesCreateNestedManyWithoutDisciplineInput
    marks?: DisciplinePupilsMarkCreateNestedManyWithoutDisciplineInput
  }

  export type DisciplineUncheckedCreateWithoutClassesInput = {
    id?: number
    name: string
    description: string
    teachers?: TeachersDisciplinesUncheckedCreateNestedManyWithoutDisciplineInput
    marks?: DisciplinePupilsMarkUncheckedCreateNestedManyWithoutDisciplineInput
  }

  export type DisciplineCreateOrConnectWithoutClassesInput = {
    where: DisciplineWhereUniqueInput
    create: XOR<DisciplineCreateWithoutClassesInput, DisciplineUncheckedCreateWithoutClassesInput>
  }

  export type ClassUpsertWithoutDisciplinesInput = {
    update: XOR<ClassUpdateWithoutDisciplinesInput, ClassUncheckedUpdateWithoutDisciplinesInput>
    create: XOR<ClassCreateWithoutDisciplinesInput, ClassUncheckedCreateWithoutDisciplinesInput>
    where?: ClassWhereInput
  }

  export type ClassUpdateToOneWithWhereWithoutDisciplinesInput = {
    where?: ClassWhereInput
    data: XOR<ClassUpdateWithoutDisciplinesInput, ClassUncheckedUpdateWithoutDisciplinesInput>
  }

  export type ClassUpdateWithoutDisciplinesInput = {
    classTeacher?: NullableIntFieldUpdateOperationsInput | number | null
    pupils?: PupilUpdateManyWithoutClassNestedInput
    assignedTeacher?: TeacherUpdateOneWithoutClassNestedInput
  }

  export type ClassUncheckedUpdateWithoutDisciplinesInput = {
    id?: IntFieldUpdateOperationsInput | number
    classTeacher?: NullableIntFieldUpdateOperationsInput | number | null
    pupils?: PupilUncheckedUpdateManyWithoutClassNestedInput
    assignedTeacher?: TeacherUncheckedUpdateOneWithoutClassNestedInput
  }

  export type DisciplineUpsertWithoutClassesInput = {
    update: XOR<DisciplineUpdateWithoutClassesInput, DisciplineUncheckedUpdateWithoutClassesInput>
    create: XOR<DisciplineCreateWithoutClassesInput, DisciplineUncheckedCreateWithoutClassesInput>
    where?: DisciplineWhereInput
  }

  export type DisciplineUpdateToOneWithWhereWithoutClassesInput = {
    where?: DisciplineWhereInput
    data: XOR<DisciplineUpdateWithoutClassesInput, DisciplineUncheckedUpdateWithoutClassesInput>
  }

  export type DisciplineUpdateWithoutClassesInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    teachers?: TeachersDisciplinesUpdateManyWithoutDisciplineNestedInput
    marks?: DisciplinePupilsMarkUpdateManyWithoutDisciplineNestedInput
  }

  export type DisciplineUncheckedUpdateWithoutClassesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    teachers?: TeachersDisciplinesUncheckedUpdateManyWithoutDisciplineNestedInput
    marks?: DisciplinePupilsMarkUncheckedUpdateManyWithoutDisciplineNestedInput
  }

  export type DisciplineCreateWithoutMarksInput = {
    name: string
    description: string
    teachers?: TeachersDisciplinesCreateNestedManyWithoutDisciplineInput
    classes?: ClassesDisciplinesCreateNestedManyWithoutDisciplineInput
  }

  export type DisciplineUncheckedCreateWithoutMarksInput = {
    id?: number
    name: string
    description: string
    teachers?: TeachersDisciplinesUncheckedCreateNestedManyWithoutDisciplineInput
    classes?: ClassesDisciplinesUncheckedCreateNestedManyWithoutDisciplineInput
  }

  export type DisciplineCreateOrConnectWithoutMarksInput = {
    where: DisciplineWhereUniqueInput
    create: XOR<DisciplineCreateWithoutMarksInput, DisciplineUncheckedCreateWithoutMarksInput>
  }

  export type PupilCreateWithoutMarksInput = {
    class: ClassCreateNestedOneWithoutPupilsInput
  }

  export type PupilUncheckedCreateWithoutMarksInput = {
    id?: number
    classId: number
  }

  export type PupilCreateOrConnectWithoutMarksInput = {
    where: PupilWhereUniqueInput
    create: XOR<PupilCreateWithoutMarksInput, PupilUncheckedCreateWithoutMarksInput>
  }

  export type DisciplineUpsertWithoutMarksInput = {
    update: XOR<DisciplineUpdateWithoutMarksInput, DisciplineUncheckedUpdateWithoutMarksInput>
    create: XOR<DisciplineCreateWithoutMarksInput, DisciplineUncheckedCreateWithoutMarksInput>
    where?: DisciplineWhereInput
  }

  export type DisciplineUpdateToOneWithWhereWithoutMarksInput = {
    where?: DisciplineWhereInput
    data: XOR<DisciplineUpdateWithoutMarksInput, DisciplineUncheckedUpdateWithoutMarksInput>
  }

  export type DisciplineUpdateWithoutMarksInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    teachers?: TeachersDisciplinesUpdateManyWithoutDisciplineNestedInput
    classes?: ClassesDisciplinesUpdateManyWithoutDisciplineNestedInput
  }

  export type DisciplineUncheckedUpdateWithoutMarksInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    teachers?: TeachersDisciplinesUncheckedUpdateManyWithoutDisciplineNestedInput
    classes?: ClassesDisciplinesUncheckedUpdateManyWithoutDisciplineNestedInput
  }

  export type PupilUpsertWithoutMarksInput = {
    update: XOR<PupilUpdateWithoutMarksInput, PupilUncheckedUpdateWithoutMarksInput>
    create: XOR<PupilCreateWithoutMarksInput, PupilUncheckedCreateWithoutMarksInput>
    where?: PupilWhereInput
  }

  export type PupilUpdateToOneWithWhereWithoutMarksInput = {
    where?: PupilWhereInput
    data: XOR<PupilUpdateWithoutMarksInput, PupilUncheckedUpdateWithoutMarksInput>
  }

  export type PupilUpdateWithoutMarksInput = {
    class?: ClassUpdateOneRequiredWithoutPupilsNestedInput
  }

  export type PupilUncheckedUpdateWithoutMarksInput = {
    id?: IntFieldUpdateOperationsInput | number
    classId?: IntFieldUpdateOperationsInput | number
  }

  export type UserCreateManyRoleInput = {
    id?: number
    name: string
    surname: string
    patronymic: string
  }

  export type UserUpdateWithoutRoleInput = {
    name?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    patronymic?: StringFieldUpdateOperationsInput | string
  }

  export type UserUncheckedUpdateWithoutRoleInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    patronymic?: StringFieldUpdateOperationsInput | string
  }

  export type UserUncheckedUpdateManyWithoutRoleInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    surname?: StringFieldUpdateOperationsInput | string
    patronymic?: StringFieldUpdateOperationsInput | string
  }

  export type TeachersDisciplinesCreateManyTeacherInput = {
    disciplineId: number
  }

  export type TeachersDisciplinesUpdateWithoutTeacherInput = {
    discipline?: DisciplineUpdateOneRequiredWithoutTeachersNestedInput
  }

  export type TeachersDisciplinesUncheckedUpdateWithoutTeacherInput = {
    disciplineId?: IntFieldUpdateOperationsInput | number
  }

  export type TeachersDisciplinesUncheckedUpdateManyWithoutTeacherInput = {
    disciplineId?: IntFieldUpdateOperationsInput | number
  }

  export type TeachersDisciplinesCreateManyDisciplineInput = {
    teacherId: number
  }

  export type ClassesDisciplinesCreateManyDisciplineInput = {
    classId: number
  }

  export type DisciplinePupilsMarkCreateManyDisciplineInput = {
    pupilId: number
    mark: number
  }

  export type TeachersDisciplinesUpdateWithoutDisciplineInput = {
    teacher?: TeacherUpdateOneRequiredWithoutDisciplinesNestedInput
  }

  export type TeachersDisciplinesUncheckedUpdateWithoutDisciplineInput = {
    teacherId?: IntFieldUpdateOperationsInput | number
  }

  export type TeachersDisciplinesUncheckedUpdateManyWithoutDisciplineInput = {
    teacherId?: IntFieldUpdateOperationsInput | number
  }

  export type ClassesDisciplinesUpdateWithoutDisciplineInput = {
    class?: ClassUpdateOneRequiredWithoutDisciplinesNestedInput
  }

  export type ClassesDisciplinesUncheckedUpdateWithoutDisciplineInput = {
    classId?: IntFieldUpdateOperationsInput | number
  }

  export type ClassesDisciplinesUncheckedUpdateManyWithoutDisciplineInput = {
    classId?: IntFieldUpdateOperationsInput | number
  }

  export type DisciplinePupilsMarkUpdateWithoutDisciplineInput = {
    mark?: IntFieldUpdateOperationsInput | number
    pupil?: PupilUpdateOneRequiredWithoutMarksNestedInput
  }

  export type DisciplinePupilsMarkUncheckedUpdateWithoutDisciplineInput = {
    pupilId?: IntFieldUpdateOperationsInput | number
    mark?: IntFieldUpdateOperationsInput | number
  }

  export type DisciplinePupilsMarkUncheckedUpdateManyWithoutDisciplineInput = {
    pupilId?: IntFieldUpdateOperationsInput | number
    mark?: IntFieldUpdateOperationsInput | number
  }

  export type PupilCreateManyClassInput = {
    id?: number
  }

  export type ClassesDisciplinesCreateManyClassInput = {
    disciplineId: number
  }

  export type PupilUpdateWithoutClassInput = {
    marks?: DisciplinePupilsMarkUpdateManyWithoutPupilNestedInput
  }

  export type PupilUncheckedUpdateWithoutClassInput = {
    id?: IntFieldUpdateOperationsInput | number
    marks?: DisciplinePupilsMarkUncheckedUpdateManyWithoutPupilNestedInput
  }

  export type PupilUncheckedUpdateManyWithoutClassInput = {
    id?: IntFieldUpdateOperationsInput | number
  }

  export type ClassesDisciplinesUpdateWithoutClassInput = {
    discipline?: DisciplineUpdateOneRequiredWithoutClassesNestedInput
  }

  export type ClassesDisciplinesUncheckedUpdateWithoutClassInput = {
    disciplineId?: IntFieldUpdateOperationsInput | number
  }

  export type ClassesDisciplinesUncheckedUpdateManyWithoutClassInput = {
    disciplineId?: IntFieldUpdateOperationsInput | number
  }

  export type DisciplinePupilsMarkCreateManyPupilInput = {
    disciplineId: number
    mark: number
  }

  export type DisciplinePupilsMarkUpdateWithoutPupilInput = {
    mark?: IntFieldUpdateOperationsInput | number
    discipline?: DisciplineUpdateOneRequiredWithoutMarksNestedInput
  }

  export type DisciplinePupilsMarkUncheckedUpdateWithoutPupilInput = {
    disciplineId?: IntFieldUpdateOperationsInput | number
    mark?: IntFieldUpdateOperationsInput | number
  }

  export type DisciplinePupilsMarkUncheckedUpdateManyWithoutPupilInput = {
    disciplineId?: IntFieldUpdateOperationsInput | number
    mark?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}